/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CFE
});
module.exports = __toCommonJS(main_exports);

// classes/custom-explorer-view.ts
var import_obsidian4 = require("obsidian");

// classes/source-folder.ts
var import_obsidian3 = require("obsidian");

// classes/cfe-file.ts
var import_obsidian = require("obsidian");
var _CFEFile = class {
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.CreateNew() instead.
   * 
   * CHILD CLASSES SHOULD NOT WRITE TO A FILE. THIS IS DONE INSIDE OF CFEFileHandler
   * 
   * CFEFile layer:
   * 
   * sets the source, id, file type, file name, and parent folder id of the file object.
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const sourceFolder = snv.sourceFolder;
    const unfinishedFile = new _CFEFile();
    unfinishedFile.id = sourceFolder.fileCount;
    unfinishedFile.fileType = fileType;
    unfinishedFile.fileName = name;
    unfinishedFile.parentFolderID = parentFolderID;
    sourceFolder.fileCount++;
    await SourceFolder.Save(snv);
    if (unfinishedFile.id !== unfinishedFile.parentFolderID) {
      const parentFolder = await CFEFileHandler.LoadFile(snv, unfinishedFile.parentFolderID);
      parentFolder.containedFileIDs.push(unfinishedFile.id);
      await parentFolder.Save(snv);
    }
    return unfinishedFile;
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.DisplayThumbnail() instead.
   * 
   * CFEFile layer:
   * 
   * sets the thumbnail container's css class to 'cfe-thumbnail'
   * and fully displays the file if the thumbnail is clicked.
   */
  async DisplayThumbnail(sourceAndVault, thumbnailDiv, displayDiv) {
    thumbnailDiv.className = "cfe-thumbnail vbox";
    thumbnailDiv.onclick = async () => {
      await this.Display(sourceAndVault, displayDiv);
    };
    const idText = thumbnailDiv.createDiv("hbox");
    idText.textContent = "ID: " + this.id;
    idText.style.justifyContent = "center";
    const fileText = thumbnailDiv.createDiv("hbox");
    fileText.textContent = "File Type: " + this.fileType;
    fileText.style.justifyContent = "center";
    const nameText = thumbnailDiv.createDiv("hbox");
    nameText.textContent = "File Name: " + this.fileName;
    nameText.style.justifyContent = "center";
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.Display() instead.
   * 
   * CFEFile layer:
   * 
   * empties the display container provided.
   */
  async Display(snv, container) {
    container.empty();
    const headerContainer = container.createDiv("hbox");
    const backButton = headerContainer.createEl("button", { text: "Back to parent folder" });
    headerContainer.createEl("p", { text: "File ID: " + this.id });
    headerContainer.createEl("p", { text: "File Name: " });
    const nameInput = headerContainer.createEl("input", { type: "text", value: this.fileName });
    backButton.onclick = async () => {
      const parentFolder = await CFEFileHandler.LoadFile(snv, this.parentFolderID);
      if (parentFolder !== null) {
        await parentFolder.Display(snv, container);
      }
    };
    nameInput.onchange = async () => {
      this.fileName = nameInput.value;
      await this.Save(snv);
    };
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * (it is unlikely this method will ever be overriden by child classes, but making this 'inaccessible' is for consistency)
   * 
   * Use CFEFileHandler.SaveFile() instead.
   * 
   * Formatted File layer:
   * 
   * Deletes this file ID from the original parent folder, adds this file to the new parent folder, and changes the parent folder ID
   */
  async MoveFile(sourceAndVault, newParentFolderID) {
    const oldParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, this.parentFolderID);
    const indexOfFile = oldParentFolder.containedFileIDs.indexOf(this.id);
    oldParentFolder.containedFileIDs.splice(indexOfFile, 1);
    oldParentFolder.Save(sourceAndVault);
    const newParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, newParentFolderID);
    newParentFolder.containedFileIDs.push(this.id);
    newParentFolder.Save(sourceAndVault);
    this.parentFolderID = newParentFolderID;
    this.Save(sourceAndVault);
  }
  async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const filePath = sourceFolder.vaultPath + "/" + this.id + ".json";
    const jsonData = JSON.stringify(this);
    const tFile = vault.getFileByPath(filePath);
    if (tFile === null) {
      const normalizedPath = (0, import_obsidian.normalizePath)(filePath);
      await vault.adapter.write(normalizedPath, jsonData);
      return;
    }
    await vault.modify(tFile, jsonData);
  }
};
var CFEFile = _CFEFile;
CFEFile.FILE_NAME_INPUT_INDEX = 0;
CFEFile.PARENT_FOLDER_ID_INPUT_INDEX = 1;

// classes/single-media-file.ts
var import_obsidian2 = require("obsidian");

// classes/real-file.ts
var RealFile = class extends CFEFile {
  async DisplayMediaOnly(mediaDiv, snv) {
    mediaDiv.empty();
  }
};

// classes/single-media-file.ts
var SingleMediaFile = class extends RealFile {
  get mediaType() {
    switch (this.extensionName) {
      case "png":
      case "jpg":
      case "webp":
      case "heic":
      case "gif":
        return "Image";
      case "mp4":
      case "MP4":
      case "mov":
      case "MOV":
      default:
        return "Video";
    }
  }
  async getSrc(snv) {
    const mediaFile = await this.getTFile(snv);
    const arrayBuffer = await snv.vault.readBinary(mediaFile);
    const blob = new Blob([arrayBuffer]);
    const mediaUrl = URL.createObjectURL(blob);
    return mediaUrl;
  }
  async getTFile(snv) {
    const mediaPath = await this.getPath(snv);
    let mediaFile = snv.vault.getFileByPath(mediaPath);
    if (mediaFile === null) {
      mediaFile = snv.vault.getFileByPath(mediaPath + "." + this.extensionName);
      if (mediaFile === null) {
        throw Error("File not found at path: " + mediaPath + " or " + mediaPath + "." + this.extensionName);
      }
      snv.vault.rename(mediaFile, mediaPath);
    }
    return mediaFile;
  }
  async getPath(snv) {
    const sourceFolder = snv.sourceFolder;
    return sourceFolder.vaultPath + "/" + this.id + " Actual File";
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newMediaFile.extensionName = "";
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change file" });
    const newFileInput = imageDisplayContainer.createEl("input", { type: "file" });
    await this.DisplayMediaOnly(imageDisplayContainer, snv);
    newFileInput.onchange = async () => {
      try {
        const oldFile = await this.getTFile(snv);
        try {
          await snv.vault.delete(oldFile);
        } finally {
          await this.SaveNewFile(snv, newFileInput);
          this.Display(snv, container);
        }
      } catch (e) {
        console.log();
      }
    };
  }
  async SaveNewFile(snv, fileInput) {
    const fileArray = fileInput.files;
    if (fileArray === null) {
      throw Error("no file was selected");
    }
    const mediaFile = fileArray[0];
    await this.SetFileTo(snv, mediaFile);
  }
  async SetFileTo(snv, mediaFile) {
    const partsOfPath = mediaFile.name.split(".");
    const extension = partsOfPath[partsOfPath.length - 1];
    this.fileName = partsOfPath[0];
    this.extensionName = extension;
    const path = snv.sourceFolder.vaultPath + "/" + this.id + " Actual File";
    const normalizedPath = (0, import_obsidian2.normalizePath)(path);
    await snv.vault.adapter.writeBinary(normalizedPath, await mediaFile.arrayBuffer());
    await this.Save(snv);
  }
  async DisplayMediaOnly(mediaDiv, snv) {
    await super.DisplayMediaOnly(mediaDiv, snv);
    if (this.mediaType === "Image") {
      const imageElement = mediaDiv.createEl("img");
      imageElement.src = await this.getSrc(snv);
      imageElement.style.objectFit = "contain";
    } else {
      const videoElement = mediaDiv.createEl("video");
      videoElement.src = await this.getSrc(snv);
      videoElement.controls = true;
      videoElement.loop = true;
      videoElement.autoplay = true;
      videoElement.style.objectFit = "contain";
    }
  }
};

// classes/folder.ts
var Folder = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    unfinishedFolder.containedFileIDs = [];
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const createButtonsDiv = mainDiv.createDiv("hbox");
    const newFileButton = createButtonsDiv.createEl("button", { text: "Create New File" });
    newFileButton.onclick = () => {
      this.LoadCreateFileUI(snv, mainDiv);
    };
    const mediaFilesButton = createButtonsDiv.createEl("button", { text: "Upload Multiple Images / Videos" });
    mediaFilesButton.onclick = () => {
      this.LoadFileSelectionUI(snv, mainDiv);
    };
    const folderDisplayContainer = mainDiv.createDiv("cfe-grid");
    for (let i = 0; i < this.containedFileIDs.length; i++) {
      const containedFile = await CFEFileHandler.LoadFile(snv, this.containedFileIDs[i]);
      if (containedFile !== null) {
        await containedFile.DisplayThumbnail(snv, folderDisplayContainer.createDiv(), mainDiv);
      }
    }
  }
  LoadCreateFileUI(snv, mainDiv) {
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    const wrapperDiv = popUpContainer.createDiv();
    wrapperDiv.style.position = "relative";
    const exitButton = wrapperDiv.createEl("button", { text: "X", cls: "cfe-remove-button" });
    exitButton.style.position = "absolute";
    exitButton.style.top = "0%";
    exitButton.style.right = "0%";
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    popUpContainer.createEl("p", { text: "Choose a File Type to create:" });
    const fileTypeDropdown = popUpContainer.createEl("select");
    popUpContainer.createEl("p", { text: "File Name:" });
    const nameInput = popUpContainer.createEl("input", { type: "text", value: "Unnamed" });
    popUpContainer.createEl("p", { text: "Parent Folder ID:" });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    for (let i = 0; i < CFEFileHandler.KnownFileTypes.length; i++) {
      const option = fileTypeDropdown.createEl("option");
      option.value = CFEFileHandler.KnownFileTypes[i];
      option.text = CFEFileHandler.KnownFileTypes[i];
      fileTypeDropdown.options.add(option);
    }
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      await CFEFileHandler.CreateNew(snv, fileTypeDropdown.value, parseInt(parentFolderIDInput.value), nameInput.value);
      exitButton.click();
      const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
      await resettedFolder.Display(snv, mainDiv);
    };
  }
  LoadFileSelectionUI(snv, mainDiv) {
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    popUpContainer.createEl("p", { text: "Choose your files" });
    const fileInput = popUpContainer.createEl("input", { type: "file" });
    fileInput.multiple = true;
    popUpContainer.createEl("p", { text: "Parent Folder ID: " });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    const exitButton = popUpContainer.createEl("button", { text: "X", cls: "cfe-exit-button" });
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      const fileArray = fileInput.files;
      const parentFolderID = parseInt(parentFolderIDInput.value);
      if (fileArray !== null) {
        for (let i = 0; i < fileArray.length; i++) {
          const cfeFile = await CFEFileHandler.CreateNew(snv, "Single Media File", parentFolderID, fileArray[i].name);
          const mediaFile = Object.assign(new SingleMediaFile(), cfeFile);
          await mediaFile.SetFileTo(snv, fileArray[i]);
          await mediaFile.Save(snv);
        }
        exitButton.click();
        const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
        await resettedFolder.Display(snv, mainDiv);
      }
    };
  }
};

// classes/playlist.ts
var Playlist = class extends CFEFile {
  static getNextVideoIDInOrder(playlist) {
    let nextVideoIndex = playlist.currentVideoIndex + 1;
    if (nextVideoIndex >= playlist.videoIDs.length) {
      nextVideoIndex = 0;
    }
    return nextVideoIndex;
  }
  static getNextVideoIDShuffled(playlist) {
    let nextVideoIndex = Math.random() * playlist.videoIDs.length;
    nextVideoIndex = Math.floor(nextVideoIndex);
    return nextVideoIndex;
  }
  static async loadNextVideo(sourceAndVault, playlist, videoElement) {
    if (playlist.videoOrder === "shuffled") {
      playlist.currentVideoIndex = Playlist.getNextVideoIDShuffled(playlist);
    } else {
      playlist.currentVideoIndex = Playlist.getNextVideoIDInOrder(playlist);
    }
    const nextVideo = await CFEFileHandler.LoadFile(sourceAndVault, playlist.videoIDs[playlist.currentVideoIndex]);
    videoElement.src = await nextVideo.getSrc(sourceAndVault);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newPlaylistFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newPlaylistFile.videoIDs = [];
    return newPlaylistFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    this.currentVideoIndex = 0;
    const videoDisplayContainer = container.createDiv("cfe-display-video");
    const videoElement = videoDisplayContainer.createEl("video");
    const buttonsContainer = container.createDiv("hbox");
    const hideButton = buttonsContainer.createEl("button", { text: "hide video" });
    hideButton.onclick = () => {
      if (hideButton.textContent === "hide video") {
        hideButton.textContent = "show video";
        videoElement.style.display = "none";
      } else {
        hideButton.textContent = "hide video";
        videoElement.style.display = "flex";
      }
    };
    const shuffleButton = buttonsContainer.createEl("button", { text: "shuffle" });
    this.videoOrder = "in order";
    shuffleButton.onclick = () => {
      if (shuffleButton.textContent === "shuffle") {
        shuffleButton.textContent = "go in order";
        this.videoOrder = "shuffled";
      } else {
        shuffleButton.textContent = "shuffle";
        this.videoOrder = "in order";
      }
    };
    const nextButton = buttonsContainer.createEl("button", { text: "next video" });
    nextButton.onclick = async () => {
      await Playlist.loadNextVideo(snv, this, videoElement);
    };
    try {
      const firstVideo = await CFEFileHandler.LoadFile(snv, this.videoIDs[this.currentVideoIndex]);
      videoElement.src = await firstVideo.getSrc(snv);
      videoElement.autoplay = true;
      videoElement.controls = true;
      videoElement.ontimeupdate = async () => {
        if (videoElement.ended) {
          await Playlist.loadNextVideo(snv, this, videoElement);
        }
      };
    } finally {
      container.createEl("p", { text: "Change files" });
      let count = 0;
      const mediaIDInputDiv = container.createDiv("vbox");
      const newFileButton = container.createEl("button", { text: "Add File" });
      for (let i = 0; i < this.videoIDs.length; i++) {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.videoIDs[currentIndex] });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      }
      newFileButton.onclick = () => {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text" });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      };
    }
  }
};

// classes/variant-media-file.ts
var VariantMediaFile = class extends RealFile {
  async getSrc(snv, index = null) {
    if (index === null) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    return await containedMedia.getSrc(snv);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newMediaFile.variantIDs = [];
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change files" });
    const mediaIDInputDiv = imageDisplayContainer.createDiv("vbox");
    const newFileButton = imageDisplayContainer.createEl("button", { text: "Add File" });
    for (let i = 0; i < this.variantIDs.length; i++) {
      const currentIndex = i;
      const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
      const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.variantIDs[currentIndex] });
      const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        mediaIDDiv.remove();
        this.variantIDs.splice(currentIndex, 1);
        await this.Save(snv);
        await this.Display(snv, container);
      };
      idInput.onchange = async () => {
        this.variantIDs[currentIndex] = parseInt(idInput.value);
        await this.Save(snv);
        await this.Display(snv, container);
      };
    }
    newFileButton.onclick = async () => {
      this.variantIDs.push(-1);
      await this.Save(snv);
      await this.Display(snv, container);
    };
    const mediaDiv = imageDisplayContainer.createDiv("vbox");
    await this.DisplayMediaOnly(mediaDiv, snv);
  }
  async DisplayMediaOnly(mediaDiv, snv, index = -1) {
    if (index === -1) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    await containedMedia.DisplayMediaOnly(mediaDiv, snv);
  }
};

// classes/source-folder-shortcut.ts
var SourceFolderShortcut = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    unfinishedFolder.pathToOtherSource = "";
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const inputDiv = mainDiv.createDiv("vbox");
    inputDiv.createEl("p", { text: "Path to Other Source Folder" });
    const pathInput = inputDiv.createEl("input", { type: "text" });
    const goButton = inputDiv.createEl("button", { text: "Go" });
    pathInput.onchange = async () => {
      this.pathToOtherSource = pathInput.value;
      await this.Save(snv);
    };
    goButton.onclick = async () => {
      const otherSource = await SourceFolder.CreateOrLoadSourceFolder(this.pathToOtherSource, snv.vault);
      otherSource.Display(mainDiv, snv.vault);
    };
  }
};

// classes/conlangs/hwayu-text.ts
var Hwayu = class {
  static Display(div, text = "", fontSize = 20, isVertical = true) {
    const textElement = div.createDiv();
    textElement.textContent = text;
    textElement.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textElement.style.fontSize = fontSize + "px";
    if (isVertical) {
      textElement.style.writingMode = "vertical-lr";
      textElement.style.textOrientation = "upright";
    }
    return textElement;
  }
  static CreateTextArea(div, existingText = "", fontSize = 20, isVertical = true) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textArea.style.fontSize = fontSize + "px";
    if (isVertical) {
      textArea.style.writingMode = "vertical-lr";
      textArea.style.textOrientation = "upright";
    }
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 20, isVertical = true) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textInput.style.fontSize = fontSize + "px";
    if (isVertical) {
      textInput.style.writingMode = "vertical-lr";
      textInput.style.textOrientation = "upright";
    }
    textInput.spellcheck = false;
    return textInput;
  }
};

// classes/conlangs/photolang-text.ts
var PhotoLang = class {
  static Display(div, text = "", fontSize = 10, moveSpeeds = null, durations = null, doLoop = false) {
    const line = new PhotoLine(text);
    if (!moveSpeeds) {
      moveSpeeds = [100, 250, 500];
    }
    if (!durations) {
      durations = [0, 500];
    }
    const displayDiv = div.createDiv();
    line.Speak(displayDiv, fontSize, moveSpeeds, durations, doLoop);
    return displayDiv;
  }
  static CreateTextArea(div, existingText = "", fontSize = 17.5) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontSize = fontSize + "px";
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 17.5) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontSize = fontSize + "px";
    textInput.spellcheck = false;
    return textInput;
  }
};
var PhotoLine = class {
  constructor(textContent = "") {
    this.glyphs = [];
    const textArray = textContent.split("   ").filter((c) => c !== "");
    let doSpace = false;
    for (let i = 0; i < textArray.length; i++) {
      const newGlyph = new PhotoGlyph();
      const glyphText = textArray[i];
      if (glyphText === "|||") {
        newGlyph.hue = 0;
        newGlyph.saturation = 0;
        newGlyph.value = 0;
        newGlyph.opacity = 0;
        newGlyph.moveSpeed = 0;
        newGlyph.duration = 0;
        newGlyph.x = this.glyphs[this.glyphs.length - 1].x;
        newGlyph.y = this.glyphs[this.glyphs.length - 1].y;
        doSpace = true;
      } else {
        let j = 0;
        let skipNext = false;
        switch (glyphText[j]) {
          case ".":
            newGlyph.moveSpeed = 0;
            break;
          case "-":
            newGlyph.moveSpeed = 1;
            break;
          case "=":
            newGlyph.moveSpeed = 2;
            break;
        }
        j++;
        switch (glyphText[j]) {
          case ".":
            newGlyph.duration = 0;
            break;
          case "-":
            newGlyph.duration = 1;
            break;
        }
        j++;
        newGlyph.shape = glyphText[j];
        j++;
        let hue1 = 0;
        switch (glyphText[j]) {
          case "r":
            hue1 = 0;
            break;
          case "o":
            hue1 = 40;
            break;
          case "y":
            hue1 = 60;
            break;
          case "g":
            hue1 = 120;
            break;
          case "c":
            hue1 = 180;
            break;
          case "b":
            hue1 = 240;
            break;
          case "p":
            hue1 = 270;
            break;
          case ".":
            newGlyph.hue = 0;
            newGlyph.saturation = 0;
            skipNext = true;
            break;
        }
        j++;
        if (!skipNext) {
          let hue2 = 0;
          switch (glyphText[j]) {
            case "r":
              hue2 = 0;
              break;
            case "o":
              hue2 = 40;
              break;
            case "y":
              hue2 = 60;
              break;
            case "g":
              hue2 = 120;
              break;
            case "c":
              hue2 = 180;
              break;
            case "b":
              hue2 = 240;
              break;
            case "p":
              hue2 = 270;
              break;
            default:
              newGlyph.hue = hue1;
              skipNext = true;
              break;
          }
          if (!skipNext) {
            if (hue1 === 0 && hue2 === 270 || hue1 === 270 && hue2 === 0) {
              newGlyph.hue = 315;
            } else {
              newGlyph.hue = (hue1 + hue2) / 2;
            }
            j++;
          }
        }
        skipNext = false;
        const saturationText = glyphText[j];
        switch (saturationText) {
          case "0":
            newGlyph.saturation = 0;
            break;
          case "1":
            newGlyph.saturation = 0.25;
            break;
          case "2":
            newGlyph.saturation = 0.5;
            break;
          case "3":
            newGlyph.saturation = 0.75;
            break;
          case "4":
            newGlyph.saturation = 1;
            break;
        }
        j++;
        const valueText = glyphText[j];
        switch (valueText) {
          case "0":
            newGlyph.value = 0;
            break;
          case "1":
            newGlyph.value = 0.1;
            break;
          case "2":
            newGlyph.value = 0.2;
            break;
          case "3":
            newGlyph.value = 0.5;
            break;
          case "4":
            newGlyph.value = 1;
            break;
        }
        j++;
        const opacityText = glyphText[j];
        switch (opacityText) {
          case ".":
            newGlyph.opacity = 0;
            break;
          case "-":
            newGlyph.opacity = 0.5;
            break;
          case "=":
            newGlyph.opacity = 1;
            break;
        }
        j++;
        const locationInfo = glyphText.substring(j);
        if (locationInfo.contains("<")) {
          newGlyph.x = 0;
        } else if (locationInfo.contains(">")) {
          newGlyph.x = 2;
        } else {
          newGlyph.x = 1;
        }
        if (locationInfo.contains("v")) {
          newGlyph.y = 0;
        } else if (locationInfo.contains("^")) {
          newGlyph.y = 2;
        } else {
          newGlyph.y = 1;
        }
        if (doSpace) {
          const emptyGlyph = new PhotoGlyph();
          emptyGlyph.hue = 0;
          emptyGlyph.saturation = 0;
          emptyGlyph.value = 0;
          emptyGlyph.opacity = 0;
          emptyGlyph.moveSpeed = 0;
          emptyGlyph.duration = 0;
          emptyGlyph.x = newGlyph.x;
          emptyGlyph.y = newGlyph.y;
          doSpace = false;
          this.glyphs.push(emptyGlyph);
        }
      }
      this.glyphs.push(newGlyph);
    }
    if (doSpace) {
      const emptyGlyph = new PhotoGlyph();
      emptyGlyph.hue = 0;
      emptyGlyph.saturation = 0;
      emptyGlyph.value = 0;
      emptyGlyph.opacity = 0;
      emptyGlyph.moveSpeed = 0;
      emptyGlyph.duration = 0;
      emptyGlyph.x = this.glyphs[0].x;
      emptyGlyph.y = this.glyphs[0].y;
      doSpace = false;
      this.glyphs.push(emptyGlyph);
    }
  }
  async Speak(div, textSize, moveSpeeds, durations, doLoop = false) {
    div.style.fontSize = textSize + "px";
    div.style.fontFamily = "Photolang";
    div.style.position = "relative";
    div.style.height = textSize * 3.25 + "px";
    div.style.width = textSize * 3.25 + "px";
    const textDiv = div.createDiv();
    textDiv.style.position = "absolute";
    textDiv.style.bottom = textSize + "px";
    textDiv.style.transitionProperty = "bottom, left, color";
    for (let i = 0; i < this.glyphs.length; i++) {
      const photoGlyph = this.glyphs[i];
      textDiv.textContent = photoGlyph.shape;
      textDiv.style.left = photoGlyph.x * textSize + "px";
      textDiv.style.bottom = photoGlyph.y * textSize + "px";
      textDiv.style.color = photoGlyph.color;
      if (doLoop && i === this.glyphs.length - 1) {
        i = -1;
      }
      textDiv.style.transition = moveSpeeds[photoGlyph.moveSpeed] + "ms";
      await sleep(moveSpeeds[photoGlyph.moveSpeed] + durations[photoGlyph.duration]);
    }
    div.remove();
  }
  async DisplayStatic(div, textSize) {
    const lineDiv = div.createDiv("hbox");
    lineDiv.style.gap = "" + textSize * 3.25 + "px)";
    for (let i = 0; i < this.glyphs.length; i++) {
      this.glyphs[i] = Object.assign(new PhotoGlyph(), this.glyphs[i]);
      this.glyphs[i].DisplayStatic(lineDiv.createDiv(), textSize);
    }
  }
};
var PhotoGlyph = class {
  get color() {
    let lightness = (2 - this.saturation) * this.value / 2;
    let newS = this.saturation * this.value / (lightness < 1 ? lightness * 2 : 2 - lightness * 2);
    if (lightness === 0 || lightness === 1) {
      newS = 0;
    }
    lightness *= 100;
    newS *= 100;
    return "hsla(" + this.hue + "," + newS + "%," + lightness + "%," + this.opacity + ")";
  }
  DisplayStatic(div, textSize) {
    const outerDiv = div.createDiv();
    outerDiv.style.position = "relative";
    outerDiv.style.width = textSize * 3.25 + "px";
    outerDiv.style.height = textSize * 3.25 + "px";
    outerDiv.className = "cfe-photoglyph";
    const glyphDiv = outerDiv.createDiv();
    glyphDiv.style.position = "absolute";
    glyphDiv.textContent = this.shape;
    glyphDiv.style.left = this.x * textSize + "px";
    glyphDiv.style.bottom = this.y * textSize + "px";
    glyphDiv.style.color = this.color;
  }
};

// classes/conlang-dictionary.ts
var ConlangDictionary = class extends CFEFile {
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const unfinishedDictionary = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    unfinishedDictionary.language = "Hwayu";
    unfinishedDictionary.words = [];
    unfinishedDictionary.searchTerm = "";
    unfinishedDictionary.searchInConlang = false;
    return unfinishedDictionary;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const languageDropdown = mainDiv.createEl("select");
    languageDropdown.createEl("option", { text: "Hwayu", value: "Hwayu" });
    languageDropdown.createEl("option", { text: "Photolang", value: "Photolang" });
    languageDropdown.value = this.language;
    const addWordDiv = mainDiv.createDiv("vbox");
    await this.CreateNewWordEditor(snv, mainDiv, addWordDiv);
    languageDropdown.onchange = async () => {
      this.language = languageDropdown.value;
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    await this.DisplayList(snv, mainDiv);
  }
  async DisplayWord(snv, mainDiv, div, index) {
    div.empty();
    const modeButton = div.createEl("button", { text: "Edit" });
    modeButton.style.top = "0";
    modeButton.style.right = "0";
    modeButton.onclick = async () => {
      await this.EditWord(snv, mainDiv, div, index);
    };
    const wordDiv = div.createDiv("hbox");
    wordDiv.style.gap = "1%";
    wordDiv.style.fontSize = "25px";
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const conlangWordDiv = this.DisplayConlangText(wordDiv, conlangWord);
    conlangWordDiv.classList.add("cfe-pointer-hover");
    wordDiv.createEl("p", { text: ":" });
    wordDiv.createEl("p", { text: definition });
    conlangWordDiv.onclick = async () => {
      try {
        await navigator.clipboard.writeText(conlangWord);
      } catch (err) {
        console.error("Failed to copy text: ", err);
      }
    };
  }
  async EditWord(snv, mainDiv, div, index) {
    div.empty();
    const buttonsDiv = div.createDiv("hbox");
    const modeButton = buttonsDiv.createEl("button", { text: "View" });
    modeButton.onclick = async () => {
      await this.DisplayWord(snv, mainDiv, div, index);
    };
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete" });
    deleteButton.classList = "cfe-remove-button";
    deleteButton.onclick = async () => {
      this.words.splice(index, 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    const wordDiv = div.createDiv("vbox");
    wordDiv.style.fontSize = "25px";
    wordDiv.createEl("p", { text: "Word in " + this.language });
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const newWordInput = this.DisplayConlangEditor(wordDiv, conlangWord);
    wordDiv.createEl("p", { text: "Definition" });
    const definitionInput = wordDiv.createEl("input", { type: "text", value: definition });
    definitionInput.style.fontSize = "25px";
    const onSubmit = async () => {
      this.words[index] = [newWordInput.value, definitionInput.value];
      this.ReSort(index);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  CreateNewWordEditor(snv, mainDiv, div) {
    div.createEl("p", { text: "Add New Word:" });
    div.createEl("p", { text: "Word in " + this.language });
    const newWordInput = this.DisplayConlangEditor(div);
    div.createEl("p", { text: "Definition" });
    const definitionInput = div.createEl("input", { type: "text", value: "" });
    const submitButton = div.createEl("button", { text: "submit" });
    const onSubmit = async () => {
      this.words.push([newWordInput.value, definitionInput.value]);
      this.ReSort(this.words.length - 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    submitButton.onclick = onSubmit;
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  DisplayConlangEditor(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.CreateTextInput(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, 25);
    }
  }
  DisplayConlangText(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.Display(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, 25, null, null, true);
    }
  }
  async DisplayList(snv, div) {
    div.createEl("p", { text: "Search in " + this.language + "?" });
    const checkbox = div.createEl("input", { type: "checkbox" });
    checkbox.checked = this.searchInConlang;
    div.createEl("p", { text: "Search term" });
    const conlangSearch = this.DisplayConlangEditor(div, this.searchTerm);
    const englishSearch = div.createEl("input", { type: "text", value: this.searchTerm });
    let prevElement = checkbox.checked ? englishSearch : conlangSearch;
    let currentElement = checkbox.checked ? conlangSearch : englishSearch;
    prevElement.style.width = "100%";
    currentElement.style.width = "100%";
    this.searchTerm = prevElement.value;
    prevElement.style.display = "none";
    currentElement.value = this.searchTerm;
    currentElement.style.display = "";
    const resultsDiv = div.createDiv("cfe-dictionary-grid");
    const refreshResults = () => {
      this.searchTerm = currentElement.value;
      this.searchInConlang = checkbox.checked;
      resultsDiv.empty();
      for (let i = 0; i < this.words.length; i++) {
        if (this.words[i][checkbox.checked ? 0 : 1].contains(currentElement.value)) {
          const wordDiv = resultsDiv.createDiv("cfe-dictionary-word");
          this.DisplayWord(snv, div, wordDiv, i);
        }
      }
    };
    refreshResults();
    conlangSearch.oninput = refreshResults;
    englishSearch.oninput = refreshResults;
    checkbox.onchange = () => {
      resultsDiv.empty();
      prevElement = checkbox.checked ? englishSearch : conlangSearch;
      currentElement = checkbox.checked ? conlangSearch : englishSearch;
      this.searchTerm = prevElement.value;
      prevElement.style.display = "none";
      currentElement.value = this.searchTerm;
      currentElement.style.display = "";
      refreshResults();
    };
  }
  ReSort(indexOfChangedWord) {
    const changedWord = this.words.splice(indexOfChangedWord, 1)[0];
    let i = 0;
    let left = 0;
    let right = this.words.length - 1;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (this.words[mid][0] < changedWord[0]) {
        left = mid + 1;
        i = left;
      } else {
        right = mid - 1;
        i = mid;
      }
    }
    this.words.splice(i, 0, changedWord);
  }
};

// classes/story.ts
var _Story = class extends CFEFile {
  MakeVertical(el) {
    el.style.writingMode = "vertical-lr";
    el.style.textOrientation = "upright";
  }
  CreateTextInput(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextInput(div, existingWord, this.fontSize, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, this.fontSize);
      default:
        input = div.createEl("input", { type: "text", value: existingWord });
        input.style.fontSize = this.fontSize + "px";
        return input;
    }
  }
  DisplayLineEdit(div, line) {
    const input = this.CreateTextArea(div, line.content);
    if (this.language !== "Photolang") {
      const speaker = this.characters[line.speakerIndex];
      input.style.backgroundColor = speaker.backgroundColor;
      input.style.color = speaker.color;
    }
    if (this.doVertical) {
      this.MakeVertical(input);
    }
    return input;
  }
  CreateTextArea(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextArea(div, existingWord, this.fontSize, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextArea(div, existingWord, this.fontSize);
      default:
        input = div.createEl("textarea", { text: existingWord });
        input.style.fontSize = this.fontSize + "px";
        return input;
    }
  }
  DisplayText(div, fontSize = this.fontSize, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
        return Hwayu.Display(div, existingWord, fontSize, this.doVertical);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, fontSize, null, null, true);
      default: {
        const text = div.createEl("p", { text: existingWord });
        text.style.fontSize = fontSize + "px";
        return text;
      }
    }
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newStoryFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newStoryFile.currentPageIndex = 0;
    newStoryFile.pages = [];
    newStoryFile.characters = [];
    newStoryFile.language = "English";
    newStoryFile.doVertical = false;
    return newStoryFile;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    this.LoadStoryUI(snv, mainDiv.createDiv("vbox"));
  }
  LoadStoryUI(snv, mainDiv) {
    mainDiv.empty();
    mainDiv.createEl("p", { text: "Go to page number:" });
    const pageSelectDiv = mainDiv.createDiv("hbox");
    const pageNumberInput = pageSelectDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    pageSelectDiv.createEl("p", { text: "/" + this.pages.length });
    const goButton = pageSelectDiv.createEl("button", { text: "Go" });
    goButton.onclick = () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      this.LoadCurrentPageEdit(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Font Size (in px):" });
    const fontSizeInput = mainDiv.createEl("input", { type: "text" });
    fontSizeInput.value = this.fontSize ? "" + this.fontSize : "17.5";
    fontSizeInput.onchange = async () => {
      this.fontSize = parseFloat(fontSizeInput.value);
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Language:" });
    const languageInput = mainDiv.createEl("select");
    for (let i = 0; i < _Story.knownLanguages.length; i++) {
      languageInput.createEl("option", { text: _Story.knownLanguages[i], value: _Story.knownLanguages[i] });
    }
    languageInput.value = this.language;
    languageInput.onchange = async () => {
      this.language = languageInput.value;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Vertical Text" });
    const doVerticalBox = mainDiv.createEl("input", { type: "checkbox" });
    doVerticalBox.checked = this.doVertical;
    doVerticalBox.onclick = async () => {
      this.doVertical = doVerticalBox.checked;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    this.LoadCharacterEditorUI(snv, mainDiv);
  }
  LoadCharacterEditorUI(snv, div) {
    const charEditorDiv = div.createDiv();
    charEditorDiv.className = this.doVertical ? "hbox" : "vbox";
    for (let i = 0; i < this.characters.length; i++) {
      const currentIndex = i;
      const charDiv = charEditorDiv.createDiv();
      charDiv.className = this.doVertical ? "vbox" : "hbox";
      charDiv.createEl("p", { text: "Name: " });
      const nameInput = this.CreateTextInput(charDiv, this.characters[currentIndex].name);
      if (this.language !== "Photolang") {
        nameInput.style.backgroundColor = this.characters[currentIndex].backgroundColor;
        nameInput.style.color = this.characters[currentIndex].color;
      }
      nameInput.onchange = async () => {
        this.characters[currentIndex].name = nameInput.value;
        await this.Save(snv);
        this.LoadStoryUI(snv, div);
      };
      if (this.doVertical) {
        nameInput.style.height = "fit-content";
      } else {
        nameInput.style.width = "fit-content";
      }
      if (this.language !== "Photolang") {
        this.LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex);
      } else {
        this.DisplayText(charDiv, 25, this.characters[currentIndex].name);
      }
    }
    const addCharButton = charEditorDiv.createEl("button", { text: "Add Character" });
    addCharButton.onclick = async () => {
      this.characters.push(new Character());
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex) {
    const colorDiv = charEditorDiv.createDiv();
    colorDiv.className = this.doVertical ? "vbox" : "hbox";
    colorDiv.createEl("p", { text: "Text Color:" });
    const colorInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].color });
    colorDiv.createEl("p", { text: "Background Color:" });
    const backgroundInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].backgroundColor });
    const swapButton = colorDiv.createEl("button", { text: "Swap" });
    colorInput.onchange = async () => {
      this.characters[currentIndex].color = colorInput.value;
      await this.Save(snv);
    };
    backgroundInput.onchange = async () => {
      this.characters[currentIndex].backgroundColor = backgroundInput.value;
      await this.Save(snv);
    };
    swapButton.onclick = async () => {
      this.characters[currentIndex].backgroundColor = colorInput.value;
      this.characters[currentIndex].color = backgroundInput.value;
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadPageSelector(snv, mainDiv) {
    const buttonsDiv = mainDiv.createDiv("hbox");
    const backButton = buttonsDiv.createEl("button", { text: "-" });
    const pageNumberInput = buttonsDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    buttonsDiv.createEl("p", { text: "/" + this.pages.length });
    const nextButton = buttonsDiv.createEl("button", { text: "+" });
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete Page" });
    deleteButton.className = "cfe-remove-button";
    const addButton = buttonsDiv.createEl("button", { text: "Add Page" });
    const editModeButton = buttonsDiv.createEl("button", { text: "Edit Mode" });
    const viewModeButton = buttonsDiv.createEl("button", { text: "View Mode" });
    const homeButton = buttonsDiv.createEl("button", { text: "Return to Story" });
    homeButton.onclick = async () => {
      await this.LoadStoryUI(snv, mainDiv);
    };
    editModeButton.onclick = async () => {
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    viewModeButton.onclick = async () => {
      await this.LoadCurrentPageDisplayOnly(snv, mainDiv);
    };
    backButton.onclick = async () => {
      if (this.currentPageIndex > 0) {
        this.currentPageIndex--;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    nextButton.onclick = async () => {
      if (this.currentPageIndex < this.pages.length) {
        this.currentPageIndex++;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    pageNumberInput.onchange = async () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    deleteButton.onclick = async () => {
      this.pages.splice(this.currentPageIndex, 1);
      await this.Save(snv);
      if (this.currentPageIndex !== 0) {
        this.currentPageIndex--;
      }
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    addButton.onclick = async () => {
      const defaultPage = new Page();
      const thisPageFileID = this.pages[this.currentPageIndex].mediaFileID;
      if (thisPageFileID !== -1 && thisPageFileID < snv.sourceFolder.fileCount) {
        defaultPage.mediaFileID = thisPageFileID;
      }
      this.pages.splice(this.currentPageIndex + 1, 0, defaultPage);
      await this.Save(snv);
      this.currentPageIndex++;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
  }
  async LoadCurrentPageEdit(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    mainDiv.createEl("p", { text: "Media File ID:" });
    const mediaFileIDInput = mainDiv.createEl("input", { type: "text" });
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaWidthInput = outerMediaDiv.createEl("input", { type: "text" });
    mediaWidthInput.onchange = async () => {
      outerMediaDiv.style.width = mediaWidthInput.value + "%";
      linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      this.pages[this.currentPageIndex].mediaSizePercentage = parseInt(mediaWidthInput.value);
      await this.Save(snv);
    };
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    if (this.currentPageIndex < this.pages.length) {
      const currentPage = this.pages[this.currentPageIndex];
      const mediaFileID = currentPage.mediaFileID;
      mediaFileIDInput.value = "" + currentPage.mediaFileID;
      if (mediaFileID > 0) {
        const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
        await mediaFile.DisplayMediaOnly(mediaDiv, snv);
      }
      if (this.pages[this.currentPageIndex].mediaSizePercentage) {
        mediaWidthInput.value = "" + this.pages[this.currentPageIndex].mediaSizePercentage;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      } else {
        mediaWidthInput.value = "50";
        this.pages[this.currentPageIndex].mediaSizePercentage = 50;
        await this.Save(snv);
      }
    } else {
      const defaultPage = new Page();
      const lastPage = this.currentPageIndex - 1;
      if (lastPage >= 0 && this.currentPageIndex !== 0) {
        const lastPageFileID = this.pages[lastPage].mediaFileID;
        const lastPageSize = this.pages[lastPage].mediaSizePercentage;
        defaultPage.mediaSizePercentage = lastPageSize;
        mediaWidthInput.value = "" + lastPageSize;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
        if (lastPageFileID !== -1 && lastPageFileID < snv.sourceFolder.fileCount) {
          const mediaFileID = lastPageFileID + 1;
          defaultPage.mediaFileID = mediaFileID;
          mediaFileIDInput.value = "" + mediaFileID;
          if (mediaFileID > 0) {
            const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
            await mediaFile.DisplayMediaOnly(mediaDiv, snv);
          }
        }
      }
      this.pages.push(defaultPage);
      await this.Save(snv);
    }
    await this.LoadDialogueLinesEdit(snv, linesDiv);
    mediaFileIDInput.onchange = async () => {
      const currentPage = this.pages[this.currentPageIndex];
      currentPage.mediaFileID = parseInt(mediaFileIDInput.value);
      await this.Save(snv);
      const mediaFile = await CFEFileHandler.LoadFile(snv, currentPage.mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    };
  }
  async LoadCurrentPageDisplayOnly(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    const currentPage = this.pages[this.currentPageIndex];
    const mediaFileID = currentPage.mediaFileID;
    if (mediaFileID > 0) {
      const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    }
    if (this.pages[this.currentPageIndex].mediaSizePercentage) {
      const width = this.pages[this.currentPageIndex].mediaSizePercentage;
      outerMediaDiv.style.width = width + "%";
      linesDiv.style.width = 100 - width + "%";
    }
    await this.LoadDialogueLinesDisplayOnly(linesDiv);
  }
  async LoadDialogueLinesEdit(snv, linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv();
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentIndex = i;
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      const lineDiv = existingLinesDiv.createDiv();
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const deleteButton = lineDiv.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
        await this.Save(snv);
        await this.LoadDialogueLinesEdit(snv, linesDiv);
      };
      if (this.doVertical) {
        this.MakeVertical(deleteButton);
      }
      const indexTextEl = this.DisplayText(lineDiv, 25, "" + currentIndex);
      if (this.doVertical) {
        this.MakeVertical(indexTextEl);
      }
      if (this.language === "Photolang") {
        const playButton = lineDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(lineInput.value);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
        if (this.doVertical) {
          this.MakeVertical(playButton);
        }
      }
      const charDropdownButton = lineDiv.createDiv();
      const charDropdownDiv = charDropdownButton.createDiv();
      charDropdownDiv.style.height = "fit-content";
      charDropdownDiv.style.width = "fit-content";
      charDropdownDiv.style.position = "relative";
      charDropdownButton.onclick = () => {
        const selectDiv = charDropdownDiv.createDiv();
        selectDiv.className = this.doVertical ? "hbox" : "vbox";
        selectDiv.style.position = "absolute";
        selectDiv.style.top = "0%";
        selectDiv.style.left = "0%";
        for (let i2 = 0; i2 < this.characters.length; i2++) {
          const currentCharIndex = i2;
          const currentChar = this.characters[currentCharIndex];
          const currentOption = selectDiv.createDiv();
          if (this.doVertical) {
            this.MakeVertical(currentOption);
          }
          if (this.language !== "Photolang") {
            currentOption.style.backgroundColor = currentChar.backgroundColor;
            currentOption.style.color = currentChar.color;
          }
          currentOption.style.zIndex = "2";
          this.DisplayText(currentOption, 25, currentChar.name);
          currentOption.onclick = async () => {
            this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
            await this.Save(snv);
            this.LoadDialogueLinesEdit(snv, linesDiv);
          };
        }
      };
      const nameEl = this.DisplayText(charDropdownDiv, 25, this.characters[currentLine.speakerIndex].name);
      if (this.doVertical) {
        this.MakeVertical(nameEl);
      }
      if (this.language !== "Photolang") {
        nameEl.style.backgroundColor = speaker.backgroundColor;
        nameEl.style.color = speaker.color;
      }
      const lineInput = this.DisplayLineEdit(lineDiv, currentLine);
      if (this.doVertical) {
        lineInput.style.height = "100%";
        this.MakeVertical(lineInput);
      } else {
        lineInput.style.width = "100%";
      }
      lineInput.onchange = async () => {
        currentLine.content = lineInput.value;
        await this.Save(snv);
      };
    }
    const addButton = existingLinesDiv.createEl("button", { text: "+" });
    addButton.onclick = async () => {
      this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
      await this.Save(snv);
      await this.LoadDialogueLinesEdit(snv, linesDiv);
    };
  }
  // private async LoadDialogueLinesEdit(snv: SourceAndVault, linesDiv: HTMLDivElement) {
  // 	const existingLinesDiv = linesDiv.createDiv('hbox');
  // 	existingLinesDiv.style.overflowX = 'scroll';
  // 	const fontSize = '17.5px';
  // 	for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
  // 		const currentIndex = i;
  // 		const currentLine = this.pages[this.currentPageIndex].lines[i];
  // 		const speakerIndex = currentLine.speakerIndex;
  // 		const currentSpeaker = this.characters[speakerIndex];
  // 		const lineDiv = existingLinesDiv.createDiv('vbox');
  // 		const deleteButton = lineDiv.createEl('button', { text: '-' } );
  // 		deleteButton.className = 'cfe-remove-button';
  // 		deleteButton.style.writingMode = 'vertical-lr';
  // 		deleteButton.style.textOrientation = 'upright';
  // 		deleteButton.onclick = async () => {
  // 			this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
  // 			await this.Save(snv);
  // 			await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 		}
  // 		const indexElement = lineDiv.createEl('p', { text: '' +  currentIndex } );
  // 		indexElement.style.color = currentSpeaker.color;
  // 		indexElement.style.fontFamily = 'HwayuReal';
  // 		indexElement.style.writingMode = 'vertical-lr';
  // 		indexElement.style.textOrientation = 'upright';
  // 		const charDropdownDiv = lineDiv.createDiv();
  // 		charDropdownDiv.style.position = 'relative';
  // 		const charDropdown = charDropdownDiv.createEl('button');
  // 		charDropdown.style.height = 'fit-content';
  // 		charDropdown.onclick = () => {
  // 			const selectDiv = charDropdownDiv.createDiv('hbox');
  // 			selectDiv.style.position = 'absolute';
  // 			selectDiv.style.top = '0%';
  // 			selectDiv.style.left = '0%';
  // 			for (let i = 0; i < this.characters.length; i++) {
  // 				const currentCharIndex = i;
  // 				const currentChar = this.characters[currentCharIndex];
  // 				const currentOption = selectDiv.createEl('button', { text: currentChar.name, value: '' + i } );
  // 				currentOption.style.color = currentChar.color;
  // 				currentOption.style.fontFamily = 'HwayuReal';
  // 				currentOption.style.backgroundColor = currentChar.backgroundColor;
  // 				currentOption.style.writingMode = 'vertical-lr';
  // 				currentOption.style.textOrientation = 'upright';
  // 				currentOption.style.height = 'fit-content';
  // 				currentOption.style.zIndex = '2';
  // 				currentOption.onclick = async () => {
  // 					this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
  // 					const newSpeakerColor = this.characters[currentCharIndex].color;
  // 					const newBackgroundColor = this.characters[currentCharIndex].backgroundColor;
  // 					charDropdown.style.color = newSpeakerColor;
  // 					charDropdown.style.backgroundColor = newBackgroundColor;
  // 					charDropdown.textContent = this.characters[currentCharIndex].name;
  // 					lineInput.style.color = newSpeakerColor;
  // 					lineInput.style.backgroundColor = newBackgroundColor;
  // 					indexElement.style.color = newSpeakerColor;
  // 					await this.Save(snv);
  // 					selectDiv.remove();
  // 				}
  // 			}
  // 		}
  // 		charDropdown.textContent = this.characters[currentLine.speakerIndex].name;
  // 		charDropdown.style.color = currentSpeaker.color;
  // 		charDropdown.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		charDropdown.style.fontFamily = 'HwayuReal';
  // 		charDropdown.style.writingMode = 'vertical-lr';
  // 		charDropdown.style.textOrientation = 'upright';
  // 		const lineInput = lineDiv.createEl('textarea');
  // 		lineInput.spellcheck = false;
  // 		lineInput.style.overflowX = 'scroll';
  // 		lineInput.style.writingMode = 'vertical-lr';
  // 		lineInput.style.textOrientation = 'upright';
  // 		lineInput.defaultValue = currentLine.content;
  // 		lineInput.style.color = currentSpeaker.color;
  // 		lineInput.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		lineInput.style.fontFamily = 'HwayuReal';
  // 		lineInput.style.fontSize = fontSize;
  // 		lineInput.style.height = '100%';
  // 		lineInput.onchange = async () => {
  // 			this.pages[this.currentPageIndex].lines[currentIndex].content = lineInput.value;
  // 			await this.Save(snv);
  // 		}
  // 	}
  // 	const addButton = existingLinesDiv.createEl('button', { text: '+' } );
  // 	addButton.style.height = '100%';
  // 	addButton.onclick = async () => {
  // 		this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
  // 		await this.Save(snv);
  // 		await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 	}
  // }
  async LoadDialogueLinesDisplayOnly(linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv("vbox");
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      if (this.language === "Photolang") {
        const playButton = existingLinesDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(currentLine.content);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
      }
      const nameDiv = existingLinesDiv.createDiv("");
      nameDiv.className = this.doVertical ? "vbox" : "hbox";
      const lineDiv = existingLinesDiv.createDiv("");
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const nameEl = this.DisplayText(nameDiv, 25, speaker.name);
      nameEl.style.backgroundColor = speaker.backgroundColor;
      nameEl.style.color = speaker.color;
      if (this.language === "Photolang") {
        const photoLine = new PhotoLine(currentLine.content);
        photoLine.DisplayStatic(lineDiv, 25);
      } else {
        const lineEl = this.DisplayText(lineDiv, 25, currentLine.content);
        lineEl.style.backgroundColor = speaker.backgroundColor;
        lineEl.style.color = speaker.color;
      }
    }
    if (this.language === "Photolang") {
      for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
        const currentLine = this.pages[this.currentPageIndex].lines[i];
        const nameDiv = speakDiv.createDiv();
        nameDiv.style.position = "absolute";
        nameDiv.style.top = "0px";
        nameDiv.style.left = "0px";
        const photoName = new PhotoLine(this.characters[currentLine.speakerIndex].name);
        await photoName.Speak(nameDiv, 100, [100, 250, 500], [0, 500], false);
        const popup = speakDiv.createDiv();
        popup.style.position = "absolute";
        popup.style.top = "0px";
        popup.style.left = "0px";
        const photoLine = new PhotoLine(currentLine.content);
        await photoLine.Speak(popup, 200, [100, 250, 500], [0, 500], false);
      }
    }
  }
};
var Story = _Story;
Story.knownLanguages = [
  "English",
  "Hwayu",
  "Photolang"
];
var Page = class {
  constructor() {
    this.mediaFileID = -1;
    this.lines = [];
    this.mediaSizePercentage = 50;
  }
};
var DialogueLine = class {
  constructor(speakerIndex) {
    this.speakerIndex = speakerIndex;
    this.content = "";
  }
};
var Character = class {
  constructor(name = "", color = "white", backgroundColor = "white") {
    this.name = name;
    this.color = color;
    this.backgroundColor = backgroundColor;
  }
};

// classes/cfe-file-handler.ts
var CFEFileHandler = class {
  static async CreateNew(snv, fileType, parentFolderID, name) {
    let newFile;
    switch (fileType) {
      case "Folder":
      default:
        newFile = await Folder.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Single Media File":
        newFile = await SingleMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Variant Media File":
        newFile = await VariantMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Playlist":
        newFile = await Playlist.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Story":
        newFile = await Story.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Source Folder Shortcut":
        newFile = await SourceFolderShortcut.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Conlang Dictionary":
        newFile = await ConlangDictionary.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
    }
    await newFile.Save(snv);
    return newFile;
  }
  static async LoadFile(snv, fileID) {
    const sourceFolder = snv.sourceFolder;
    const vault = snv.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/" + fileID + ".json");
    if (tFile === null) {
      throw Error("File could not be found at the path: " + sourceFolder.vaultPath + "/" + fileID + ".json");
    }
    const jsonData = await vault.cachedRead(tFile);
    const plainObject = JSON.parse(jsonData);
    switch (plainObject.fileType) {
      case "Folder":
      default:
        return await Object.assign(new Folder(), plainObject);
      case "Single Media File":
        return await Object.assign(new SingleMediaFile(), plainObject);
      case "Variant Media File":
        return await Object.assign(new VariantMediaFile(), plainObject);
      case "Playlist":
        return await Object.assign(new Playlist(), plainObject);
      case "Story":
        return await Object.assign(new Story(), plainObject);
      case "Source Folder Shortcut":
        return await Object.assign(new SourceFolderShortcut(), plainObject);
      case "Conlang Dictionary":
        return await Object.assign(new ConlangDictionary(), plainObject);
    }
  }
};
/**
 * All of the known file formats
 */
CFEFileHandler.KnownFileTypes = [
  "Folder",
  "Single Media File",
  "Variant Media File",
  "Playlist",
  "Story",
  "Source Folder Shortcut",
  "Conlang Dictionary"
];

// classes/snv.ts
var SourceAndVault = class {
  constructor(sourceFolder, vault) {
    this.sourceFolder = sourceFolder;
    this.vault = vault;
  }
};

// classes/source-folder.ts
var SourceFolder = class {
  constructor() {
    this.vaultPath = "";
    this.fileCount = 0;
  }
  async Display(container, vault) {
    const snv = new SourceAndVault(this, vault);
    const notExists = vault.getFileByPath(snv.sourceFolder.vaultPath + "/0.json") === null;
    if (notExists) {
      await CFEFileHandler.CreateNew(snv, "Folder", 0, "Root Folder");
    }
    const rootFolder = await CFEFileHandler.LoadFile(snv, 0);
    await SourceFolder.Save(snv);
    await rootFolder.Save(snv);
    await rootFolder.Display(snv, container);
  }
  static async CreateOrLoadSourceFolder(vaultPath, vault) {
    vaultPath = vaultPath.endsWith("/source.json") ? vaultPath.slice(0, -12) : vaultPath;
    const exists = vault.getFileByPath(vaultPath + "/source.json") !== null;
    let newSourceFolder;
    if (exists) {
      newSourceFolder = await this.LoadExistingSource(vaultPath, vault);
    } else {
      newSourceFolder = await this.CreateNewSourceFolder(vaultPath, vault);
    }
    return newSourceFolder;
  }
  static async CreateNewSourceFolder(vaultPath, vault) {
    const newSourceFolder = new SourceFolder();
    newSourceFolder.vaultPath = vaultPath;
    newSourceFolder.fileCount = 0;
    try {
      await vault.createFolder(vaultPath);
    } finally {
      const sourcePath = (0, import_obsidian3.normalizePath)(vaultPath + "/source.json");
      await vault.adapter.write(sourcePath, "0");
    }
    return newSourceFolder;
  }
  static async LoadExistingSource(vaultPath, vault) {
    const sourceTFile = vault.getFileByPath(vaultPath + "/source.json");
    if (sourceTFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + vaultPath + "/source.json");
    }
    const jsonData = await vault.cachedRead(sourceTFile);
    const plainObject = await JSON.parse(jsonData);
    const newSourceFolder = Object.assign(new SourceFolder(), plainObject);
    newSourceFolder.vaultPath = vaultPath;
    await SourceFolder.Save(new SourceAndVault(newSourceFolder, vault));
    return newSourceFolder;
  }
  /**
   * Saves the new file count
   */
  static async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/source.json");
    if (tFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
    }
    const jsonData = JSON.stringify(sourceFolder);
    await vault.modify(tFile, jsonData);
  }
};

// classes/custom-explorer-view.ts
var VIEW_TYPE_CUSTOM_EXPLORER = "custom-explorer-view";
var CustomExplorerView = class extends import_obsidian4.ItemView {
  constructor(leaf, path) {
    super(leaf);
    this.defaultPath = path;
  }
  getViewType() {
    return VIEW_TYPE_CUSTOM_EXPLORER;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    const wrapper = this.containerEl.children[1];
    wrapper.empty();
    const mainContainer = wrapper.createDiv("cfe-main-display");
    const homePage = mainContainer.createDiv("cfe-home-page");
    homePage.createEl("h4", { text: "Path to Source Folder:" });
    const existingSourcePathInput = homePage.createEl("input", { type: "text", value: this.defaultPath });
    existingSourcePathInput.style.width = "100%";
    const submitButton = homePage.createEl("button", { text: "submit" });
    const vault = this.app.vault;
    submitButton.onclick = async () => {
      const path = existingSourcePathInput.value;
      const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
      await sf.Display(mainContainer, vault);
    };
    homePage.onkeydown = async (keyPressEvent) => {
      if (keyPressEvent.key === "Enter") {
        const path = existingSourcePathInput.value;
        const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
        await sf.Display(mainContainer, vault);
      }
    };
  }
  async onClose() {
  }
};

// main.ts
var import_obsidian5 = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultPath: "Source Folder"
};
var CFE = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CUSTOM_EXPLORER,
      (leaf) => new CustomExplorerView(leaf, this.settings.defaultPath)
    );
    this.addRibbonIcon("folder", "Activate view", () => {
      this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
    });
    this.addCommand({
      id: "open-cfe-view",
      name: "Open Custom File Explorer View",
      callback: () => {
        this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView(view_type) {
    const { workspace } = this.app;
    let leaf = null;
    leaf = workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian5.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    await leaf.setViewState({ type: view_type, active: true });
    workspace.revealLeaf(leaf);
  }
};
var SampleSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("Default Source Path").setDesc("The vault path to automatically fill in for the source path").addText((text) => text.setPlaceholder("Default Source Path").setValue(this.plugin.settings.defaultPath).onChange(async (value) => {
      this.plugin.settings.defaultPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
