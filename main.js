/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CFE
});
module.exports = __toCommonJS(main_exports);

// classes/custom-explorer-view.ts
var import_obsidian4 = require("obsidian");

// classes/source-folder.ts
var import_obsidian3 = require("obsidian");

// classes/cfe-file.ts
var import_obsidian = require("obsidian");
var _CFEFile = class {
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.CreateNew() instead.
   * 
   * CHILD CLASSES SHOULD NOT WRITE TO A FILE. THIS IS DONE INSIDE OF CFEFileHandler
   * 
   * CFEFile layer:
   * 
   * sets the source, id, file type, file name, and parent folder id of the file object.
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const sourceFolder = snv.sourceFolder;
    const unfinishedFile = new _CFEFile();
    unfinishedFile.id = sourceFolder.fileCount;
    unfinishedFile.fileType = fileType;
    unfinishedFile.fileName = name;
    unfinishedFile.parentFolderID = parentFolderID;
    sourceFolder.fileCount++;
    await SourceFolder.Save(snv);
    if (unfinishedFile.id !== unfinishedFile.parentFolderID) {
      const parentFolder = await CFEFileHandler.LoadFile(snv, unfinishedFile.parentFolderID);
      parentFolder.containedFileIDs.push(unfinishedFile.id);
      await parentFolder.Save(snv);
    }
    return unfinishedFile;
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.DisplayThumbnail() instead.
   * 
   * CFEFile layer:
   * 
   * sets the thumbnail container's css class to 'cfe-thumbnail'
   * and fully displays the file if the thumbnail is clicked.
   */
  async DisplayThumbnail(sourceAndVault, thumbnailDiv, displayDiv) {
    thumbnailDiv.className = "cfe-thumbnail vbox";
    thumbnailDiv.onclick = async () => {
      await this.Display(sourceAndVault, displayDiv);
    };
    const idText = thumbnailDiv.createDiv("hbox");
    idText.textContent = "ID: " + this.id;
    idText.style.justifyContent = "center";
    const fileText = thumbnailDiv.createDiv("hbox");
    fileText.textContent = "File Type: " + this.fileType;
    fileText.style.justifyContent = "center";
    const nameText = thumbnailDiv.createDiv("hbox");
    nameText.textContent = "File Name: " + this.fileName;
    nameText.style.justifyContent = "center";
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.Display() instead.
   * 
   * CFEFile layer:
   * 
   * empties the display container provided.
   */
  async Display(snv, container) {
    container.empty();
    const headerContainer = container.createDiv("hbox");
    const backButton = headerContainer.createEl("button", { text: "Back to parent folder" });
    headerContainer.createEl("p", { text: "File ID: " + this.id });
    headerContainer.createEl("p", { text: "File Name: " });
    const nameInput = headerContainer.createEl("input", { type: "text", value: this.fileName });
    backButton.onclick = async () => {
      const parentFolder = await CFEFileHandler.LoadFile(snv, this.parentFolderID);
      if (parentFolder !== null) {
        await parentFolder.Display(snv, container);
      }
    };
    nameInput.onchange = async () => {
      this.fileName = nameInput.value;
      await this.Save(snv);
    };
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * (it is unlikely this method will ever be overriden by child classes, but making this 'inaccessible' is for consistency)
   * 
   * Use CFEFileHandler.SaveFile() instead.
   * 
   * Formatted File layer:
   * 
   * Deletes this file ID from the original parent folder, adds this file to the new parent folder, and changes the parent folder ID
   */
  async MoveFile(sourceAndVault, newParentFolderID) {
    const oldParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, this.parentFolderID);
    const indexOfFile = oldParentFolder.containedFileIDs.indexOf(this.id);
    oldParentFolder.containedFileIDs.splice(indexOfFile, 1);
    oldParentFolder.Save(sourceAndVault);
    const newParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, newParentFolderID);
    newParentFolder.containedFileIDs.push(this.id);
    newParentFolder.Save(sourceAndVault);
    this.parentFolderID = newParentFolderID;
    this.Save(sourceAndVault);
  }
  async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const filePath = sourceFolder.vaultPath + "/" + this.id + ".json";
    const jsonData = JSON.stringify(this);
    const tFile = vault.getFileByPath(filePath);
    if (tFile === null) {
      const normalizedPath = (0, import_obsidian.normalizePath)(filePath);
      await vault.adapter.write(normalizedPath, jsonData);
      return;
    }
    await vault.modify(tFile, jsonData);
  }
};
var CFEFile = _CFEFile;
CFEFile.FILE_NAME_INPUT_INDEX = 0;
CFEFile.PARENT_FOLDER_ID_INPUT_INDEX = 1;

// classes/single-media-file.ts
var import_obsidian2 = require("obsidian");

// classes/real-file.ts
var RealFile = class extends CFEFile {
  async DisplayMediaOnly(mediaDiv, snv) {
    mediaDiv.empty();
  }
};

// classes/single-media-file.ts
var SingleMediaFile = class extends RealFile {
  get mediaType() {
    switch (this.extensionName) {
      case "png":
      case "jpg":
      case "webp":
      case "heic":
      case "gif":
        return "Image";
      case "mp4":
      case "MP4":
      case "mov":
      case "MOV":
      default:
        return "Video";
    }
  }
  async getSrc(snv) {
    const mediaFile = await this.getTFile(snv);
    const arrayBuffer = await snv.vault.readBinary(mediaFile);
    const blob = new Blob([arrayBuffer]);
    const mediaUrl = URL.createObjectURL(blob);
    return mediaUrl;
  }
  async getTFile(snv) {
    const mediaPath = await this.getPath(snv);
    let mediaFile = snv.vault.getFileByPath(mediaPath);
    if (mediaFile === null) {
      mediaFile = snv.vault.getFileByPath(mediaPath + "." + this.extensionName);
      if (mediaFile === null) {
        throw Error("File not found at path: " + mediaPath + " or " + mediaPath + "." + this.extensionName);
      }
      snv.vault.rename(mediaFile, mediaPath);
    }
    return mediaFile;
  }
  async getPath(snv) {
    const sourceFolder = snv.sourceFolder;
    return sourceFolder.vaultPath + "/" + this.id + " Actual File";
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newMediaFile.extensionName = "";
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change file" });
    const newFileInput = imageDisplayContainer.createEl("input", { type: "file" });
    await this.DisplayMediaOnly(imageDisplayContainer, snv);
    newFileInput.onchange = async () => {
      try {
        const oldFile = await this.getTFile(snv);
        try {
          await snv.vault.delete(oldFile);
        } finally {
          await this.SaveNewFile(snv, newFileInput);
          this.Display(snv, container);
        }
      } catch (e) {
        console.log();
      }
    };
  }
  async SaveNewFile(snv, fileInput) {
    const fileArray = fileInput.files;
    if (fileArray === null) {
      throw Error("no file was selected");
    }
    const mediaFile = fileArray[0];
    await this.SetFileTo(snv, mediaFile);
  }
  async SetFileTo(snv, mediaFile) {
    const partsOfPath = mediaFile.name.split(".");
    const extension = partsOfPath[partsOfPath.length - 1];
    this.fileName = partsOfPath[0];
    this.extensionName = extension;
    const path = snv.sourceFolder.vaultPath + "/" + this.id + " Actual File";
    const normalizedPath = (0, import_obsidian2.normalizePath)(path);
    await snv.vault.adapter.writeBinary(normalizedPath, await mediaFile.arrayBuffer());
    await this.Save(snv);
  }
  async DisplayMediaOnly(mediaDiv, snv) {
    await super.DisplayMediaOnly(mediaDiv, snv);
    if (this.mediaType === "Image") {
      const imageElement = mediaDiv.createEl("img");
      imageElement.src = await this.getSrc(snv);
      imageElement.style.objectFit = "contain";
    } else {
      const videoElement = mediaDiv.createEl("video");
      videoElement.src = await this.getSrc(snv);
      videoElement.controls = true;
      videoElement.loop = true;
      videoElement.autoplay = true;
      videoElement.style.objectFit = "contain";
    }
  }
};

// classes/folder.ts
var Folder = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    unfinishedFolder.containedFileIDs = [];
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const createButtonsDiv = mainDiv.createDiv("hbox");
    const newFileButton = createButtonsDiv.createEl("button", { text: "Create New File" });
    const popUpContainer = mainDiv.createDiv();
    newFileButton.onclick = () => {
      this.LoadCreateFileUI(snv, mainDiv, popUpContainer);
    };
    const mediaFilesButton = createButtonsDiv.createEl("button", { text: "Upload Multiple Images / Videos" });
    mediaFilesButton.onclick = () => {
      this.LoadFileSelectionUI(snv, mainDiv, popUpContainer);
    };
    const folderDisplayContainer = mainDiv.createDiv("cfe-grid");
    for (let i = 0; i < this.containedFileIDs.length; i++) {
      const containedFile = await CFEFileHandler.LoadFile(snv, this.containedFileIDs[i]);
      if (containedFile !== null) {
        await containedFile.DisplayThumbnail(snv, folderDisplayContainer.createDiv(), mainDiv);
      }
    }
  }
  LoadCreateFileUI(snv, mainDiv, div) {
    div.empty();
    const popupDiv = div.createDiv("cfe-popup");
    const wrapperDiv = popupDiv.createDiv();
    wrapperDiv.style.position = "relative";
    const exitButton = wrapperDiv.createEl("button", { text: "X", cls: "cfe-remove-button" });
    exitButton.style.position = "absolute";
    exitButton.style.top = "0%";
    exitButton.style.right = "0%";
    popupDiv.createEl("p", { text: "Choose a File Type to create:" });
    const fileTypeDropdown = popupDiv.createEl("select");
    popupDiv.createEl("p", { text: "File Name:" });
    const nameInput = popupDiv.createEl("input", { type: "text", value: "Unnamed" });
    popupDiv.createEl("p", { text: "Parent Folder ID:" });
    const parentFolderIDInput = popupDiv.createEl("input", { type: "text", value: "" + this.id });
    for (let i = 0; i < CFEFileHandler.KnownFileTypes.length; i++) {
      const option = fileTypeDropdown.createEl("option");
      option.value = CFEFileHandler.KnownFileTypes[i];
      option.text = CFEFileHandler.KnownFileTypes[i];
      fileTypeDropdown.options.add(option);
    }
    const submitButton = popupDiv.createEl("button", { text: "Create" });
    const onExit = () => {
      popupDiv.remove();
    };
    const onSubmit = async () => {
      await CFEFileHandler.CreateNew(snv, fileTypeDropdown.value, parseInt(parentFolderIDInput.value), nameInput.value);
      exitButton.click();
      const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
      await resettedFolder.Display(snv, mainDiv);
    };
    exitButton.onclick = onExit;
    submitButton.onclick = onSubmit;
    popupDiv.onkeydown = async (event) => {
      if (event.key === "Escape") {
        onExit();
      } else if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  LoadFileSelectionUI(snv, mainDiv, div) {
    div.empty();
    const popupDiv = div.createDiv("cfe-popup");
    const wrapperDiv = popupDiv.createDiv();
    wrapperDiv.style.position = "relative";
    popupDiv.createEl("p", { text: "Choose your files" });
    const fileInput = popupDiv.createEl("input", { type: "file" });
    fileInput.multiple = true;
    popupDiv.createEl("p", { text: "Parent Folder ID: " });
    const parentFolderIDInput = popupDiv.createEl("input", { type: "text", value: "" + this.id });
    const exitButton = wrapperDiv.createEl("button", { text: "X", cls: "cfe-remove-button" });
    exitButton.style.position = "absolute";
    exitButton.style.top = "0%";
    exitButton.style.right = "0%";
    const submitButton = popupDiv.createEl("button", { text: "Create" });
    const onExit = () => {
      popupDiv.remove();
    };
    const onSubmit = async () => {
      const fileArray = fileInput.files;
      const parentFolderID = parseInt(parentFolderIDInput.value);
      if (fileArray !== null) {
        for (let i = 0; i < fileArray.length; i++) {
          const cfeFile = await CFEFileHandler.CreateNew(snv, "Single Media File", parentFolderID, fileArray[i].name);
          const mediaFile = Object.assign(new SingleMediaFile(), cfeFile);
          await mediaFile.SetFileTo(snv, fileArray[i]);
          await mediaFile.Save(snv);
        }
        exitButton.click();
        const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
        await resettedFolder.Display(snv, mainDiv);
      }
    };
    exitButton.onclick = onExit;
    submitButton.onclick = onSubmit;
    popupDiv.onkeydown = async (event) => {
      if (event.key === "Escape") {
        onExit();
      } else if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
};

// classes/playlist.ts
var Playlist = class extends CFEFile {
  static getNextVideoIDInOrder(playlist) {
    let nextVideoIndex = playlist.currentVideoIndex + 1;
    if (nextVideoIndex >= playlist.videoIDs.length) {
      nextVideoIndex = 0;
    }
    return nextVideoIndex;
  }
  static getNextVideoIDShuffled(playlist) {
    let nextVideoIndex = Math.random() * playlist.videoIDs.length;
    nextVideoIndex = Math.floor(nextVideoIndex);
    return nextVideoIndex;
  }
  static async loadNextVideo(sourceAndVault, playlist, videoElement) {
    if (playlist.videoOrder === "shuffled") {
      playlist.currentVideoIndex = Playlist.getNextVideoIDShuffled(playlist);
    } else {
      playlist.currentVideoIndex = Playlist.getNextVideoIDInOrder(playlist);
    }
    const nextVideo = await CFEFileHandler.LoadFile(sourceAndVault, playlist.videoIDs[playlist.currentVideoIndex]);
    videoElement.src = await nextVideo.getSrc(sourceAndVault);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newPlaylistFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newPlaylistFile.videoIDs = [];
    return newPlaylistFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    this.currentVideoIndex = 0;
    const videoDisplayContainer = container.createDiv("cfe-display-video");
    const videoElement = videoDisplayContainer.createEl("video");
    const buttonsContainer = container.createDiv("hbox");
    const hideButton = buttonsContainer.createEl("button", { text: "hide video" });
    hideButton.onclick = () => {
      if (hideButton.textContent === "hide video") {
        hideButton.textContent = "show video";
        videoElement.style.display = "none";
      } else {
        hideButton.textContent = "hide video";
        videoElement.style.display = "flex";
      }
    };
    const shuffleButton = buttonsContainer.createEl("button", { text: "shuffle" });
    this.videoOrder = "in order";
    shuffleButton.onclick = () => {
      if (shuffleButton.textContent === "shuffle") {
        shuffleButton.textContent = "go in order";
        this.videoOrder = "shuffled";
      } else {
        shuffleButton.textContent = "shuffle";
        this.videoOrder = "in order";
      }
    };
    const nextButton = buttonsContainer.createEl("button", { text: "next video" });
    nextButton.onclick = async () => {
      await Playlist.loadNextVideo(snv, this, videoElement);
    };
    try {
      const firstVideo = await CFEFileHandler.LoadFile(snv, this.videoIDs[this.currentVideoIndex]);
      videoElement.src = await firstVideo.getSrc(snv);
      videoElement.autoplay = true;
      videoElement.controls = true;
      videoElement.ontimeupdate = async () => {
        if (videoElement.ended) {
          await Playlist.loadNextVideo(snv, this, videoElement);
        }
      };
    } finally {
      container.createEl("p", { text: "Change files" });
      let count = 0;
      const mediaIDInputDiv = container.createDiv("vbox");
      const newFileButton = container.createEl("button", { text: "Add File" });
      for (let i = 0; i < this.videoIDs.length; i++) {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.videoIDs[currentIndex] });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      }
      newFileButton.onclick = () => {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text" });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      };
    }
  }
};

// classes/variant-media-file.ts
var VariantMediaFile = class extends RealFile {
  async getSrc(snv, index = null) {
    if (index === null) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    return await containedMedia.getSrc(snv);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newMediaFile.variantIDs = [];
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change files" });
    const mediaIDInputDiv = imageDisplayContainer.createDiv("vbox");
    const newFileButton = imageDisplayContainer.createEl("button", { text: "Add File" });
    for (let i = 0; i < this.variantIDs.length; i++) {
      const currentIndex = i;
      const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
      const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.variantIDs[currentIndex] });
      const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        mediaIDDiv.remove();
        this.variantIDs.splice(currentIndex, 1);
        await this.Save(snv);
        await this.Display(snv, container);
      };
      idInput.onchange = async () => {
        this.variantIDs[currentIndex] = parseInt(idInput.value);
        await this.Save(snv);
        await this.Display(snv, container);
      };
    }
    newFileButton.onclick = async () => {
      this.variantIDs.push(-1);
      await this.Save(snv);
      await this.Display(snv, container);
    };
    const mediaDiv = imageDisplayContainer.createDiv("vbox");
    await this.DisplayMediaOnly(mediaDiv, snv);
  }
  async DisplayMediaOnly(mediaDiv, snv, index = -1) {
    if (index === -1) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    await containedMedia.DisplayMediaOnly(mediaDiv, snv);
  }
};

// classes/source-folder-shortcut.ts
var SourceFolderShortcut = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    unfinishedFolder.pathToOtherSource = "";
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const inputDiv = mainDiv.createDiv("vbox");
    inputDiv.createEl("p", { text: "Path to Other Source Folder" });
    const pathInput = inputDiv.createEl("input", { type: "text" });
    const goButton = inputDiv.createEl("button", { text: "Go" });
    pathInput.onchange = async () => {
      this.pathToOtherSource = pathInput.value;
      await this.Save(snv);
    };
    goButton.onclick = async () => {
      const otherSource = await SourceFolder.CreateOrLoadSourceFolder(this.pathToOtherSource, snv.vault);
      otherSource.Display(mainDiv, snv.vault);
    };
  }
};

// classes/conlangs/language.ts
var Language = class {
  static CreateOneLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    throw Error("Do not call this method on the Language class itself");
  }
  static CreateMultiLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    throw Error("Do not call this method on the Language class itself");
  }
  static Display(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    throw Error("Do not call this method on the Language class itself");
  }
  static SpeakOrAnimate(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    throw Error("Do not call this method on the Language class itself");
  }
};
var ConlangElement = class {
  constructor() {
    this.onclick = () => {
      return;
    };
  }
  get fontSize() {
    return this.realFontSize;
  }
  set fontSize(newValue) {
    this.realFontSize = newValue;
    this.style.fontSize = newValue + "px";
  }
};
var ConlangOneLineEditor = class extends ConlangElement {
  constructor() {
    super(...arguments);
    this.oninput = () => {
      return;
    };
    this.onchange = () => {
      return;
    };
  }
};
var ConlangMultiLineEditor = class extends ConlangElement {
  constructor() {
    super(...arguments);
    this.oninput = () => {
      return;
    };
    this.onchange = () => {
      return;
    };
  }
};

// classes/conlangs/hwayu.ts
var Hwayu = class extends Language {
  static CreateOneLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new HwayuOneLineEditor(div, value, fontSize, isVertical);
    return textElement;
  }
  static CreateMultiLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new HwayuMultiLineEditor(div, value, fontSize, isVertical);
    return textElement;
  }
  static Display(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new HwayuElement(div, value, fontSize, isVertical);
    return textElement;
  }
};
var HwayuElement = class extends ConlangElement {
  constructor(div, value = "", fontSize = 17.5, isVertical = true) {
    super();
    this.textElement = div.createDiv();
    this.value = value;
    this.fontSize = fontSize;
    this.isVertical = isVertical;
    this.textElement.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.textElement.style;
  }
  get value() {
    return this.textElement.textContent ? this.textElement.textContent : "";
  }
  set value(newValue) {
    this.textElement.textContent = newValue;
  }
  get className() {
    return this.textElement.className;
  }
  set className(newValue) {
    this.textElement.className = newValue;
  }
  get classList() {
    return this.textElement.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    this.style.fontFamily = newValue ? "HwayuReal" : "HwayuHorizontal";
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
};
var HwayuOneLineEditor = class extends ConlangOneLineEditor {
  constructor(div, value = "", fontSize = 17.5, isVertical = true) {
    super();
    this.inputElement = div.createEl("input", { type: "text" });
    this.inputElement.spellcheck = false;
    this.value = value;
    this.fontSize = fontSize;
    this.isVertical = isVertical;
    this.inputElement.oninput = async () => {
      this.value = this.inputElement.value;
      await this.oninput();
    };
    this.inputElement.onchange = async () => {
      this.value = this.inputElement.value;
      await this.onchange();
    };
    this.inputElement.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.inputElement.style;
  }
  get value() {
    return this.inputElement.value;
  }
  set value(newValue) {
    this.inputElement.value = newValue;
  }
  get className() {
    return this.inputElement.className;
  }
  set className(newValue) {
    this.inputElement.className = newValue;
  }
  get classList() {
    return this.inputElement.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    this.style.fontFamily = newValue ? "HwayuReal" : "HwayuHorizontal";
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
};
var HwayuMultiLineEditor = class extends ConlangMultiLineEditor {
  constructor(div, value = "", fontSize = 17.5, isVertical = true) {
    super();
    this.inputElement = div.createEl("textarea");
    this.inputElement.spellcheck = false;
    this.value = value;
    this.fontSize = fontSize;
    this.isVertical = isVertical;
    this.inputElement.oninput = async () => {
      this.value = this.inputElement.value;
      await this.oninput();
    };
    this.inputElement.onchange = async () => {
      this.value = this.inputElement.value;
      await this.onchange();
    };
    this.inputElement.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.inputElement.style;
  }
  get value() {
    return this.inputElement.value;
  }
  set value(newValue) {
    this.inputElement.value = newValue;
  }
  get className() {
    return this.inputElement.className;
  }
  set className(newValue) {
    this.inputElement.className = newValue;
  }
  get classList() {
    return this.inputElement.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    this.style.fontFamily = newValue ? "HwayuReal" : "HwayuHorizontal";
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
};

// classes/conlangs/english.ts
var English = class extends Language {
  static CreateOneLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new EnglishOneLineEditor(div, value, fontSize, isVertical);
    return textElement;
  }
  static CreateMultiLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new EnglishMultiLineEditor(div, value, fontSize, isVertical);
    return textElement;
  }
  static Display(cleanDiv, div, value = "", fontSize = 17.5, isVertical = false) {
    const textElement = new EnglishElement(div, value, fontSize, isVertical);
    return textElement;
  }
};
var EnglishElement = class extends ConlangElement {
  constructor(div, value = "", fontSize = 17.5, isVertical = false) {
    super();
    this.textElement = div.createDiv();
    this.value = value;
    this.fontSize = fontSize;
    this.isVertical = isVertical;
    this.textElement.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.textElement.style;
  }
  get value() {
    return this.textElement.textContent ? this.textElement.textContent : "";
  }
  set value(newValue) {
    this.textElement.textContent = newValue;
  }
  get className() {
    return this.textElement.className;
  }
  set className(newValue) {
    this.textElement.className = newValue;
  }
  get classList() {
    return this.textElement.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
};
var EnglishOneLineEditor = class extends ConlangOneLineEditor {
  constructor(div, value = "", fontSize = 17.5, isVertical = false) {
    super();
    this.inputElement = div.createEl("input", { type: "text" });
    this.value = value;
    this.fontSize = fontSize;
    this.isVertical = isVertical;
    this.inputElement.oninput = async () => {
      this.value = this.inputElement.value;
      await this.oninput();
    };
    this.inputElement.onchange = async () => {
      this.value = this.inputElement.value;
      await this.onchange();
    };
    this.inputElement.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.inputElement.style;
  }
  get value() {
    return this.inputElement.value;
  }
  set value(newValue) {
    this.inputElement.value = newValue;
  }
  get className() {
    return this.inputElement.className;
  }
  set className(newValue) {
    this.inputElement.className = newValue;
  }
  get classList() {
    return this.inputElement.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
};
var EnglishMultiLineEditor = class extends ConlangMultiLineEditor {
  constructor(div, value = "", fontSize = 17.5, isVertical = false) {
    super();
    this.inputElement = div.createEl("textarea");
    this.value = value;
    this.fontSize = fontSize;
    this.isVertical = isVertical;
    this.inputElement.oninput = async () => {
      this.value = this.inputElement.value;
      await this.oninput();
    };
    this.inputElement.onchange = async () => {
      this.value = this.inputElement.value;
      await this.onchange();
    };
    this.inputElement.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.inputElement.style;
  }
  get value() {
    return this.inputElement.value;
  }
  set value(newValue) {
    this.inputElement.value = newValue;
  }
  get className() {
    return this.inputElement.className;
  }
  set className(newValue) {
    this.inputElement.className = newValue;
  }
  get classList() {
    return this.inputElement.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
};

// classes/conlangs/colorlang.ts
var ColorLang = class extends Language {
  static CreateOneLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new ColorLangEditor(cleanDiv, div, value, fontSize, isVertical);
    return textElement;
  }
  static CreateMultiLineEditor(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new ColorLangEditor(cleanDiv, div, value, fontSize, isVertical);
    return textElement;
  }
  static Display(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new StaticColorLangElement(cleanDiv, div, value, fontSize, isVertical);
    return textElement;
  }
  static SpeakOrAnimate(cleanDiv, div, value = "", fontSize = 17.5, isVertical = true) {
    const textElement = new AnimatedColorLangElement(cleanDiv, div, value, fontSize, isVertical);
    return textElement;
  }
};
var AnimatedColorLangElement = class extends ConlangElement {
  constructor(cleanDiv, div, value = "", fontSize = 10, isVertical = false) {
    super();
    this.cleanDiv = cleanDiv;
    this.wrapperDiv = div.createDiv();
    this.content = new ColorPhrase();
    this.fontSize = fontSize;
    this.value = value;
    this.isVertical = isVertical;
    this.wrapperDiv.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.wrapperDiv.style;
  }
  get value() {
    return JSON.stringify(this.content);
  }
  set value(newValue) {
    try {
      const plainPhrase = JSON.parse(newValue);
      this.content = Object.assign(new ColorPhrase(), plainPhrase);
      for (let i = 0; i < this.content.words.length; i++) {
        this.content.words[i] = Object.assign(new ColorWord(), this.content.words[i]);
        for (let j = 0; j < this.content.words[i].tracks.length; j++) {
          this.content.words[i].tracks[j] = Object.assign(new ColorWordTrack(), this.content.words[i].tracks[j]);
          for (let k = 0; k < this.content.words[i].tracks[j].glyphs.length; k++) {
            this.content.words[i].tracks[j].glyphs[k] = Object.assign(new ColorGlyph(), this.content.words[i].tracks[j].glyphs[k]);
          }
        }
      }
    } catch (e) {
      console.log("Color Lang text was not valid");
    }
    this.Display();
  }
  get className() {
    return this.wrapperDiv.className;
  }
  set className(newValue) {
    this.wrapperDiv.className = newValue;
  }
  get classList() {
    return this.wrapperDiv.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
  async Display() {
    for (let i = 0; i < this.content.words.length; i++) {
      const word = this.content.words[i];
      console.log("c" + this.fontSize);
      await word.DisplayOnce(this.wrapperDiv, this.fontSize);
    }
    this.wrapperDiv.remove();
  }
};
var StaticColorLangElement = class extends ConlangElement {
  constructor(cleanDiv, div, value = "", fontSize = 10, isVertical = false) {
    super();
    this.cleanDiv = cleanDiv;
    this.wrapperDiv = div.createDiv();
    this.lineDiv = this.wrapperDiv.createDiv();
    this.content = new ColorPhrase();
    this.fontSize = fontSize;
    this.value = value;
    this.isVertical = isVertical;
    this.wrapperDiv.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.wrapperDiv.style;
  }
  get value() {
    return JSON.stringify(this.content);
  }
  set value(newValue) {
    try {
      const plainPhrase = JSON.parse(newValue);
      this.content = Object.assign(new ColorPhrase(), plainPhrase);
      for (let i = 0; i < this.content.words.length; i++) {
        this.content.words[i] = Object.assign(new ColorWord(), this.content.words[i]);
        for (let j = 0; j < this.content.words[i].tracks.length; j++) {
          this.content.words[i].tracks[j] = Object.assign(new ColorWordTrack(), this.content.words[i].tracks[j]);
          for (let k = 0; k < this.content.words[i].tracks[j].glyphs.length; k++) {
            this.content.words[i].tracks[j].glyphs[k] = Object.assign(new ColorGlyph(), this.content.words[i].tracks[j].glyphs[k]);
          }
        }
      }
    } catch (e) {
      console.log("Color Lang text was not valid");
    }
    this.Display();
  }
  get className() {
    return this.wrapperDiv.className;
  }
  set className(newValue) {
    this.wrapperDiv.className = newValue;
  }
  get classList() {
    return this.wrapperDiv.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
  Display() {
    this.lineDiv.remove();
    this.lineDiv = this.wrapperDiv.createDiv();
    for (let i = 0; i < this.content.words.length; i++) {
      const word = this.content.words[i];
      word.DisplayLoop(this.lineDiv, this.fontSize);
    }
  }
};
var ColorLangEditor = class extends ConlangOneLineEditor {
  constructor(cleanDiv, div, value = "", fontSize = 10, isVertical = false) {
    super();
    this.cleanDiv = cleanDiv;
    this.wrapperDiv = div.createDiv();
    this.lineDiv = this.wrapperDiv.createDiv();
    this.content = new ColorPhrase();
    this.fontSize = fontSize;
    this.value = value;
    this.isVertical = isVertical;
    this.wrapperDiv.onclick = async () => {
      await this.onclick();
    };
  }
  get style() {
    return this.wrapperDiv.style;
  }
  get value() {
    if (this.content.words.length > 0) {
      return JSON.stringify(this.content);
    }
    return "";
  }
  set value(newValue) {
    try {
      const plainPhrase = JSON.parse(newValue);
      this.content = Object.assign(new ColorPhrase(), plainPhrase);
      for (let i = 0; i < this.content.words.length; i++) {
        this.content.words[i] = Object.assign(new ColorWord(), this.content.words[i]);
        for (let j = 0; j < this.content.words[i].tracks.length; j++) {
          this.content.words[i].tracks[j] = Object.assign(new ColorWordTrack(), this.content.words[i].tracks[j]);
          for (let k = 0; k < this.content.words[i].tracks[j].glyphs.length; k++) {
            this.content.words[i].tracks[j].glyphs[k] = Object.assign(new ColorGlyph(), this.content.words[i].tracks[j].glyphs[k]);
          }
        }
      }
    } catch (e) {
      console.log("Color Lang text was not valid");
    }
    this.onchange();
    this.Display();
  }
  get className() {
    return this.wrapperDiv.className;
  }
  set className(newValue) {
    this.wrapperDiv.className = newValue;
  }
  get classList() {
    return this.wrapperDiv.classList;
  }
  get isVertical() {
    return this.realIsVertical;
  }
  set isVertical(newValue) {
    this.realIsVertical = newValue;
    if (newValue) {
      this.style.writingMode = "vertical-lr";
      this.style.textOrientation = "upright";
    } else {
      this.style.writingMode = "horizontal-tb";
      this.style.textOrientation = "unset";
    }
  }
  Display() {
    this.wrapperDiv.empty();
    this.lineDiv = this.wrapperDiv.createDiv(this.isVertical ? "vbox" : "hbox");
    for (let i = 0; i < this.content.words.length; i++) {
      const index = i;
      const wordCard = this.lineDiv.createDiv(this.isVertical ? "hbox" : "vbox");
      const deleteButton = wordCard.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      const wordDiv = wordCard.createDiv();
      wordDiv.classList.add("cfe-pointer-hover");
      const word = this.content.words[i];
      word.DisplayLoop(wordDiv, this.fontSize);
      wordDiv.onclick = () => {
        word.DisplayEditor(this.cleanDiv.createDiv());
      };
      const fullWordInput = wordCard.createEl("input", { type: "text", value: JSON.stringify(word) });
      fullWordInput.onchange = () => {
        const plainWord = JSON.parse(fullWordInput.value);
        this.content.words[index] = Object.assign(new ColorWord(), plainWord);
        for (let j = 0; j < this.content.words[index].tracks.length; j++) {
          this.content.words[index].tracks[j] = Object.assign(new ColorWordTrack(), this.content.words[index].tracks[j]);
          for (let k = 0; k < this.content.words[index].tracks[j].glyphs.length; k++) {
            this.content.words[index].tracks[j].glyphs[k] = Object.assign(new ColorGlyph(), this.content.words[index].tracks[j].glyphs[k]);
          }
        }
      };
      this.isVertical ? fullWordInput.style.height : fullWordInput.style.width = this.fontSize * 3.25 + "px";
      this.isVertical ? deleteButton.style.height : deleteButton.style.width = this.fontSize * 3.25 + "px";
      deleteButton.onclick = () => {
        this.content.words.splice(index, 1);
        this.value = JSON.stringify(this.content);
      };
    }
    const addButton = this.lineDiv.createEl("button", { text: "+" });
    const fullInput = this.lineDiv.createEl("input", { type: "text", value: this.value });
    this.isVertical ? fullInput.style.height : fullInput.style.width = this.fontSize * 3.25 + "px";
    const saveButton = this.lineDiv.createEl("button", { text: "save" });
    addButton.onclick = () => {
      this.content.words.push(new ColorWord());
      this.Display();
    };
    fullInput.onchange = () => {
      this.value = fullInput.value;
    };
    saveButton.onclick = () => {
      this.value = JSON.stringify(this.content);
    };
  }
};
var ColorPhrase = class {
  constructor() {
    this.words = [];
  }
  async DisplayOnce(div, fontSize = 17.5) {
    for (let i = 0; i < this.words.length; i++) {
      await this.words[i].DisplayOnce(div, fontSize);
    }
  }
  async DisplayLoop(div, fontSize = 17.5) {
    for (let i = 0; i < this.words.length; i++) {
      for (let j = 0; j < this.words.length; j++) {
        await this.words[j].DisplayOnce(div, fontSize);
      }
      if (i === this.words.length - 1) {
        i = -1;
      }
    }
  }
};
var ColorWord = class {
  constructor() {
    this.tracks = [];
    this.tracks.push(new ColorWordTrack());
  }
  get duration() {
    let max = 0;
    for (let i = 0; i < this.tracks.length; i++) {
      let ms = 0;
      ms += this.tracks[i].duration;
      if (ms > max) {
        max = ms;
      }
    }
    return max;
  }
  async DisplayOnce(div, fontSize = 17.5) {
    const wordDiv = div.createDiv();
    wordDiv.style.position = "relative";
    wordDiv.style.width = fontSize * 3.25 + "px";
    wordDiv.style.height = fontSize * 3.25 + "px";
    for (let i = 0; i < this.tracks.length; i++) {
      this.tracks[i].DisplayOnce(wordDiv, fontSize);
    }
    await sleep(this.duration);
    wordDiv.remove();
  }
  async DisplayStatic(div, fontSize = 17.5) {
    div.empty();
    const wordDiv = div.createDiv();
    wordDiv.style.position = "relative";
    wordDiv.style.width = fontSize * 3.25 + "px";
    wordDiv.style.height = fontSize * 3.25 + "px";
    for (let i = 0; i < this.tracks.length; i++) {
      const track = this.tracks[i];
      track.DisplayStatic(wordDiv, fontSize);
    }
  }
  async DisplayLoop(div, fontSize = 17.5) {
    div.empty();
    const wordDiv = div.createDiv();
    wordDiv.style.position = "relative";
    wordDiv.style.width = fontSize * 3.25 + "px";
    wordDiv.style.height = fontSize * 3.25 + "px";
    let doLoop = true;
    doLoop = true;
    while (doLoop) {
      for (let i = 0; i < this.tracks.length; i++) {
        const track = this.tracks[i];
        track.DisplayOnce(wordDiv, fontSize);
      }
      await sleep(this.duration);
    }
  }
  DisplayEditor(div) {
    div.empty();
    const popup = div.createDiv("cfe-popup");
    const exitButtonDiv = popup.createDiv();
    exitButtonDiv.style.position = "relative";
    const exitButton = exitButtonDiv.createEl("button", { text: "X" });
    exitButton.className = "cfe-remove-button";
    exitButton.style.position = "absolute";
    exitButton.style.top = "0%";
    exitButton.style.right = "0%";
    exitButton.onclick = () => {
      div.remove();
    };
    const halves = popup.createDiv("hbox");
    halves.style.width = "100%";
    halves.style.height = "100%";
    const leftSide = halves.createDiv("vbox");
    leftSide.style.width = "40%";
    const glyphsDiv = halves.createDiv("vbox");
    glyphsDiv.style.width = "60%";
    const speakDiv = leftSide.createDiv();
    speakDiv.style.height = "50%";
    this.DisplayLoop(speakDiv, 100);
    const tracksDiv = leftSide.createDiv();
    tracksDiv.style.height = "50%";
    for (let i = 0; i < this.tracks.length; i++) {
      const index = i;
      const trackDiv = tracksDiv.createDiv("hbox");
      trackDiv.style.width = "100%";
      trackDiv.style.borderStyle = "solid";
      trackDiv.style.borderColor = "#FFFFFF";
      const trackNumber = trackDiv.createEl("div", { text: "track " + i });
      trackNumber.style.width = "100%";
      trackNumber.className = "cfe-pointer-hover";
      const deleteButton = trackDiv.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      trackNumber.onclick = () => {
        this.tracks[index].DisplayEditor(glyphsDiv);
      };
      deleteButton.onclick = () => {
        this.tracks.splice(index, 1);
        trackDiv.remove();
        this.DisplayEditor(div);
      };
    }
    const addButton = tracksDiv.createEl("button", { text: "+" });
    addButton.onclick = () => {
      this.tracks.push(new ColorWordTrack());
      this.DisplayEditor(div);
    };
  }
};
var ColorWordTrack = class {
  constructor() {
    this.glyphs = [];
    this.glyphs.push(new ColorGlyph());
  }
  get duration() {
    let ms = 0;
    for (let i = 0; i < this.glyphs.length; i++) {
      ms += this.glyphs[i].transitionTime;
      ms += this.glyphs[i].duration;
    }
    return ms;
  }
  DisplayStatic(div, fontSize = 17.5) {
    if (this.glyphs.length < 1) {
      return;
    }
    const trackDiv = div.createDiv();
    trackDiv.style.position = "absolute";
    trackDiv.style.fontFamily = "ColorLang";
    trackDiv.style.fontSize = fontSize + "px";
    trackDiv.style.transitionProperty = "all";
    this.glyphs[0].DisplayStatic(trackDiv, fontSize);
  }
  async DisplayOnce(div, fontSize = 17.5) {
    const trackDiv = div.createDiv();
    trackDiv.style.position = "absolute";
    trackDiv.style.fontFamily = "ColorLang";
    trackDiv.style.fontSize = fontSize + "px";
    trackDiv.style.transitionProperty = "all";
    for (let i = 0; i < this.glyphs.length; i++) {
      const glyph = this.glyphs[i];
      await glyph.Display(trackDiv, fontSize);
    }
    trackDiv.remove();
  }
  async DisplayLoop(div, fontSize = 17.5) {
    const trackDiv = div.createDiv();
    trackDiv.style.position = "absolute";
    trackDiv.style.fontFamily = "ColorLang";
    trackDiv.style.fontSize = fontSize + "px";
    trackDiv.style.transitionProperty = "all";
    for (let i = 0; i < this.glyphs.length; i++) {
      const glyph = this.glyphs[i];
      await glyph.Display(trackDiv, fontSize);
      if (i === this.glyphs.length - 1) {
        i = -1;
      }
    }
    trackDiv.remove();
  }
  DisplayEditor(glyphsDiv) {
    glyphsDiv.empty();
    for (let i = 0; i < this.glyphs.length; i++) {
      const index = i;
      const glyphDiv = glyphsDiv.createDiv("hbox");
      glyphDiv.style.width = "100%";
      this.glyphs[i].DisplayEditor(glyphDiv);
      const deleteButton = glyphDiv.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = () => {
        glyphDiv.remove();
        this.glyphs.splice(index, 1);
        this.DisplayEditor(glyphsDiv);
      };
    }
    const addButton = glyphsDiv.createEl("button", { text: "+" });
    addButton.onclick = () => {
      this.glyphs.push(new ColorGlyph());
      this.DisplayEditor(glyphsDiv);
    };
  }
};
var ColorGlyph = class {
  constructor() {
    this.shape = "o";
    this.color = "#FFFFFF";
    this.opacity = 100;
    this.transitionTime = 100;
    this.duration = 500;
    this.size = 100;
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.r = 0;
  }
  // Full disclosure, ChatGPT wrote this one
  hexToRGBA(hex, opacity) {
    hex = hex.replace("#", "");
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    const alpha = opacity / 100;
    return `rgba(${r}, ${g}, ${b}, ${alpha})`;
  }
  DisplayStatic(div, fontSize) {
    div.textContent = this.shape;
    div.style.color = this.hexToRGBA(this.color, this.opacity);
    div.style.fontSize = fontSize * this.size / 100 + "px";
    div.style.transform = "translate(-50%, 50%) rotate(" + this.r + "deg)";
    div.style.left = this.x + 50 + "%";
    div.style.bottom = this.y + 50 + "%";
    div.style.zIndex = this.z + "";
  }
  async Display(div, fontSize) {
    div.textContent = this.shape;
    div.style.color = this.hexToRGBA(this.color, this.opacity);
    div.style.fontSize = fontSize * this.size / 100 + "px";
    div.style.transform = "translate(-50%, 50%) rotate(" + this.r + "deg)";
    div.style.left = this.x + 50 + "%";
    div.style.bottom = this.y + 50 + "%";
    div.style.zIndex = this.z + "";
    div.style.transitionDuration = this.transitionTime + "ms";
    await sleep(this.duration + this.transitionTime);
  }
  DisplayEditor(div) {
    const shapeInput = div.createEl("input", { type: "text", value: this.shape });
    shapeInput.style.fontFamily = "ColorLang";
    shapeInput.style.width = "5%";
    const colorInput = div.createEl("input", { type: "color", value: this.color });
    div.createEl("div", { text: "Alpha" });
    const opacityInput = div.createEl("input", { type: "text", value: this.opacity + "" });
    opacityInput.style.width = "7%";
    div.createEl("div", { text: "TTime" });
    const transitionTimeInput = div.createEl("input", { type: "text", value: this.transitionTime + "" });
    transitionTimeInput.style.width = "8%";
    div.createEl("div", { text: "Duration" });
    const durationInput = div.createEl("input", { type: "text", value: this.duration + "" });
    durationInput.style.width = "8%";
    div.createEl("div", { text: "Size" });
    const sizeInput = div.createEl("input", { type: "text", value: this.size + "" });
    sizeInput.style.width = "7%";
    div.createEl("div", { text: "x" });
    const xInput = div.createEl("input", { type: "text", value: this.x + "" });
    xInput.style.width = "5%";
    div.createEl("div", { text: "y" });
    const yInput = div.createEl("input", { type: "text", value: this.y + "" });
    yInput.style.width = "5%";
    div.createEl("div", { text: "z" });
    const zInput = div.createEl("input", { type: "text", value: this.z + "" });
    zInput.style.width = "5%";
    div.createEl("div", { text: "r" });
    const rInput = div.createEl("input", { type: "text", value: this.r + "" });
    rInput.style.width = "5%";
    shapeInput.onchange = () => {
      this.shape = shapeInput.value;
    };
    colorInput.onchange = () => {
      this.color = colorInput.value;
    };
    opacityInput.onchange = () => {
      this.opacity = parseInt(opacityInput.value);
    };
    transitionTimeInput.onchange = () => {
      this.transitionTime = parseFloat(transitionTimeInput.value);
    };
    durationInput.onchange = () => {
      this.duration = parseFloat(durationInput.value);
    };
    sizeInput.onchange = () => {
      this.size = parseInt(sizeInput.value);
    };
    xInput.onchange = () => {
      this.x = parseFloat(xInput.value);
    };
    yInput.onchange = () => {
      this.y = parseFloat(yInput.value);
    };
    zInput.onchange = () => {
      this.z = parseFloat(zInput.value);
    };
    rInput.onchange = () => {
      this.r = parseFloat(rInput.value);
    };
  }
};

// classes/conlangs/language-handler.ts
var LanguageHandler = class {
  static CreateOneLineEditor(cleanDiv, div, language, value = void 0, fontSize = void 0, isVertical = void 0) {
    switch (language) {
      case "English":
      default:
        return English.CreateOneLineEditor(cleanDiv, div, value, fontSize, isVertical);
      case "Hwayu":
        return Hwayu.CreateOneLineEditor(cleanDiv, div, value, fontSize, isVertical);
      case "Color Lang":
        return ColorLang.CreateOneLineEditor(cleanDiv, div, value, fontSize, isVertical);
    }
  }
  static CreateMultiLineEditor(cleanDiv, div, language, value = void 0, fontSize = void 0, isVertical = void 0) {
    switch (language) {
      case "English":
      default:
        return English.CreateMultiLineEditor(cleanDiv, div, value, fontSize, isVertical);
      case "Hwayu":
        return Hwayu.CreateMultiLineEditor(cleanDiv, div, value, fontSize, isVertical);
      case "Color Lang":
        return ColorLang.CreateMultiLineEditor(cleanDiv, div, value, fontSize, isVertical);
    }
  }
  static Display(cleanDiv, div, language, value = void 0, fontSize = void 0, isVertical = void 0) {
    switch (language) {
      case "English":
      default:
        return English.Display(cleanDiv, div, value, fontSize, isVertical);
      case "Hwayu":
        return Hwayu.Display(cleanDiv, div, value, fontSize, isVertical);
      case "Color Lang":
        return ColorLang.Display(cleanDiv, div, value, fontSize, isVertical);
    }
  }
  static SpeakOrAnimate(cleanDiv, div, language, value = void 0, fontSize = void 0, isVertical = void 0) {
    switch (language) {
      case "English":
      default:
        throw Error("This language does not have an animating or speaking function");
      case "Hwayu":
        throw Error("This language does not have an animating or speaking function");
      case "Color Lang":
        return ColorLang.SpeakOrAnimate(cleanDiv, div, value, fontSize, isVertical);
    }
  }
};
LanguageHandler.knownLanguages = [
  "English",
  "Hwayu",
  "Color Lang"
];

// classes/conlang-dictionary.ts
var ConlangDictionary = class extends CFEFile {
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const unfinishedDictionary = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    unfinishedDictionary.termLanguage = "English";
    unfinishedDictionary.definitionLanguage = "English";
    unfinishedDictionary.words = [];
    unfinishedDictionary.searchTerm = "";
    unfinishedDictionary.searchInConlang = false;
    return unfinishedDictionary;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    mainDiv.createEl("p", { text: "Term Language" });
    const termLanguageDropdown = mainDiv.createEl("select");
    for (let i = 0; i < LanguageHandler.knownLanguages.length; i++) {
      const currentLang = LanguageHandler.knownLanguages[i];
      termLanguageDropdown.createEl("option", { text: currentLang, value: currentLang });
    }
    termLanguageDropdown.value = this.termLanguage;
    mainDiv.createEl("p", { text: "Definition Language" });
    const definitionLanguageDropdown = mainDiv.createEl("select");
    for (let i = 0; i < LanguageHandler.knownLanguages.length; i++) {
      const currentLang = LanguageHandler.knownLanguages[i];
      definitionLanguageDropdown.createEl("option", { text: currentLang, value: currentLang });
    }
    definitionLanguageDropdown.value = this.definitionLanguage;
    const addWordDiv = mainDiv.createDiv("vbox");
    await this.CreateNewWordEditor(snv, mainDiv, addWordDiv);
    termLanguageDropdown.onchange = async () => {
      this.termLanguage = termLanguageDropdown.value;
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    definitionLanguageDropdown.onchange = async () => {
      this.definitionLanguage = definitionLanguageDropdown.value;
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    await this.DisplayList(snv, mainDiv);
  }
  async DisplayWord(snv, mainDiv, div, index) {
    div.empty();
    const modeButton = div.createEl("button", { text: "Edit" });
    modeButton.style.top = "0";
    modeButton.style.right = "0";
    modeButton.onclick = async () => {
      await this.EditWord(snv, mainDiv, div, index);
    };
    const wordDiv = div.createDiv("hbox");
    wordDiv.style.gap = "1%";
    wordDiv.style.fontSize = "17.5px";
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const conlangWordDiv = LanguageHandler.Display(mainDiv, wordDiv, this.termLanguage, conlangWord, 17.5);
    conlangWordDiv.classList.add("cfe-pointer-hover");
    wordDiv.createEl("div", { text: ":" });
    LanguageHandler.Display(mainDiv, wordDiv, this.definitionLanguage, definition, 17.5);
    conlangWordDiv.onclick = async () => {
      try {
        await navigator.clipboard.writeText(conlangWord);
      } catch (err) {
        console.error("Failed to copy text: ", err);
      }
    };
  }
  async EditWord(snv, mainDiv, div, index) {
    div.empty();
    const buttonsDiv = div.createDiv("hbox");
    const modeButton = buttonsDiv.createEl("button", { text: "View" });
    modeButton.onclick = async () => {
      await this.DisplayWord(snv, mainDiv, div, index);
    };
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete" });
    deleteButton.classList = "cfe-remove-button";
    deleteButton.onclick = async () => {
      this.words.splice(index, 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    const wordDiv = div.createDiv("vbox");
    wordDiv.createEl("p", { text: "Word in " + this.termLanguage });
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const newWordInput = LanguageHandler.CreateOneLineEditor(mainDiv, wordDiv, this.termLanguage, conlangWord, 17.5, false);
    wordDiv.createEl("p", { text: "Definition" });
    const definitionInput = LanguageHandler.CreateOneLineEditor(mainDiv, wordDiv, this.definitionLanguage, definition, 17.5, false);
    const onSubmit = async () => {
      this.words[index] = [newWordInput.value, definitionInput.value];
      this.ReSort(index);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  CreateNewWordEditor(snv, mainDiv, div) {
    div.createEl("p", { text: "Add New Word:" });
    div.createEl("p", { text: "Word in " + this.termLanguage });
    const newWordInput = LanguageHandler.CreateOneLineEditor(mainDiv, div, this.termLanguage, void 0, 17.5, false);
    div.createEl("p", { text: "Definition" });
    const definitionInput = LanguageHandler.CreateOneLineEditor(mainDiv, div, this.definitionLanguage, void 0, 17.5, false);
    const submitButton = div.createEl("button", { text: "submit" });
    const onSubmit = async () => {
      this.words.push([newWordInput.value, definitionInput.value]);
      this.ReSort(this.words.length - 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    submitButton.onclick = onSubmit;
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  async DisplayList(snv, div) {
    div.createEl("p", { text: "Search in " + this.termLanguage + "?" });
    const checkbox = div.createEl("input", { type: "checkbox" });
    checkbox.checked = this.searchInConlang;
    div.createEl("p", { text: "Search term" });
    const conlangSearch = LanguageHandler.CreateOneLineEditor(div, div, this.termLanguage, this.searchTerm, 17.5, false);
    const definitionSearch = LanguageHandler.CreateOneLineEditor(div, div, this.definitionLanguage, this.searchTerm, 17.5, false);
    let prevElement = checkbox.checked ? definitionSearch : conlangSearch;
    let currentElement = checkbox.checked ? conlangSearch : definitionSearch;
    prevElement.style.width = "100%";
    currentElement.style.width = "100%";
    this.searchTerm = prevElement.value;
    prevElement.style.display = "none";
    currentElement.value = this.searchTerm;
    currentElement.style.display = "";
    const resultsDiv = div.createDiv("cfe-dictionary-grid");
    const refreshResults = () => {
      this.searchTerm = currentElement.value;
      this.searchInConlang = checkbox.checked;
      resultsDiv.empty();
      for (let i = 0; i < this.words.length; i++) {
        if (this.words[i][checkbox.checked ? 0 : 1].contains(currentElement.value)) {
          const wordDiv = resultsDiv.createDiv("cfe-dictionary-word");
          this.DisplayWord(snv, div, wordDiv, i);
        }
      }
    };
    refreshResults();
    conlangSearch.oninput = refreshResults;
    definitionSearch.oninput = refreshResults;
    checkbox.onchange = () => {
      resultsDiv.empty();
      prevElement = checkbox.checked ? definitionSearch : conlangSearch;
      currentElement = checkbox.checked ? conlangSearch : definitionSearch;
      this.searchTerm = prevElement.value;
      prevElement.style.display = "none";
      currentElement.value = this.searchTerm;
      currentElement.style.display = "";
      refreshResults();
    };
  }
  ReSort(indexOfChangedWord) {
    const changedWord = this.words.splice(indexOfChangedWord, 1)[0];
    let i = 0;
    let left = 0;
    let right = this.words.length - 1;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (this.words[mid][0] < changedWord[0]) {
        left = mid + 1;
        i = left;
      } else {
        right = mid - 1;
        i = mid;
      }
    }
    this.words.splice(i, 0, changedWord);
  }
};

// classes/story.ts
var Story = class extends CFEFile {
  MakeVertical(el) {
    el.style.writingMode = "vertical-lr";
    el.style.textOrientation = "upright";
  }
  DisplayLineEdit(mainDiv, div, line) {
    const input = LanguageHandler.CreateMultiLineEditor(mainDiv, div, this.language, line.content);
    const speaker = this.characters[line.speakerIndex];
    if (this.language !== "Color Lang") {
      input.style.backgroundColor = speaker.backgroundColor;
      input.style.color = speaker.color;
    }
    input.isVertical = this.doVertical;
    return input;
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newStoryFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newStoryFile.currentPageIndex = 0;
    newStoryFile.pages = [];
    newStoryFile.characters = [];
    newStoryFile.language = "English";
    newStoryFile.doVertical = false;
    return newStoryFile;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    this.LoadStoryUI(snv, mainDiv.createDiv("vbox"));
  }
  LoadStoryUI(snv, mainDiv) {
    mainDiv.empty();
    mainDiv.createEl("p", { text: "Go to page number:" });
    const pageSelectDiv = mainDiv.createDiv("hbox");
    const pageNumberInput = pageSelectDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    pageSelectDiv.createEl("p", { text: "/" + this.pages.length });
    const goButton = pageSelectDiv.createEl("button", { text: "Go" });
    goButton.onclick = () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      this.LoadCurrentPageEdit(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Font Size (in px):" });
    const fontSizeInput = mainDiv.createEl("input", { type: "text" });
    fontSizeInput.value = this.fontSize ? "" + this.fontSize : "17.5";
    fontSizeInput.onchange = async () => {
      this.fontSize = parseFloat(fontSizeInput.value);
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Language:" });
    const languageInput = mainDiv.createEl("select");
    for (let i = 0; i < LanguageHandler.knownLanguages.length; i++) {
      languageInput.createEl("option", { text: LanguageHandler.knownLanguages[i], value: LanguageHandler.knownLanguages[i] });
    }
    languageInput.value = this.language;
    languageInput.onchange = async () => {
      this.language = languageInput.value;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Vertical Text" });
    const doVerticalBox = mainDiv.createEl("input", { type: "checkbox" });
    doVerticalBox.checked = this.doVertical;
    doVerticalBox.onclick = async () => {
      this.doVertical = doVerticalBox.checked;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    this.LoadCharacterEditorUI(snv, mainDiv);
  }
  LoadCharacterEditorUI(snv, div) {
    const charEditorDiv = div.createDiv();
    charEditorDiv.className = this.doVertical ? "hbox" : "vbox";
    for (let i = 0; i < this.characters.length; i++) {
      const currentIndex = i;
      const charDiv = charEditorDiv.createDiv();
      charDiv.className = this.doVertical ? "vbox" : "hbox";
      charDiv.createEl("p", { text: "Name: " });
      const nameInput = LanguageHandler.CreateOneLineEditor(div, charDiv, this.language, this.characters[currentIndex].name, this.fontSize, this.doVertical);
      if (this.language !== "Color Lang") {
        nameInput.style.backgroundColor = this.characters[currentIndex].backgroundColor;
        nameInput.style.color = this.characters[currentIndex].color;
      }
      nameInput.onchange = async () => {
        this.characters[currentIndex].name = nameInput.value;
        await this.Save(snv);
        this.LoadStoryUI(snv, div);
      };
      if (this.doVertical) {
        nameInput.style.height = "fit-content";
      } else {
        nameInput.style.width = "fit-content";
      }
      if (this.language !== "Color Lang") {
        this.LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex);
      }
    }
    const addCharButton = charEditorDiv.createEl("button", { text: "Add Character" });
    addCharButton.onclick = async () => {
      this.characters.push(new Character());
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex) {
    const colorDiv = charEditorDiv.createDiv();
    colorDiv.className = this.doVertical ? "vbox" : "hbox";
    colorDiv.createEl("p", { text: "Text Color:" });
    const colorInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].color });
    const swapButton = colorDiv.createEl("button", { text: "Swap" });
    colorInput.onchange = async () => {
      this.characters[currentIndex].color = colorInput.value;
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
    colorDiv.createEl("p", { text: "Background Color:" });
    const backgroundInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].backgroundColor });
    backgroundInput.onchange = async () => {
      this.characters[currentIndex].backgroundColor = backgroundInput.value;
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
    swapButton.onclick = async () => {
      this.characters[currentIndex].backgroundColor = colorInput.value;
      this.characters[currentIndex].color = backgroundInput.value;
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadPageSelector(snv, mainDiv) {
    const buttonsDiv = mainDiv.createDiv("hbox");
    const backButton = buttonsDiv.createEl("button", { text: "-" });
    const pageNumberInput = buttonsDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    buttonsDiv.createEl("p", { text: "/" + this.pages.length });
    const nextButton = buttonsDiv.createEl("button", { text: "+" });
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete Page" });
    deleteButton.className = "cfe-remove-button";
    const addButton = buttonsDiv.createEl("button", { text: "Add Page" });
    const editModeButton = buttonsDiv.createEl("button", { text: "Edit Mode" });
    const viewModeButton = buttonsDiv.createEl("button", { text: "View Mode" });
    const homeButton = buttonsDiv.createEl("button", { text: "Return to Story" });
    homeButton.onclick = async () => {
      await this.LoadStoryUI(snv, mainDiv);
    };
    editModeButton.onclick = async () => {
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    viewModeButton.onclick = async () => {
      await this.LoadCurrentPageDisplayOnly(snv, mainDiv);
    };
    backButton.onclick = async () => {
      if (this.currentPageIndex > 0) {
        this.currentPageIndex--;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    nextButton.onclick = async () => {
      if (this.currentPageIndex < this.pages.length) {
        this.currentPageIndex++;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    pageNumberInput.onchange = async () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    deleteButton.onclick = async () => {
      this.pages.splice(this.currentPageIndex, 1);
      await this.Save(snv);
      if (this.currentPageIndex !== 0) {
        this.currentPageIndex--;
      }
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    addButton.onclick = async () => {
      const defaultPage = new Page();
      const thisPageFileID = this.pages[this.currentPageIndex].mediaFileID;
      if (thisPageFileID !== -1 && thisPageFileID < snv.sourceFolder.fileCount) {
        defaultPage.mediaFileID = thisPageFileID;
      }
      this.pages.splice(this.currentPageIndex + 1, 0, defaultPage);
      await this.Save(snv);
      this.currentPageIndex++;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
  }
  async LoadCurrentPageEdit(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    mainDiv.createEl("p", { text: "Media File ID:" });
    const mediaFileIDInput = mainDiv.createEl("input", { type: "text" });
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    outerMediaDiv.style.position = "relative";
    const linesDiv = panelDiv.createDiv("vbox");
    const speakDiv = outerMediaDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const mediaWidthInput = outerMediaDiv.createEl("input", { type: "text" });
    mediaWidthInput.onchange = async () => {
      outerMediaDiv.style.width = mediaWidthInput.value + "%";
      linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      this.pages[this.currentPageIndex].mediaSizePercentage = parseInt(mediaWidthInput.value);
      await this.Save(snv);
    };
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    if (this.currentPageIndex < this.pages.length) {
      const currentPage = this.pages[this.currentPageIndex];
      const mediaFileID = currentPage.mediaFileID;
      mediaFileIDInput.value = "" + currentPage.mediaFileID;
      if (mediaFileID > 0) {
        const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
        await mediaFile.DisplayMediaOnly(mediaDiv, snv);
      }
      if (this.pages[this.currentPageIndex].mediaSizePercentage) {
        mediaWidthInput.value = "" + this.pages[this.currentPageIndex].mediaSizePercentage;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      } else {
        mediaWidthInput.value = "50";
        this.pages[this.currentPageIndex].mediaSizePercentage = 50;
        await this.Save(snv);
      }
    } else {
      const defaultPage = new Page();
      const lastPage = this.currentPageIndex - 1;
      if (lastPage >= 0 && this.currentPageIndex !== 0) {
        const lastPageFileID = this.pages[lastPage].mediaFileID;
        const lastPageSize = this.pages[lastPage].mediaSizePercentage;
        defaultPage.mediaSizePercentage = lastPageSize;
        mediaWidthInput.value = "" + lastPageSize;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
        if (lastPageFileID !== -1 && lastPageFileID < snv.sourceFolder.fileCount) {
          const mediaFileID = lastPageFileID + 1;
          defaultPage.mediaFileID = mediaFileID;
          mediaFileIDInput.value = "" + mediaFileID;
          if (mediaFileID > 0) {
            const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
            await mediaFile.DisplayMediaOnly(mediaDiv, snv);
          }
        }
      }
      this.pages.push(defaultPage);
      await this.Save(snv);
    }
    await this.LoadDialogueLinesEdit(snv, linesDiv, speakDiv, mainDiv);
    mediaFileIDInput.onchange = async () => {
      const currentPage = this.pages[this.currentPageIndex];
      currentPage.mediaFileID = parseInt(mediaFileIDInput.value);
      await this.Save(snv);
      const mediaFile = await CFEFileHandler.LoadFile(snv, currentPage.mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    };
  }
  async LoadCurrentPageDisplayOnly(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    outerMediaDiv.style.position = "relative";
    const linesDiv = panelDiv.createDiv("vbox");
    const speakDiv = outerMediaDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    const currentPage = this.pages[this.currentPageIndex];
    const mediaFileID = currentPage.mediaFileID;
    if (mediaFileID > 0) {
      const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    }
    if (this.pages[this.currentPageIndex].mediaSizePercentage) {
      const width = this.pages[this.currentPageIndex].mediaSizePercentage;
      outerMediaDiv.style.width = width + "%";
      linesDiv.style.width = 100 - width + "%";
    }
    await this.LoadDialogueLinesDisplayOnly(linesDiv, speakDiv, mainDiv);
  }
  async LoadDialogueLinesEdit(snv, linesDiv, speakDiv, cleanDiv) {
    linesDiv.empty();
    const existingLinesDiv = linesDiv.createDiv();
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentIndex = i;
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      const lineDiv = existingLinesDiv.createDiv();
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const deleteButton = lineDiv.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
        await this.Save(snv);
        await this.LoadDialogueLinesEdit(snv, linesDiv, speakDiv, cleanDiv);
      };
      if (this.doVertical) {
        this.MakeVertical(deleteButton);
      }
      const playButton = lineDiv.createEl("button", { text: "\u25B7" });
      playButton.onclick = () => {
        try {
          LanguageHandler.SpeakOrAnimate(cleanDiv, speakDiv, this.language, currentLine.content, 150, this.doVertical);
        } catch (e) {
          e.console.error();
        }
      };
      const charDropdownButton = lineDiv.createDiv();
      const charDropdownDiv = charDropdownButton.createDiv();
      charDropdownDiv.style.height = "fit-content";
      charDropdownDiv.style.width = "fit-content";
      charDropdownDiv.style.position = "relative";
      charDropdownButton.onclick = () => {
        const selectDiv = charDropdownDiv.createDiv();
        selectDiv.className = this.doVertical ? "hbox" : "vbox";
        selectDiv.style.position = "absolute";
        selectDiv.style.top = "0%";
        selectDiv.style.left = "0%";
        for (let i2 = 0; i2 < this.characters.length; i2++) {
          const currentCharIndex = i2;
          const currentChar = this.characters[currentCharIndex];
          const currentOption = selectDiv.createDiv();
          if (this.doVertical) {
            this.MakeVertical(currentOption);
          }
          if (this.language !== "Color Lang") {
            currentOption.style.backgroundColor = currentChar.backgroundColor;
            currentOption.style.color = currentChar.color;
          }
          currentOption.style.zIndex = "2";
          LanguageHandler.Display(speakDiv, currentOption, this.language, currentChar.name, this.fontSize, this.doVertical);
          currentOption.onclick = async () => {
            this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
            await this.Save(snv);
            this.LoadDialogueLinesEdit(snv, linesDiv, speakDiv, cleanDiv);
          };
        }
      };
      const nameEl = LanguageHandler.Display(speakDiv, charDropdownDiv, this.language, this.characters[currentLine.speakerIndex].name, this.fontSize, this.doVertical);
      if (this.language !== "Color Lang") {
        nameEl.style.backgroundColor = speaker.backgroundColor;
        nameEl.style.color = speaker.color;
      }
      const lineInput = this.DisplayLineEdit(cleanDiv, lineDiv, currentLine);
      if (this.doVertical) {
        lineInput.style.height = "100%";
      } else {
        lineInput.style.width = "100%";
      }
      lineInput.onchange = async () => {
        currentLine.content = lineInput.value;
        await this.Save(snv);
      };
    }
    const addButton = existingLinesDiv.createEl("button", { text: "+" });
    addButton.onclick = async () => {
      this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
      await this.Save(snv);
      await this.LoadDialogueLinesEdit(snv, linesDiv, speakDiv, cleanDiv);
    };
  }
  async LoadDialogueLinesDisplayOnly(linesDiv, speakDiv, cleanDiv) {
    linesDiv.empty();
    const existingLinesDiv = linesDiv.createDiv();
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      const playButton = existingLinesDiv.createEl("button", { text: "\u25B7" });
      const nameDiv = existingLinesDiv.createDiv("");
      const lineDiv = existingLinesDiv.createDiv("");
      const nameEl = LanguageHandler.Display(cleanDiv, nameDiv, this.language, speaker.name, this.fontSize, this.doVertical);
      if (this.language !== "Color Lang") {
        nameEl.style.backgroundColor = speaker.backgroundColor;
        nameEl.style.color = speaker.color;
      }
      const lineEl = LanguageHandler.Display(cleanDiv, lineDiv, this.language, currentLine.content, this.fontSize, this.doVertical);
      if (this.language !== "Color Lang") {
        lineEl.style.backgroundColor = speaker.backgroundColor;
        lineEl.style.color = speaker.color;
      }
      playButton.onclick = () => {
        try {
          LanguageHandler.SpeakOrAnimate(cleanDiv, speakDiv, this.language, currentLine.content, 150, this.doVertical);
        } catch (e) {
          e.console.error();
        }
      };
    }
  }
};
var Page = class {
  constructor() {
    this.mediaFileID = -1;
    this.lines = [];
    this.mediaSizePercentage = 50;
  }
};
var DialogueLine = class {
  constructor(speakerIndex) {
    this.speakerIndex = speakerIndex;
    this.content = "";
  }
};
var Character = class {
  constructor(name = "", color = "#FFFFFF", backgroundColor = "#000000") {
    this.name = name;
    this.color = color;
    this.backgroundColor = backgroundColor;
  }
};

// classes/cfe-file-handler.ts
var CFEFileHandler = class {
  static async CreateNew(snv, fileType, parentFolderID, name) {
    let newFile;
    switch (fileType) {
      case "Folder":
      default:
        newFile = await Folder.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Single Media File":
        newFile = await SingleMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Variant Media File":
        newFile = await VariantMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Playlist":
        newFile = await Playlist.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Story":
        newFile = await Story.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Source Folder Shortcut":
        newFile = await SourceFolderShortcut.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Conlang Dictionary":
        newFile = await ConlangDictionary.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
    }
    await newFile.Save(snv);
    return newFile;
  }
  static async LoadFile(snv, fileID) {
    const sourceFolder = snv.sourceFolder;
    const vault = snv.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/" + fileID + ".json");
    if (tFile === null) {
      throw Error("File could not be found at the path: " + sourceFolder.vaultPath + "/" + fileID + ".json");
    }
    const jsonData = await vault.cachedRead(tFile);
    const plainObject = JSON.parse(jsonData);
    switch (plainObject.fileType) {
      case "Folder":
      default:
        return Object.assign(new Folder(), plainObject);
      case "Single Media File":
        return Object.assign(new SingleMediaFile(), plainObject);
      case "Variant Media File":
        return Object.assign(new VariantMediaFile(), plainObject);
      case "Playlist":
        return Object.assign(new Playlist(), plainObject);
      case "Story":
        return Object.assign(new Story(), plainObject);
      case "Source Folder Shortcut":
        return Object.assign(new SourceFolderShortcut(), plainObject);
      case "Conlang Dictionary":
        return Object.assign(new ConlangDictionary(), plainObject);
    }
  }
};
/**
 * All of the known file formats
 */
CFEFileHandler.KnownFileTypes = [
  "Folder",
  "Single Media File",
  "Variant Media File",
  "Playlist",
  "Story",
  "Source Folder Shortcut",
  "Conlang Dictionary"
];

// classes/snv.ts
var SourceAndVault = class {
  constructor(sourceFolder, vault) {
    this.sourceFolder = sourceFolder;
    this.vault = vault;
  }
};

// classes/source-folder.ts
var SourceFolder = class {
  constructor() {
    this.vaultPath = "";
    this.fileCount = 0;
  }
  async Display(container, vault) {
    const snv = new SourceAndVault(this, vault);
    const notExists = vault.getFileByPath(snv.sourceFolder.vaultPath + "/0.json") === null;
    if (notExists) {
      await CFEFileHandler.CreateNew(snv, "Folder", 0, "Root Folder");
    }
    const rootFolder = await CFEFileHandler.LoadFile(snv, 0);
    await SourceFolder.Save(snv);
    await rootFolder.Save(snv);
    await rootFolder.Display(snv, container);
  }
  static async CreateOrLoadSourceFolder(vaultPath, vault) {
    vaultPath = vaultPath.endsWith("/source.json") ? vaultPath.slice(0, -12) : vaultPath;
    const exists = vault.getFileByPath(vaultPath + "/source.json") !== null;
    let newSourceFolder;
    if (exists) {
      newSourceFolder = await this.LoadExistingSource(vaultPath, vault);
    } else {
      newSourceFolder = await this.CreateNewSourceFolder(vaultPath, vault);
    }
    return newSourceFolder;
  }
  static async CreateNewSourceFolder(vaultPath, vault) {
    const newSourceFolder = new SourceFolder();
    newSourceFolder.vaultPath = vaultPath;
    newSourceFolder.fileCount = 0;
    try {
      await vault.createFolder(vaultPath);
    } finally {
      const sourcePath = (0, import_obsidian3.normalizePath)(vaultPath + "/source.json");
      await vault.adapter.write(sourcePath, "0");
    }
    return newSourceFolder;
  }
  static async LoadExistingSource(vaultPath, vault) {
    const sourceTFile = vault.getFileByPath(vaultPath + "/source.json");
    if (sourceTFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + vaultPath + "/source.json");
    }
    const jsonData = await vault.cachedRead(sourceTFile);
    const plainObject = await JSON.parse(jsonData);
    const newSourceFolder = Object.assign(new SourceFolder(), plainObject);
    newSourceFolder.vaultPath = vaultPath;
    await SourceFolder.Save(new SourceAndVault(newSourceFolder, vault));
    return newSourceFolder;
  }
  /**
   * Saves the new file count
   */
  static async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/source.json");
    if (tFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
    }
    const jsonData = JSON.stringify(sourceFolder);
    await vault.modify(tFile, jsonData);
  }
};

// classes/custom-explorer-view.ts
var VIEW_TYPE_CUSTOM_EXPLORER = "custom-explorer-view";
var CustomExplorerView = class extends import_obsidian4.ItemView {
  constructor(leaf, path) {
    super(leaf);
    this.defaultPath = path;
  }
  getViewType() {
    return VIEW_TYPE_CUSTOM_EXPLORER;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    const wrapper = this.containerEl.children[1];
    wrapper.empty();
    const mainContainer = wrapper.createDiv("cfe-main-display");
    const homePage = mainContainer.createDiv("cfe-home-page");
    homePage.createEl("h4", { text: "Path to Source Folder:" });
    const existingSourcePathInput = homePage.createEl("input", { type: "text", value: this.defaultPath });
    existingSourcePathInput.style.width = "100%";
    const submitButton = homePage.createEl("button", { text: "submit" });
    const vault = this.app.vault;
    submitButton.onclick = async () => {
      const path = existingSourcePathInput.value;
      const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
      await sf.Display(mainContainer, vault);
    };
    homePage.onkeydown = async (keyPressEvent) => {
      if (keyPressEvent.key === "Enter") {
        const path = existingSourcePathInput.value;
        const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
        await sf.Display(mainContainer, vault);
      }
    };
  }
  async onClose() {
  }
};

// main.ts
var import_obsidian5 = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultPath: "Source Folder"
};
var CFE = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CUSTOM_EXPLORER,
      (leaf) => new CustomExplorerView(leaf, this.settings.defaultPath)
    );
    this.addRibbonIcon("folder", "Activate view", () => {
      this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
    });
    this.addCommand({
      id: "open-cfe-view",
      name: "Open Custom File Explorer View",
      callback: () => {
        this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView(view_type) {
    const { workspace } = this.app;
    let leaf = null;
    leaf = workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian5.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    await leaf.setViewState({ type: view_type, active: true });
    workspace.revealLeaf(leaf);
  }
};
var SampleSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("Default Source Path").setDesc("The vault path to automatically fill in for the source path").addText((text) => text.setPlaceholder("Default Source Path").setValue(this.plugin.settings.defaultPath).onChange(async (value) => {
      this.plugin.settings.defaultPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
