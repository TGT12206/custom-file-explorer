/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CFE
});
module.exports = __toCommonJS(main_exports);

// classes/custom-explorer-view.ts
var import_obsidian4 = require("obsidian");

// classes/source-folder.ts
var import_obsidian3 = require("obsidian");

// classes/cfe-file.ts
var import_obsidian = require("obsidian");
var _CFEFile = class {
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.CreateNew() instead.
   * 
   * CHILD CLASSES SHOULD NOT WRITE TO A FILE. THIS IS DONE INSIDE OF CFEFileHandler
   * 
   * CFEFile layer:
   * 
   * sets the source, id, file type, file name, and parent folder id of the file object.
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const sourceFolder = snv.sourceFolder;
    const unfinishedFile = new _CFEFile();
    unfinishedFile.id = sourceFolder.fileCount;
    unfinishedFile.fileType = fileType;
    unfinishedFile.fileName = name;
    unfinishedFile.parentFolderID = parentFolderID;
    sourceFolder.fileCount++;
    await SourceFolder.Save(snv);
    if (unfinishedFile.id !== unfinishedFile.parentFolderID) {
      const parentFolder = await CFEFileHandler.LoadFile(snv, unfinishedFile.parentFolderID);
      parentFolder.containedFileIDs.push(unfinishedFile.id);
      await parentFolder.Save(snv);
    }
    return unfinishedFile;
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.DisplayThumbnail() instead.
   * 
   * CFEFile layer:
   * 
   * sets the thumbnail container's css class to 'cfe-thumbnail'
   * and fully displays the file if the thumbnail is clicked.
   */
  async DisplayThumbnail(sourceAndVault, thumbnailDiv, displayDiv) {
    thumbnailDiv.className = "cfe-thumbnail vbox";
    thumbnailDiv.onclick = async () => {
      await this.Display(sourceAndVault, displayDiv);
    };
    const idText = thumbnailDiv.createDiv("hbox");
    idText.textContent = "ID: " + this.id;
    idText.style.justifyContent = "center";
    const fileText = thumbnailDiv.createDiv("hbox");
    fileText.textContent = "File Type: " + this.fileType;
    fileText.style.justifyContent = "center";
    const nameText = thumbnailDiv.createDiv("hbox");
    nameText.textContent = "File Name: " + this.fileName;
    nameText.style.justifyContent = "center";
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.Display() instead.
   * 
   * CFEFile layer:
   * 
   * empties the display container provided.
   */
  async Display(snv, container) {
    container.empty();
    const headerContainer = container.createDiv("hbox");
    const backButton = headerContainer.createEl("button", { text: "Back to parent folder" });
    headerContainer.createEl("p", { text: "File ID: " + this.id });
    headerContainer.createEl("p", { text: "File Name: " });
    const nameInput = headerContainer.createEl("input", { type: "text", value: this.fileName });
    backButton.onclick = async () => {
      const parentFolder = await CFEFileHandler.LoadFile(snv, this.parentFolderID);
      if (parentFolder !== null) {
        await parentFolder.Display(snv, container);
      }
    };
    nameInput.onchange = async () => {
      this.fileName = nameInput.value;
      await this.Save(snv);
    };
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * (it is unlikely this method will ever be overriden by child classes, but making this 'inaccessible' is for consistency)
   * 
   * Use CFEFileHandler.SaveFile() instead.
   * 
   * Formatted File layer:
   * 
   * Deletes this file ID from the original parent folder, adds this file to the new parent folder, and changes the parent folder ID
   */
  async MoveFile(sourceAndVault, newParentFolderID) {
    const oldParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, this.parentFolderID);
    const indexOfFile = oldParentFolder.containedFileIDs.indexOf(this.id);
    oldParentFolder.containedFileIDs.splice(indexOfFile, 1);
    oldParentFolder.Save(sourceAndVault);
    const newParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, newParentFolderID);
    newParentFolder.containedFileIDs.push(this.id);
    newParentFolder.Save(sourceAndVault);
    this.parentFolderID = newParentFolderID;
    this.Save(sourceAndVault);
  }
  async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const filePath = sourceFolder.vaultPath + "/" + this.id + ".json";
    const jsonData = JSON.stringify(this);
    const tFile = vault.getFileByPath(filePath);
    if (tFile === null) {
      const normalizedPath = (0, import_obsidian.normalizePath)(filePath);
      await vault.adapter.write(normalizedPath, jsonData);
      return;
    }
    await vault.modify(tFile, jsonData);
  }
};
var CFEFile = _CFEFile;
CFEFile.FILE_NAME_INPUT_INDEX = 0;
CFEFile.PARENT_FOLDER_ID_INPUT_INDEX = 1;

// classes/single-media-file.ts
var import_obsidian2 = require("obsidian");

// classes/real-file.ts
var RealFile = class extends CFEFile {
  async DisplayMediaOnly(mediaDiv, snv) {
    mediaDiv.empty();
  }
};

// classes/single-media-file.ts
var SingleMediaFile = class extends RealFile {
  get mediaType() {
    switch (this.extensionName) {
      case "png":
      case "jpg":
      case "webp":
      case "heic":
      case "gif":
        return "Image";
      case "mp4":
      case "MP4":
      case "mov":
      case "MOV":
      default:
        return "Video";
    }
  }
  async getSrc(snv) {
    const mediaFile = await this.getTFile(snv);
    const arrayBuffer = await snv.vault.readBinary(mediaFile);
    const blob = new Blob([arrayBuffer]);
    const mediaUrl = URL.createObjectURL(blob);
    return mediaUrl;
  }
  async getTFile(snv) {
    const mediaPath = await this.getPath(snv);
    let mediaFile = snv.vault.getFileByPath(mediaPath);
    if (mediaFile === null) {
      mediaFile = snv.vault.getFileByPath(mediaPath + "." + this.extensionName);
      if (mediaFile === null) {
        throw Error("File not found at path: " + mediaPath + " or " + mediaPath + "." + this.extensionName);
      }
      snv.vault.rename(mediaFile, mediaPath);
    }
    return mediaFile;
  }
  async getPath(snv) {
    const sourceFolder = snv.sourceFolder;
    return sourceFolder.vaultPath + "/" + this.id + " Actual File";
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newMediaFile.extensionName = "";
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change file" });
    const newFileInput = imageDisplayContainer.createEl("input", { type: "file" });
    await this.DisplayMediaOnly(imageDisplayContainer, snv);
    newFileInput.onchange = async () => {
      try {
        const oldFile = await this.getTFile(snv);
        try {
          await snv.vault.delete(oldFile);
        } finally {
          await this.SaveNewFile(snv, newFileInput);
          this.Display(snv, container);
        }
      } catch (e) {
        console.log();
      }
    };
  }
  async SaveNewFile(snv, fileInput) {
    const fileArray = fileInput.files;
    if (fileArray === null) {
      throw Error("no file was selected");
    }
    const mediaFile = fileArray[0];
    await this.SetFileTo(snv, mediaFile);
  }
  async SetFileTo(snv, mediaFile) {
    const partsOfPath = mediaFile.name.split(".");
    const extension = partsOfPath[partsOfPath.length - 1];
    this.fileName = partsOfPath[0];
    this.extensionName = extension;
    const path = snv.sourceFolder.vaultPath + "/" + this.id + " Actual File";
    const normalizedPath = (0, import_obsidian2.normalizePath)(path);
    await snv.vault.adapter.writeBinary(normalizedPath, await mediaFile.arrayBuffer());
    await this.Save(snv);
  }
  async DisplayMediaOnly(mediaDiv, snv) {
    await super.DisplayMediaOnly(mediaDiv, snv);
    if (this.mediaType === "Image") {
      const imageElement = mediaDiv.createEl("img");
      imageElement.src = await this.getSrc(snv);
      imageElement.style.objectFit = "contain";
    } else {
      const videoElement = mediaDiv.createEl("video");
      videoElement.src = await this.getSrc(snv);
      videoElement.controls = true;
      videoElement.loop = true;
      videoElement.autoplay = true;
      videoElement.style.objectFit = "contain";
    }
  }
};

// classes/folder.ts
var Folder = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    unfinishedFolder.containedFileIDs = [];
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const createButtonsDiv = mainDiv.createDiv("hbox");
    const newFileButton = createButtonsDiv.createEl("button", { text: "Create New File" });
    newFileButton.onclick = () => {
      this.LoadCreateFileUI(snv, mainDiv);
    };
    const mediaFilesButton = createButtonsDiv.createEl("button", { text: "Upload Multiple Images / Videos" });
    mediaFilesButton.onclick = () => {
      this.LoadFileSelectionUI(snv, mainDiv);
    };
    const folderDisplayContainer = mainDiv.createDiv("cfe-grid");
    for (let i = 0; i < this.containedFileIDs.length; i++) {
      const containedFile = await CFEFileHandler.LoadFile(snv, this.containedFileIDs[i]);
      if (containedFile !== null) {
        await containedFile.DisplayThumbnail(snv, folderDisplayContainer.createDiv(), mainDiv);
      }
    }
  }
  LoadCreateFileUI(snv, mainDiv) {
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    const wrapperDiv = popUpContainer.createDiv();
    wrapperDiv.style.position = "relative";
    const exitButton = wrapperDiv.createEl("button", { text: "X", cls: "cfe-remove-button" });
    exitButton.style.position = "absolute";
    exitButton.style.top = "0%";
    exitButton.style.right = "0%";
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    popUpContainer.createEl("p", { text: "Choose a File Type to create:" });
    const fileTypeDropdown = popUpContainer.createEl("select");
    popUpContainer.createEl("p", { text: "File Name:" });
    const nameInput = popUpContainer.createEl("input", { type: "text", value: "Unnamed" });
    popUpContainer.createEl("p", { text: "Parent Folder ID:" });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    for (let i = 0; i < CFEFileHandler.KnownFileTypes.length; i++) {
      const option = fileTypeDropdown.createEl("option");
      option.value = CFEFileHandler.KnownFileTypes[i];
      option.text = CFEFileHandler.KnownFileTypes[i];
      fileTypeDropdown.options.add(option);
    }
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      await CFEFileHandler.CreateNew(snv, fileTypeDropdown.value, parseInt(parentFolderIDInput.value), nameInput.value);
      exitButton.click();
      const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
      await resettedFolder.Display(snv, mainDiv);
    };
  }
  LoadFileSelectionUI(snv, mainDiv) {
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    popUpContainer.createEl("p", { text: "Choose your files" });
    const fileInput = popUpContainer.createEl("input", { type: "file" });
    fileInput.multiple = true;
    popUpContainer.createEl("p", { text: "Parent Folder ID: " });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    const exitButton = popUpContainer.createEl("button", { text: "X", cls: "cfe-exit-button" });
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      const fileArray = fileInput.files;
      const parentFolderID = parseInt(parentFolderIDInput.value);
      if (fileArray !== null) {
        for (let i = 0; i < fileArray.length; i++) {
          const cfeFile = await CFEFileHandler.CreateNew(snv, "Single Media File", parentFolderID, fileArray[i].name);
          const mediaFile = Object.assign(new SingleMediaFile(), cfeFile);
          await mediaFile.SetFileTo(snv, fileArray[i]);
          await mediaFile.Save(snv);
        }
        exitButton.click();
        const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
        await resettedFolder.Display(snv, mainDiv);
      }
    };
  }
};

// classes/playlist.ts
var Playlist = class extends CFEFile {
  static getNextVideoIDInOrder(playlist) {
    let nextVideoIndex = playlist.currentVideoIndex + 1;
    if (nextVideoIndex >= playlist.videoIDs.length) {
      nextVideoIndex = 0;
    }
    return nextVideoIndex;
  }
  static getNextVideoIDShuffled(playlist) {
    let nextVideoIndex = Math.random() * playlist.videoIDs.length;
    nextVideoIndex = Math.floor(nextVideoIndex);
    return nextVideoIndex;
  }
  static async loadNextVideo(sourceAndVault, playlist, videoElement) {
    if (playlist.videoOrder === "shuffled") {
      playlist.currentVideoIndex = Playlist.getNextVideoIDShuffled(playlist);
    } else {
      playlist.currentVideoIndex = Playlist.getNextVideoIDInOrder(playlist);
    }
    const nextVideo = await CFEFileHandler.LoadFile(sourceAndVault, playlist.videoIDs[playlist.currentVideoIndex]);
    videoElement.src = await nextVideo.getSrc(sourceAndVault);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newPlaylistFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newPlaylistFile.videoIDs = [];
    return newPlaylistFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    this.currentVideoIndex = 0;
    const videoDisplayContainer = container.createDiv("cfe-display-video");
    const videoElement = videoDisplayContainer.createEl("video");
    const buttonsContainer = container.createDiv("hbox");
    const hideButton = buttonsContainer.createEl("button", { text: "hide video" });
    hideButton.onclick = () => {
      if (hideButton.textContent === "hide video") {
        hideButton.textContent = "show video";
        videoElement.style.display = "none";
      } else {
        hideButton.textContent = "hide video";
        videoElement.style.display = "flex";
      }
    };
    const shuffleButton = buttonsContainer.createEl("button", { text: "shuffle" });
    this.videoOrder = "in order";
    shuffleButton.onclick = () => {
      if (shuffleButton.textContent === "shuffle") {
        shuffleButton.textContent = "go in order";
        this.videoOrder = "shuffled";
      } else {
        shuffleButton.textContent = "shuffle";
        this.videoOrder = "in order";
      }
    };
    const nextButton = buttonsContainer.createEl("button", { text: "next video" });
    nextButton.onclick = async () => {
      await Playlist.loadNextVideo(snv, this, videoElement);
    };
    try {
      const firstVideo = await CFEFileHandler.LoadFile(snv, this.videoIDs[this.currentVideoIndex]);
      videoElement.src = await firstVideo.getSrc(snv);
      videoElement.autoplay = true;
      videoElement.controls = true;
      videoElement.ontimeupdate = async () => {
        if (videoElement.ended) {
          await Playlist.loadNextVideo(snv, this, videoElement);
        }
      };
    } finally {
      container.createEl("p", { text: "Change files" });
      let count = 0;
      const mediaIDInputDiv = container.createDiv("vbox");
      const newFileButton = container.createEl("button", { text: "Add File" });
      for (let i = 0; i < this.videoIDs.length; i++) {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.videoIDs[currentIndex] });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      }
      newFileButton.onclick = () => {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text" });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      };
    }
  }
};

// classes/variant-media-file.ts
var VariantMediaFile = class extends RealFile {
  async getSrc(snv, index = null) {
    if (index === null) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    return await containedMedia.getSrc(snv);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newMediaFile.variantIDs = [];
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change files" });
    const mediaIDInputDiv = imageDisplayContainer.createDiv("vbox");
    const newFileButton = imageDisplayContainer.createEl("button", { text: "Add File" });
    for (let i = 0; i < this.variantIDs.length; i++) {
      const currentIndex = i;
      const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
      const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.variantIDs[currentIndex] });
      const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        mediaIDDiv.remove();
        this.variantIDs.splice(currentIndex, 1);
        await this.Save(snv);
        await this.Display(snv, container);
      };
      idInput.onchange = async () => {
        this.variantIDs[currentIndex] = parseInt(idInput.value);
        await this.Save(snv);
        await this.Display(snv, container);
      };
    }
    newFileButton.onclick = async () => {
      this.variantIDs.push(-1);
      await this.Save(snv);
      await this.Display(snv, container);
    };
    const mediaDiv = imageDisplayContainer.createDiv("vbox");
    await this.DisplayMediaOnly(mediaDiv, snv);
  }
  async DisplayMediaOnly(mediaDiv, snv, index = -1) {
    if (index === -1) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    await containedMedia.DisplayMediaOnly(mediaDiv, snv);
  }
};

// classes/source-folder-shortcut.ts
var SourceFolderShortcut = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    unfinishedFolder.pathToOtherSource = "";
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const inputDiv = mainDiv.createDiv("vbox");
    inputDiv.createEl("p", { text: "Path to Other Source Folder" });
    const pathInput = inputDiv.createEl("input", { type: "text" });
    const goButton = inputDiv.createEl("button", { text: "Go" });
    pathInput.onchange = async () => {
      this.pathToOtherSource = pathInput.value;
      await this.Save(snv);
    };
    goButton.onclick = async () => {
      const otherSource = await SourceFolder.CreateOrLoadSourceFolder(this.pathToOtherSource, snv.vault);
      otherSource.Display(mainDiv, snv.vault);
    };
  }
};

// classes/conlangs/hwayu-text.ts
var Hwayu = class {
  static Display(div, text = "", fontSize = 20, isVertical = true) {
    const textElement = div.createEl("p", { text });
    textElement.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textElement.style.fontSize = fontSize + "px";
    if (isVertical) {
      textElement.style.writingMode = "vertical-lr";
      textElement.style.textOrientation = "upright";
    }
    return textElement;
  }
  static CreateTextArea(div, existingText = "", fontSize = 20, isVertical = true) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textArea.style.fontSize = fontSize + "px";
    if (isVertical) {
      textArea.style.writingMode = "vertical-lr";
      textArea.style.textOrientation = "upright";
    }
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 20, isVertical = true) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textInput.style.fontSize = fontSize + "px";
    if (isVertical) {
      textInput.style.writingMode = "vertical-lr";
      textInput.style.textOrientation = "upright";
    }
    textInput.spellcheck = false;
    return textInput;
  }
};

// classes/conlangs/photolang-text.ts
var PhotoLang = class {
  static Display(div, text = "", fontSize = 10, moveSpeeds = null, durations = null, doLoop = false) {
    const line = new PhotoLine(text);
    if (!moveSpeeds) {
      moveSpeeds = [100, 250, 500];
    }
    if (!durations) {
      durations = [0, 500];
    }
    const displayDiv = div.createDiv();
    line.Speak(displayDiv, fontSize, moveSpeeds, durations, doLoop);
    return displayDiv;
  }
  static CreateTextArea(div, existingText = "", fontSize = 17.5) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontSize = fontSize + "px";
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 17.5) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontSize = fontSize + "px";
    textInput.spellcheck = false;
    return textInput;
  }
};
var PhotoLine = class {
  constructor(textContent = "") {
    this.glyphs = [];
    const textArray = textContent.split("   ").filter((c) => c !== "");
    let doSpace = false;
    for (let i = 0; i < textArray.length; i++) {
      const newGlyph = new PhotoGlyph();
      const glyphText = textArray[i];
      if (glyphText === "|||") {
        newGlyph.hue = 0;
        newGlyph.saturation = 0;
        newGlyph.value = 0;
        newGlyph.opacity = 0;
        newGlyph.moveSpeed = 0;
        newGlyph.duration = 0;
        newGlyph.x = this.glyphs[this.glyphs.length - 1].x;
        newGlyph.y = this.glyphs[this.glyphs.length - 1].y;
        doSpace = true;
      } else {
        let j = 0;
        let skipNext = false;
        switch (glyphText[j]) {
          case ".":
            newGlyph.moveSpeed = 0;
            break;
          case "-":
            newGlyph.moveSpeed = 1;
            break;
          case "=":
            newGlyph.moveSpeed = 2;
            break;
        }
        j++;
        switch (glyphText[j]) {
          case ".":
            newGlyph.duration = 0;
            break;
          case "-":
            newGlyph.duration = 1;
            break;
        }
        j++;
        newGlyph.shape = glyphText[j];
        j++;
        let hue1 = 0;
        switch (glyphText[j]) {
          case "r":
            hue1 = 0;
            break;
          case "o":
            hue1 = 40;
            break;
          case "y":
            hue1 = 60;
            break;
          case "g":
            hue1 = 120;
            break;
          case "c":
            hue1 = 180;
            break;
          case "b":
            hue1 = 240;
            break;
          case "p":
            hue1 = 270;
            break;
          case ".":
            newGlyph.hue = 0;
            newGlyph.saturation = 0;
            skipNext = true;
            break;
        }
        j++;
        if (!skipNext) {
          let hue2 = 0;
          switch (glyphText[j]) {
            case "r":
              hue2 = 0;
              break;
            case "o":
              hue2 = 40;
              break;
            case "y":
              hue2 = 60;
              break;
            case "g":
              hue2 = 120;
              break;
            case "c":
              hue2 = 180;
              break;
            case "b":
              hue2 = 240;
              break;
            case "p":
              hue2 = 270;
              break;
            default:
              newGlyph.hue = hue1;
              skipNext = true;
              break;
          }
          if (!skipNext) {
            if (hue1 === 0 && hue2 === 270 || hue1 === 270 && hue2 === 0) {
              newGlyph.hue = 315;
            } else {
              newGlyph.hue = (hue1 + hue2) / 2;
            }
            j++;
          }
        }
        skipNext = false;
        const saturationText = glyphText[j];
        switch (saturationText) {
          case "0":
            newGlyph.saturation = 0;
            break;
          case "1":
            newGlyph.saturation = 0.25;
            break;
          case "2":
            newGlyph.saturation = 0.5;
            break;
          case "3":
            newGlyph.saturation = 0.75;
            break;
          case "4":
            newGlyph.saturation = 1;
            break;
        }
        j++;
        const valueText = glyphText[j];
        switch (valueText) {
          case "0":
            newGlyph.value = 0;
            break;
          case "1":
            newGlyph.value = 0.1;
            break;
          case "2":
            newGlyph.value = 0.2;
            break;
          case "3":
            newGlyph.value = 0.5;
            break;
          case "4":
            newGlyph.value = 1;
            break;
        }
        j++;
        const opacityText = glyphText[j];
        switch (opacityText) {
          case ".":
            newGlyph.opacity = 0;
            break;
          case "-":
            newGlyph.opacity = 0.5;
            break;
          case "=":
            newGlyph.opacity = 1;
            break;
        }
        j++;
        const locationInfo = glyphText.substring(j);
        if (locationInfo.contains("<")) {
          newGlyph.x = 0;
        } else if (locationInfo.contains(">")) {
          newGlyph.x = 2;
        } else {
          newGlyph.x = 1;
        }
        if (locationInfo.contains("v")) {
          newGlyph.y = 0;
        } else if (locationInfo.contains("^")) {
          newGlyph.y = 2;
        } else {
          newGlyph.y = 1;
        }
        if (doSpace) {
          const emptyGlyph = new PhotoGlyph();
          emptyGlyph.hue = 0;
          emptyGlyph.saturation = 0;
          emptyGlyph.value = 0;
          emptyGlyph.opacity = 0;
          emptyGlyph.moveSpeed = 0;
          emptyGlyph.duration = 0;
          emptyGlyph.x = newGlyph.x;
          emptyGlyph.y = newGlyph.y;
          doSpace = false;
          this.glyphs.push(emptyGlyph);
        }
      }
      this.glyphs.push(newGlyph);
    }
    if (doSpace) {
      const emptyGlyph = new PhotoGlyph();
      emptyGlyph.hue = 0;
      emptyGlyph.saturation = 0;
      emptyGlyph.value = 0;
      emptyGlyph.opacity = 0;
      emptyGlyph.moveSpeed = 0;
      emptyGlyph.duration = 0;
      emptyGlyph.x = this.glyphs[0].x;
      emptyGlyph.y = this.glyphs[0].y;
      doSpace = false;
      this.glyphs.push(emptyGlyph);
    }
  }
  async Speak(div, textSize, moveSpeeds, durations, doLoop = false) {
    div.style.fontSize = textSize + "px";
    div.style.fontFamily = "Photolang";
    div.style.position = "relative";
    div.style.height = textSize * 3.25 + "px";
    div.style.width = textSize * 3.25 + "px";
    const textDiv = div.createDiv();
    textDiv.style.position = "absolute";
    textDiv.style.bottom = textSize + "px";
    textDiv.style.transitionProperty = "bottom, left, color";
    for (let i = 0; i < this.glyphs.length; i++) {
      const photoGlyph = this.glyphs[i];
      textDiv.textContent = photoGlyph.shape;
      textDiv.style.left = photoGlyph.x * textSize + "px";
      textDiv.style.bottom = photoGlyph.y * textSize + "px";
      textDiv.style.color = photoGlyph.color;
      if (doLoop && i === this.glyphs.length - 1) {
        i = -1;
      }
      textDiv.style.transition = moveSpeeds[photoGlyph.moveSpeed] + "ms";
      await sleep(moveSpeeds[photoGlyph.moveSpeed] + durations[photoGlyph.duration]);
    }
    div.remove();
  }
  async DisplayStatic(div, textSize) {
    const lineDiv = div.createDiv("hbox");
    lineDiv.style.gap = "" + textSize * 3.25 + "px)";
    for (let i = 0; i < this.glyphs.length; i++) {
      this.glyphs[i] = Object.assign(new PhotoGlyph(), this.glyphs[i]);
      this.glyphs[i].DisplayStatic(lineDiv.createDiv(), textSize);
    }
  }
};
var PhotoGlyph = class {
  get color() {
    let lightness = (2 - this.saturation) * this.value / 2;
    let newS = this.saturation * this.value / (lightness < 1 ? lightness * 2 : 2 - lightness * 2);
    if (lightness === 0 || lightness === 1) {
      newS = 0;
    }
    lightness *= 100;
    newS *= 100;
    return "hsla(" + this.hue + "," + newS + "%," + lightness + "%," + this.opacity + ")";
  }
  DisplayStatic(div, textSize) {
    const outerDiv = div.createDiv();
    outerDiv.style.position = "relative";
    outerDiv.style.width = textSize * 3.25 + "px";
    outerDiv.style.height = textSize * 3.25 + "px";
    outerDiv.className = "cfe-photoglyph";
    const glyphDiv = outerDiv.createDiv();
    glyphDiv.style.position = "absolute";
    glyphDiv.textContent = this.shape;
    glyphDiv.style.left = this.x * textSize + "px";
    glyphDiv.style.bottom = this.y * textSize + "px";
    glyphDiv.style.color = this.color;
  }
};

// classes/conlang-dictionary.ts
var ConlangDictionary = class extends CFEFile {
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const unfinishedDictionary = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    unfinishedDictionary.language = "Hwayu";
    unfinishedDictionary.words = [];
    unfinishedDictionary.searchTerm = "";
    unfinishedDictionary.searchInConlang = false;
    return unfinishedDictionary;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const languageDropdown = mainDiv.createEl("select");
    languageDropdown.createEl("option", { text: "Hwayu", value: "Hwayu" });
    languageDropdown.createEl("option", { text: "Photolang", value: "Photolang" });
    languageDropdown.value = this.language;
    const addWordDiv = mainDiv.createDiv("vbox");
    await this.CreateNewWordEditor(snv, mainDiv, addWordDiv);
    languageDropdown.onchange = async () => {
      this.language = languageDropdown.value;
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    await this.DisplayList(snv, mainDiv);
  }
  async DisplayWord(snv, mainDiv, div, index) {
    div.empty();
    const modeButton = div.createEl("button", { text: "Edit" });
    modeButton.style.top = "0";
    modeButton.style.right = "0";
    modeButton.onclick = async () => {
      await this.EditWord(snv, mainDiv, div, index);
    };
    const wordDiv = div.createDiv("hbox");
    wordDiv.style.gap = "1%";
    wordDiv.style.fontSize = "25px";
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const conlangWordDiv = this.DisplayConlangText(wordDiv, conlangWord);
    conlangWordDiv.classList.add("cfe-pointer-hover");
    wordDiv.createEl("p", { text: ":" });
    wordDiv.createEl("p", { text: definition });
    conlangWordDiv.onclick = async () => {
      try {
        await navigator.clipboard.writeText(conlangWord);
      } catch (err) {
        console.error("Failed to copy text: ", err);
      }
    };
  }
  async EditWord(snv, mainDiv, div, index) {
    div.empty();
    const buttonsDiv = div.createDiv("hbox");
    const modeButton = buttonsDiv.createEl("button", { text: "View" });
    modeButton.onclick = async () => {
      await this.DisplayWord(snv, mainDiv, div, index);
    };
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete" });
    deleteButton.classList = "cfe-remove-button";
    deleteButton.onclick = async () => {
      this.words.splice(index, 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    const wordDiv = div.createDiv("vbox");
    wordDiv.style.fontSize = "25px";
    wordDiv.createEl("p", { text: "Word in " + this.language });
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const newWordInput = this.DisplayConlangEditor(wordDiv, conlangWord);
    wordDiv.createEl("p", { text: "Definition" });
    const definitionInput = wordDiv.createEl("input", { type: "text", value: definition });
    definitionInput.style.fontSize = "25px";
    const onSubmit = async () => {
      this.words[index] = [newWordInput.value, definitionInput.value];
      this.ReSort(index);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  CreateNewWordEditor(snv, mainDiv, div) {
    div.createEl("p", { text: "Add New Word:" });
    div.createEl("p", { text: "Word in " + this.language });
    const newWordInput = this.DisplayConlangEditor(div);
    div.createEl("p", { text: "Definition" });
    const definitionInput = div.createEl("input", { type: "text", value: "" });
    const submitButton = div.createEl("button", { text: "submit" });
    const onSubmit = async () => {
      this.words.push([newWordInput.value, definitionInput.value]);
      this.ReSort(this.words.length - 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    submitButton.onclick = onSubmit;
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  DisplayConlangEditor(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.CreateTextInput(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, 25);
    }
  }
  DisplayConlangText(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.Display(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, 25, null, null, true);
    }
  }
  async DisplayList(snv, div) {
    div.createEl("p", { text: "Search in " + this.language + "?" });
    const checkbox = div.createEl("input", { type: "checkbox" });
    checkbox.checked = this.searchInConlang;
    div.createEl("p", { text: "Search term" });
    const conlangSearch = this.DisplayConlangEditor(div, this.searchTerm);
    const englishSearch = div.createEl("input", { type: "text", value: this.searchTerm });
    let prevElement = checkbox.checked ? englishSearch : conlangSearch;
    let currentElement = checkbox.checked ? conlangSearch : englishSearch;
    prevElement.style.width = "100%";
    currentElement.style.width = "100%";
    this.searchTerm = prevElement.value;
    prevElement.style.display = "none";
    currentElement.value = this.searchTerm;
    currentElement.style.display = "";
    const resultsDiv = div.createDiv("cfe-dictionary-grid");
    const refreshResults = () => {
      this.searchTerm = currentElement.value;
      this.searchInConlang = checkbox.checked;
      resultsDiv.empty();
      for (let i = 0; i < this.words.length; i++) {
        if (this.words[i][checkbox.checked ? 0 : 1].contains(currentElement.value)) {
          const wordDiv = resultsDiv.createDiv("cfe-dictionary-word");
          this.DisplayWord(snv, div, wordDiv, i);
        }
      }
    };
    refreshResults();
    conlangSearch.oninput = refreshResults;
    englishSearch.oninput = refreshResults;
    checkbox.onchange = () => {
      resultsDiv.empty();
      prevElement = checkbox.checked ? englishSearch : conlangSearch;
      currentElement = checkbox.checked ? conlangSearch : englishSearch;
      this.searchTerm = prevElement.value;
      prevElement.style.display = "none";
      currentElement.value = this.searchTerm;
      currentElement.style.display = "";
      refreshResults();
    };
  }
  ReSort(indexOfChangedWord) {
    const changedWord = this.words.splice(indexOfChangedWord, 1)[0];
    let i = 0;
    let left = 0;
    let right = this.words.length - 1;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (this.words[mid][0] < changedWord[0]) {
        left = mid + 1;
        i = left;
      } else {
        right = mid - 1;
        i = mid;
      }
    }
    this.words.splice(i, 0, changedWord);
  }
};

// classes/story.ts
var _Story = class extends CFEFile {
  MakeVertical(el) {
    el.style.writingMode = "vertical-lr";
    el.style.textOrientation = "upright";
  }
  CreateTextInput(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextInput(div, existingWord, 25, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, 25);
      default:
        input = div.createEl("input", { type: "text", value: existingWord });
        input.style.fontSize = "25px";
        return input;
    }
  }
  DisplayLineEdit(div, line) {
    const input = this.CreateTextArea(div, line.content);
    if (this.language !== "Photolang") {
      const speaker = this.characters[line.speakerIndex];
      input.style.backgroundColor = speaker.backgroundColor;
      input.style.color = speaker.color;
    }
    if (this.doVertical) {
      this.MakeVertical(input);
    }
    return input;
  }
  CreateTextArea(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextArea(div, existingWord, 25, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextArea(div, existingWord, 25);
      default:
        input = div.createEl("textarea", { text: existingWord });
        input.style.fontSize = "25px";
        return input;
    }
  }
  DisplayText(div, fontSize = 25, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
        return Hwayu.Display(div, existingWord, fontSize, this.doVertical);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, fontSize, null, null, true);
      default:
        return div.createEl("p", { text: existingWord });
    }
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID, name) {
    const newStoryFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
    newStoryFile.currentPageIndex = 0;
    newStoryFile.pages = [];
    newStoryFile.characters = [];
    newStoryFile.language = "English";
    newStoryFile.doVertical = false;
    return newStoryFile;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    this.LoadStoryUI(snv, mainDiv.createDiv("vbox"));
  }
  LoadStoryUI(snv, mainDiv) {
    mainDiv.empty();
    mainDiv.createEl("p", { text: "Go to page number:" });
    const pageSelectDiv = mainDiv.createDiv("hbox");
    const pageNumberInput = pageSelectDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    pageSelectDiv.createEl("p", { text: "/" + this.pages.length });
    const goButton = pageSelectDiv.createEl("button", { text: "Go" });
    goButton.onclick = () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      this.LoadCurrentPageEdit(snv, mainDiv);
    };
    const languageInput = mainDiv.createEl("select");
    for (let i = 0; i < _Story.knownLanguages.length; i++) {
      languageInput.createEl("option", { text: _Story.knownLanguages[i], value: _Story.knownLanguages[i] });
    }
    languageInput.value = this.language;
    languageInput.onchange = async () => {
      this.language = languageInput.value;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Vertical Text" });
    const doVerticalBox = mainDiv.createEl("input", { type: "checkbox" });
    doVerticalBox.checked = this.doVertical;
    doVerticalBox.onclick = async () => {
      this.doVertical = doVerticalBox.checked;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    this.LoadCharacterEditorUI(snv, mainDiv);
  }
  LoadCharacterEditorUI(snv, div) {
    const charEditorDiv = div.createDiv();
    charEditorDiv.className = this.doVertical ? "hbox" : "vbox";
    for (let i = 0; i < this.characters.length; i++) {
      const currentIndex = i;
      const charDiv = charEditorDiv.createDiv();
      charDiv.className = this.doVertical ? "vbox" : "hbox";
      charDiv.createEl("p", { text: "Name: " });
      const nameInput = this.CreateTextInput(charDiv, this.characters[currentIndex].name);
      if (this.language !== "Photolang") {
        nameInput.style.backgroundColor = this.characters[currentIndex].backgroundColor;
        nameInput.style.color = this.characters[currentIndex].color;
      }
      nameInput.onchange = async () => {
        this.characters[currentIndex].name = nameInput.value;
        await this.Save(snv);
        this.LoadStoryUI(snv, div);
      };
      if (this.doVertical) {
        nameInput.style.height = "fit-content";
      } else {
        nameInput.style.width = "fit-content";
      }
      if (this.language !== "Photolang") {
        this.LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex);
      } else {
        this.DisplayText(charDiv, 25, this.characters[currentIndex].name);
      }
    }
    const addCharButton = charEditorDiv.createEl("button", { text: "Add Character" });
    addCharButton.onclick = async () => {
      this.characters.push(new Character());
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex) {
    const colorDiv = charEditorDiv.createDiv();
    colorDiv.className = this.doVertical ? "vbox" : "hbox";
    colorDiv.createEl("p", { text: "Text Color:" });
    const colorInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].color });
    colorDiv.createEl("p", { text: "Background Color:" });
    const backgroundInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].backgroundColor });
    const swapButton = colorDiv.createEl("button", { text: "Swap" });
    colorInput.onchange = async () => {
      this.characters[currentIndex].color = colorInput.value;
      await this.Save(snv);
    };
    backgroundInput.onchange = async () => {
      this.characters[currentIndex].backgroundColor = backgroundInput.value;
      await this.Save(snv);
    };
    swapButton.onclick = async () => {
      this.characters[currentIndex].backgroundColor = colorInput.value;
      this.characters[currentIndex].color = backgroundInput.value;
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadPageSelector(snv, mainDiv) {
    const buttonsDiv = mainDiv.createDiv("hbox");
    const backButton = buttonsDiv.createEl("button", { text: "-" });
    const pageNumberInput = buttonsDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    buttonsDiv.createEl("p", { text: "/" + this.pages.length });
    const nextButton = buttonsDiv.createEl("button", { text: "+" });
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete Page" });
    deleteButton.className = "cfe-remove-button";
    const addButton = buttonsDiv.createEl("button", { text: "Add Page" });
    const editModeButton = buttonsDiv.createEl("button", { text: "Edit Mode" });
    const viewModeButton = buttonsDiv.createEl("button", { text: "View Mode" });
    const homeButton = buttonsDiv.createEl("button", { text: "Return to Story" });
    homeButton.onclick = async () => {
      await this.LoadStoryUI(snv, mainDiv);
    };
    editModeButton.onclick = async () => {
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    viewModeButton.onclick = async () => {
      await this.LoadCurrentPageDisplayOnly(snv, mainDiv);
    };
    backButton.onclick = async () => {
      if (this.currentPageIndex > 0) {
        this.currentPageIndex--;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    nextButton.onclick = async () => {
      if (this.currentPageIndex < this.pages.length) {
        this.currentPageIndex++;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    pageNumberInput.onchange = async () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    deleteButton.onclick = async () => {
      this.pages.splice(this.currentPageIndex, 1);
      await this.Save(snv);
      if (this.currentPageIndex !== 0) {
        this.currentPageIndex--;
      }
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    addButton.onclick = async () => {
      const defaultPage = new Page();
      const thisPageFileID = this.pages[this.currentPageIndex].mediaFileID;
      if (thisPageFileID !== -1 && thisPageFileID < snv.sourceFolder.fileCount) {
        defaultPage.mediaFileID = thisPageFileID;
      }
      this.pages.splice(this.currentPageIndex + 1, 0, defaultPage);
      await this.Save(snv);
      this.currentPageIndex++;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
  }
  async LoadCurrentPageEdit(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    mainDiv.createEl("p", { text: "Media File ID:" });
    const mediaFileIDInput = mainDiv.createEl("input", { type: "text" });
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaWidthInput = outerMediaDiv.createEl("input", { type: "text" });
    mediaWidthInput.onchange = async () => {
      outerMediaDiv.style.width = mediaWidthInput.value + "%";
      linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      this.pages[this.currentPageIndex].mediaSizePercentage = parseInt(mediaWidthInput.value);
      await this.Save(snv);
    };
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    if (this.currentPageIndex < this.pages.length) {
      const currentPage = this.pages[this.currentPageIndex];
      const mediaFileID = currentPage.mediaFileID;
      mediaFileIDInput.value = "" + currentPage.mediaFileID;
      if (mediaFileID > 0) {
        const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
        await mediaFile.DisplayMediaOnly(mediaDiv, snv);
      }
      if (this.pages[this.currentPageIndex].mediaSizePercentage) {
        mediaWidthInput.value = "" + this.pages[this.currentPageIndex].mediaSizePercentage;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      } else {
        mediaWidthInput.value = "50";
        this.pages[this.currentPageIndex].mediaSizePercentage = 50;
        await this.Save(snv);
      }
    } else {
      const defaultPage = new Page();
      const lastPage = this.currentPageIndex - 1;
      if (lastPage >= 0 && this.currentPageIndex !== 0) {
        const lastPageFileID = this.pages[lastPage].mediaFileID;
        const lastPageSize = this.pages[lastPage].mediaSizePercentage;
        defaultPage.mediaSizePercentage = lastPageSize;
        mediaWidthInput.value = "" + lastPageSize;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
        if (lastPageFileID !== -1 && lastPageFileID < snv.sourceFolder.fileCount) {
          const mediaFileID = lastPageFileID + 1;
          defaultPage.mediaFileID = mediaFileID;
          mediaFileIDInput.value = "" + mediaFileID;
          if (mediaFileID > 0) {
            const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
            await mediaFile.DisplayMediaOnly(mediaDiv, snv);
          }
        }
      }
      this.pages.push(defaultPage);
      await this.Save(snv);
    }
    await this.LoadDialogueLinesEdit(snv, linesDiv);
    mediaFileIDInput.onchange = async () => {
      const currentPage = this.pages[this.currentPageIndex];
      currentPage.mediaFileID = parseInt(mediaFileIDInput.value);
      await this.Save(snv);
      const mediaFile = await CFEFileHandler.LoadFile(snv, currentPage.mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    };
  }
  async LoadCurrentPageDisplayOnly(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    const currentPage = this.pages[this.currentPageIndex];
    const mediaFileID = currentPage.mediaFileID;
    if (mediaFileID > 0) {
      const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    }
    if (this.pages[this.currentPageIndex].mediaSizePercentage) {
      const width = this.pages[this.currentPageIndex].mediaSizePercentage;
      outerMediaDiv.style.width = width + "%";
      linesDiv.style.width = 100 - width + "%";
    }
    await this.LoadDialogueLinesDisplayOnly(linesDiv);
  }
  async LoadDialogueLinesEdit(snv, linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv();
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentIndex = i;
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      const lineDiv = existingLinesDiv.createDiv();
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const deleteButton = lineDiv.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
        await this.Save(snv);
        await this.LoadDialogueLinesEdit(snv, linesDiv);
      };
      if (this.doVertical) {
        this.MakeVertical(deleteButton);
      }
      const indexTextEl = this.DisplayText(lineDiv, 25, "" + currentIndex);
      if (this.doVertical) {
        this.MakeVertical(indexTextEl);
      }
      if (this.language === "Photolang") {
        const playButton = lineDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(lineInput.value);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
        if (this.doVertical) {
          this.MakeVertical(playButton);
        }
      }
      const charDropdownButton = lineDiv.createDiv();
      const charDropdownDiv = charDropdownButton.createDiv();
      charDropdownDiv.style.height = "fit-content";
      charDropdownDiv.style.width = "fit-content";
      charDropdownDiv.style.position = "relative";
      charDropdownButton.onclick = () => {
        const selectDiv = charDropdownDiv.createDiv();
        selectDiv.className = this.doVertical ? "hbox" : "vbox";
        selectDiv.style.position = "absolute";
        selectDiv.style.top = "0%";
        selectDiv.style.left = "0%";
        for (let i2 = 0; i2 < this.characters.length; i2++) {
          const currentCharIndex = i2;
          const currentChar = this.characters[currentCharIndex];
          const currentOption = selectDiv.createDiv();
          if (this.doVertical) {
            this.MakeVertical(currentOption);
          }
          if (this.language !== "Photolang") {
            currentOption.style.backgroundColor = currentChar.backgroundColor;
            currentOption.style.color = currentChar.color;
          }
          currentOption.style.zIndex = "2";
          this.DisplayText(currentOption, 25, currentChar.name);
          currentOption.onclick = async () => {
            this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
            await this.Save(snv);
            this.LoadDialogueLinesEdit(snv, linesDiv);
          };
        }
      };
      const nameEl = this.DisplayText(charDropdownDiv, 25, this.characters[currentLine.speakerIndex].name);
      if (this.doVertical) {
        this.MakeVertical(nameEl);
      }
      if (this.language !== "Photolang") {
        nameEl.style.backgroundColor = speaker.backgroundColor;
        nameEl.style.color = speaker.color;
      }
      const lineInput = this.DisplayLineEdit(lineDiv, currentLine);
      if (this.doVertical) {
        lineInput.style.height = "100%";
        this.MakeVertical(lineInput);
      } else {
        lineInput.style.width = "100%";
      }
      lineInput.onchange = async () => {
        currentLine.content = lineInput.value;
        await this.Save(snv);
      };
    }
    const addButton = existingLinesDiv.createEl("button", { text: "+" });
    addButton.onclick = async () => {
      this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
      await this.Save(snv);
      await this.LoadDialogueLinesEdit(snv, linesDiv);
    };
  }
  // private async LoadDialogueLinesEdit(snv: SourceAndVault, linesDiv: HTMLDivElement) {
  // 	const existingLinesDiv = linesDiv.createDiv('hbox');
  // 	existingLinesDiv.style.overflowX = 'scroll';
  // 	const fontSize = '17.5px';
  // 	for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
  // 		const currentIndex = i;
  // 		const currentLine = this.pages[this.currentPageIndex].lines[i];
  // 		const speakerIndex = currentLine.speakerIndex;
  // 		const currentSpeaker = this.characters[speakerIndex];
  // 		const lineDiv = existingLinesDiv.createDiv('vbox');
  // 		const deleteButton = lineDiv.createEl('button', { text: '-' } );
  // 		deleteButton.className = 'cfe-remove-button';
  // 		deleteButton.style.writingMode = 'vertical-lr';
  // 		deleteButton.style.textOrientation = 'upright';
  // 		deleteButton.onclick = async () => {
  // 			this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
  // 			await this.Save(snv);
  // 			await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 		}
  // 		const indexElement = lineDiv.createEl('p', { text: '' +  currentIndex } );
  // 		indexElement.style.color = currentSpeaker.color;
  // 		indexElement.style.fontFamily = 'HwayuReal';
  // 		indexElement.style.writingMode = 'vertical-lr';
  // 		indexElement.style.textOrientation = 'upright';
  // 		const charDropdownDiv = lineDiv.createDiv();
  // 		charDropdownDiv.style.position = 'relative';
  // 		const charDropdown = charDropdownDiv.createEl('button');
  // 		charDropdown.style.height = 'fit-content';
  // 		charDropdown.onclick = () => {
  // 			const selectDiv = charDropdownDiv.createDiv('hbox');
  // 			selectDiv.style.position = 'absolute';
  // 			selectDiv.style.top = '0%';
  // 			selectDiv.style.left = '0%';
  // 			for (let i = 0; i < this.characters.length; i++) {
  // 				const currentCharIndex = i;
  // 				const currentChar = this.characters[currentCharIndex];
  // 				const currentOption = selectDiv.createEl('button', { text: currentChar.name, value: '' + i } );
  // 				currentOption.style.color = currentChar.color;
  // 				currentOption.style.fontFamily = 'HwayuReal';
  // 				currentOption.style.backgroundColor = currentChar.backgroundColor;
  // 				currentOption.style.writingMode = 'vertical-lr';
  // 				currentOption.style.textOrientation = 'upright';
  // 				currentOption.style.height = 'fit-content';
  // 				currentOption.style.zIndex = '2';
  // 				currentOption.onclick = async () => {
  // 					this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
  // 					const newSpeakerColor = this.characters[currentCharIndex].color;
  // 					const newBackgroundColor = this.characters[currentCharIndex].backgroundColor;
  // 					charDropdown.style.color = newSpeakerColor;
  // 					charDropdown.style.backgroundColor = newBackgroundColor;
  // 					charDropdown.textContent = this.characters[currentCharIndex].name;
  // 					lineInput.style.color = newSpeakerColor;
  // 					lineInput.style.backgroundColor = newBackgroundColor;
  // 					indexElement.style.color = newSpeakerColor;
  // 					await this.Save(snv);
  // 					selectDiv.remove();
  // 				}
  // 			}
  // 		}
  // 		charDropdown.textContent = this.characters[currentLine.speakerIndex].name;
  // 		charDropdown.style.color = currentSpeaker.color;
  // 		charDropdown.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		charDropdown.style.fontFamily = 'HwayuReal';
  // 		charDropdown.style.writingMode = 'vertical-lr';
  // 		charDropdown.style.textOrientation = 'upright';
  // 		const lineInput = lineDiv.createEl('textarea');
  // 		lineInput.spellcheck = false;
  // 		lineInput.style.overflowX = 'scroll';
  // 		lineInput.style.writingMode = 'vertical-lr';
  // 		lineInput.style.textOrientation = 'upright';
  // 		lineInput.defaultValue = currentLine.content;
  // 		lineInput.style.color = currentSpeaker.color;
  // 		lineInput.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		lineInput.style.fontFamily = 'HwayuReal';
  // 		lineInput.style.fontSize = fontSize;
  // 		lineInput.style.height = '100%';
  // 		lineInput.onchange = async () => {
  // 			this.pages[this.currentPageIndex].lines[currentIndex].content = lineInput.value;
  // 			await this.Save(snv);
  // 		}
  // 	}
  // 	const addButton = existingLinesDiv.createEl('button', { text: '+' } );
  // 	addButton.style.height = '100%';
  // 	addButton.onclick = async () => {
  // 		this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
  // 		await this.Save(snv);
  // 		await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 	}
  // }
  async LoadDialogueLinesDisplayOnly(linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv("vbox");
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      if (this.language === "Photolang") {
        const playButton = existingLinesDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(currentLine.content);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
      }
      const nameDiv = existingLinesDiv.createDiv("");
      nameDiv.className = this.doVertical ? "vbox" : "hbox";
      const lineDiv = existingLinesDiv.createDiv("");
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const nameEl = this.DisplayText(nameDiv, 25, speaker.name);
      nameEl.style.backgroundColor = speaker.backgroundColor;
      nameEl.style.color = speaker.color;
      if (this.language === "Photolang") {
        const photoLine = new PhotoLine(currentLine.content);
        photoLine.DisplayStatic(lineDiv, 25);
      } else {
        const lineEl = this.DisplayText(lineDiv, 25, currentLine.content);
        lineEl.style.backgroundColor = speaker.backgroundColor;
        lineEl.style.color = speaker.color;
      }
    }
    if (this.language === "Photolang") {
      for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
        const currentLine = this.pages[this.currentPageIndex].lines[i];
        const nameDiv = speakDiv.createDiv();
        nameDiv.style.position = "absolute";
        nameDiv.style.top = "0px";
        nameDiv.style.left = "0px";
        const photoName = new PhotoLine(this.characters[currentLine.speakerIndex].name);
        await photoName.Speak(nameDiv, 100, [100, 250, 500], [0, 500], false);
        const popup = speakDiv.createDiv();
        popup.style.position = "absolute";
        popup.style.top = "0px";
        popup.style.left = "0px";
        const photoLine = new PhotoLine(currentLine.content);
        await photoLine.Speak(popup, 200, [100, 250, 500], [0, 500], false);
      }
    }
  }
};
var Story = _Story;
Story.knownLanguages = [
  "English",
  "Hwayu",
  "Photolang"
];
var Page = class {
  constructor() {
    this.mediaFileID = -1;
    this.lines = [];
    this.mediaSizePercentage = 50;
  }
};
var DialogueLine = class {
  constructor(speakerIndex) {
    this.speakerIndex = speakerIndex;
    this.content = "";
  }
};
var Character = class {
  constructor(name = "", color = "white", backgroundColor = "white") {
    this.name = name;
    this.color = color;
    this.backgroundColor = backgroundColor;
  }
};

// classes/cfe-file-handler.ts
var CFEFileHandler = class {
  static async CreateNew(snv, fileType, parentFolderID, name) {
    let newFile;
    switch (fileType) {
      case "Folder":
      default:
        newFile = await Folder.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Single Media File":
        newFile = await SingleMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Variant Media File":
        newFile = await VariantMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Playlist":
        newFile = await Playlist.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Story":
        newFile = await Story.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Source Folder Shortcut":
        newFile = await SourceFolderShortcut.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
      case "Conlang Dictionary":
        newFile = await ConlangDictionary.CreateNewFileForLayer(snv, fileType, parentFolderID, name);
        break;
    }
    await newFile.Save(snv);
    return newFile;
  }
  static async LoadFile(snv, fileID) {
    const sourceFolder = snv.sourceFolder;
    const vault = snv.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/" + fileID + ".json");
    if (tFile === null) {
      throw Error("File could not be found at the path: " + sourceFolder.vaultPath + "/" + fileID + ".json");
    }
    const jsonData = await vault.cachedRead(tFile);
    const plainObject = JSON.parse(jsonData);
    switch (plainObject.fileType) {
      case "Folder":
      default:
        return await Object.assign(new Folder(), plainObject);
      case "Single Media File":
        return await Object.assign(new SingleMediaFile(), plainObject);
      case "Variant Media File":
        return await Object.assign(new VariantMediaFile(), plainObject);
      case "Playlist":
        return await Object.assign(new Playlist(), plainObject);
      case "Story":
        return await Object.assign(new Story(), plainObject);
      case "Source Folder Shortcut":
        return await Object.assign(new SourceFolderShortcut(), plainObject);
      case "Conlang Dictionary":
        return await Object.assign(new ConlangDictionary(), plainObject);
    }
  }
};
/**
 * All of the known file formats
 */
CFEFileHandler.KnownFileTypes = [
  "Folder",
  "Single Media File",
  "Variant Media File",
  "Playlist",
  "Story",
  "Source Folder Shortcut",
  "Conlang Dictionary"
];

// classes/snv.ts
var SourceAndVault = class {
  constructor(sourceFolder, vault) {
    this.sourceFolder = sourceFolder;
    this.vault = vault;
  }
};

// classes/source-folder.ts
var SourceFolder = class {
  constructor() {
    this.vaultPath = "";
    this.fileCount = 0;
  }
  async Display(container, vault) {
    const snv = new SourceAndVault(this, vault);
    const notExists = vault.getFileByPath(snv.sourceFolder.vaultPath + "/0.json") === null;
    if (notExists) {
      await CFEFileHandler.CreateNew(snv, "Folder", 0, "Root Folder");
    }
    const rootFolder = await CFEFileHandler.LoadFile(snv, 0);
    await SourceFolder.Save(snv);
    await rootFolder.Save(snv);
    await rootFolder.Display(snv, container);
  }
  static async CreateOrLoadSourceFolder(vaultPath, vault) {
    vaultPath = vaultPath.endsWith("/source.json") ? vaultPath.slice(0, -12) : vaultPath;
    const exists = vault.getFileByPath(vaultPath + "/source.json") !== null;
    let newSourceFolder;
    if (exists) {
      newSourceFolder = await this.LoadExistingSource(vaultPath, vault);
    } else {
      newSourceFolder = await this.CreateNewSourceFolder(vaultPath, vault);
    }
    return newSourceFolder;
  }
  static async CreateNewSourceFolder(vaultPath, vault) {
    const newSourceFolder = new SourceFolder();
    newSourceFolder.vaultPath = vaultPath;
    newSourceFolder.fileCount = 0;
    try {
      await vault.createFolder(vaultPath);
    } finally {
      const sourcePath = (0, import_obsidian3.normalizePath)(vaultPath + "/source.json");
      await vault.adapter.write(sourcePath, "0");
    }
    return newSourceFolder;
  }
  static async LoadExistingSource(vaultPath, vault) {
    const sourceTFile = vault.getFileByPath(vaultPath + "/source.json");
    if (sourceTFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + vaultPath + "/source.json");
    }
    const jsonData = await vault.cachedRead(sourceTFile);
    const plainObject = await JSON.parse(jsonData);
    const newSourceFolder = Object.assign(new SourceFolder(), plainObject);
    newSourceFolder.vaultPath = vaultPath;
    await SourceFolder.Save(new SourceAndVault(newSourceFolder, vault));
    return newSourceFolder;
  }
  /**
   * Saves the new file count
   */
  static async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/source.json");
    if (tFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
    }
    const jsonData = JSON.stringify(sourceFolder);
    await vault.modify(tFile, jsonData);
  }
};

// classes/custom-explorer-view.ts
var VIEW_TYPE_CUSTOM_EXPLORER = "custom-explorer-view";
var CustomExplorerView = class extends import_obsidian4.ItemView {
  constructor(leaf, path) {
    super(leaf);
    this.defaultPath = path;
  }
  getViewType() {
    return VIEW_TYPE_CUSTOM_EXPLORER;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    const wrapper = this.containerEl.children[1];
    wrapper.empty();
    const mainContainer = wrapper.createDiv("cfe-main-display");
    const homePage = mainContainer.createDiv("cfe-home-page");
    homePage.createEl("h4", { text: "Path to Source Folder:" });
    const existingSourcePathInput = homePage.createEl("input", { type: "text", value: this.defaultPath });
    existingSourcePathInput.style.width = "100%";
    const submitButton = homePage.createEl("button", { text: "submit" });
    const vault = this.app.vault;
    submitButton.onclick = async () => {
      const path = existingSourcePathInput.value;
      const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
      await sf.Display(mainContainer, vault);
    };
    homePage.onkeydown = async (keyPressEvent) => {
      if (keyPressEvent.key === "Enter") {
        const path = existingSourcePathInput.value;
        const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
        await sf.Display(mainContainer, vault);
      }
    };
  }
  async onClose() {
  }
};

// main.ts
var import_obsidian5 = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultPath: "Source Folder"
};
var CFE = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CUSTOM_EXPLORER,
      (leaf) => new CustomExplorerView(leaf, this.settings.defaultPath)
    );
    this.addRibbonIcon("folder", "Activate view", () => {
      this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
    });
    this.addCommand({
      id: "open-cfe-view",
      name: "Open Custom File Explorer View",
      callback: () => {
        this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView(view_type) {
    const { workspace } = this.app;
    let leaf = null;
    leaf = workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian5.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    await leaf.setViewState({ type: view_type, active: true });
    workspace.revealLeaf(leaf);
  }
};
var SampleSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("Default Source Path").setDesc("The vault path to automatically fill in for the source path").addText((text) => text.setPlaceholder("Default Source Path").setValue(this.plugin.settings.defaultPath).onChange(async (value) => {
      this.plugin.settings.defaultPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjbGFzc2VzL2N1c3RvbS1leHBsb3Jlci12aWV3LnRzIiwgImNsYXNzZXMvc291cmNlLWZvbGRlci50cyIsICJjbGFzc2VzL2NmZS1maWxlLnRzIiwgImNsYXNzZXMvc2luZ2xlLW1lZGlhLWZpbGUudHMiLCAiY2xhc3Nlcy9yZWFsLWZpbGUudHMiLCAiY2xhc3Nlcy9mb2xkZXIudHMiLCAiY2xhc3Nlcy9wbGF5bGlzdC50cyIsICJjbGFzc2VzL3ZhcmlhbnQtbWVkaWEtZmlsZS50cyIsICJjbGFzc2VzL3NvdXJjZS1mb2xkZXItc2hvcnRjdXQudHMiLCAiY2xhc3Nlcy9jb25sYW5ncy9od2F5dS10ZXh0LnRzIiwgImNsYXNzZXMvY29ubGFuZ3MvcGhvdG9sYW5nLXRleHQudHMiLCAiY2xhc3Nlcy9jb25sYW5nLWRpY3Rpb25hcnkudHMiLCAiY2xhc3Nlcy9zdG9yeS50cyIsICJjbGFzc2VzL2NmZS1maWxlLWhhbmRsZXIudHMiLCAiY2xhc3Nlcy9zbnYudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEN1c3RvbUV4cGxvcmVyVmlldywgVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUiB9IGZyb20gJ2NsYXNzZXMvY3VzdG9tLWV4cGxvcmVyLXZpZXcnO1xuaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XG5cbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxuXG5pbnRlcmZhY2UgQ0ZFQ2V0dGluZ3Mge1xuXHRkZWZhdWx0UGF0aDogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDRkVDZXR0aW5ncyA9IHtcblx0ZGVmYXVsdFBhdGg6ICdTb3VyY2UgRm9sZGVyJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDRkUgZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogQ0ZFQ2V0dGluZ3M7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVmlldyhcblx0XHRcdFZJRVdfVFlQRV9DVVNUT01fRVhQTE9SRVIsXG5cdFx0XHQobGVhZikgPT4gbmV3IEN1c3RvbUV4cGxvcmVyVmlldyhsZWFmLCB0aGlzLnNldHRpbmdzLmRlZmF1bHRQYXRoKVxuXHRcdCk7XG5cblx0XHR0aGlzLmFkZFJpYmJvbkljb24oJ2ZvbGRlcicsICdBY3RpdmF0ZSB2aWV3JywgKCkgPT4ge1xuXHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUik7XG5cdFx0fSk7XG5cblx0XHQvLyBUaGlzIGFkZHMgYSBzaW1wbGUgY29tbWFuZCB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgYW55d2hlcmVcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdvcGVuLWNmZS12aWV3Jyxcblx0XHRcdG5hbWU6ICdPcGVuIEN1c3RvbSBGaWxlIEV4cGxvcmVyIFZpZXcnLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgY2FuIHBlcmZvcm0gc29tZSBvcGVyYXRpb24gb24gdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnc2FtcGxlLWVkaXRvci1jb21tYW5kJyxcblx0XHRcdG5hbWU6ICdTYW1wbGUgZWRpdG9yIGNvbW1hbmQnLFxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGVkaXRvci5nZXRTZWxlY3Rpb24oKSk7XG5cdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKCdTYW1wbGUgRWRpdG9yIENvbW1hbmQnKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTYW1wbGVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHQvLyBJZiB0aGUgcGx1Z2luIGhvb2tzIHVwIGFueSBnbG9iYWwgRE9NIGV2ZW50cyAob24gcGFydHMgb2YgdGhlIGFwcCB0aGF0IGRvZXNuJ3QgYmVsb25nIHRvIHRoaXMgcGx1Z2luKVxuXHRcdC8vIFVzaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgd2hlbiB0aGlzIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKCdjbGljaycsIGV2dCk7XG5cdFx0fSk7XG5cblx0XHQvLyBXaGVuIHJlZ2lzdGVyaW5nIGludGVydmFscywgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHR0aGlzLnJlZ2lzdGVySW50ZXJ2YWwod2luZG93LnNldEludGVydmFsKCgpID0+IGNvbnNvbGUubG9nKCdzZXRJbnRlcnZhbCcpLCA1ICogNjAgKiAxMDAwKSk7XG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblxuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cblxuXHRhc3luYyBhY3RpdmF0ZVZpZXcodmlld190eXBlOiBzdHJpbmcpIHtcblx0XHRjb25zdCB7IHdvcmtzcGFjZSB9ID0gdGhpcy5hcHA7XG5cblx0XHRsZXQgbGVhZjogV29ya3NwYWNlTGVhZiB8IG51bGwgPSBudWxsO1xuXG5cdFx0bGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcblx0XHRpZiAobGVhZiA9PT0gbnVsbCkge1xuXHRcdFx0bmV3IE5vdGljZShcIkZhaWxlZCB0byBjcmVhdGUgdmlldzogd29ya3NwYWNlIGxlYWYgd2FzIG51bGxcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGF3YWl0IGxlYWYuc2V0Vmlld1N0YXRlKHsgdHlwZTogdmlld190eXBlLCBhY3RpdmU6IHRydWUgfSk7XG5cblx0XHQvLyBcIlJldmVhbFwiIHRoZSBsZWFmIGluIGNhc2UgaXQgaXMgaW4gYSBjb2xsYXBzZWQgc2lkZWJhclxuXHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuXHR9XG59XG5cbmNsYXNzIFNhbXBsZVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBDRkU7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogQ0ZFKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdEZWZhdWx0IFNvdXJjZSBQYXRoJylcblx0XHRcdC5zZXREZXNjKCdUaGUgdmF1bHQgcGF0aCB0byBhdXRvbWF0aWNhbGx5IGZpbGwgaW4gZm9yIHRoZSBzb3VyY2UgcGF0aCcpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdEZWZhdWx0IFNvdXJjZSBQYXRoJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRQYXRoKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFBhdGggPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXHR9XG59XG4iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBTb3VyY2VGb2xkZXIgfSBmcm9tICcuL3NvdXJjZS1mb2xkZXInO1xuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUiA9ICdjdXN0b20tZXhwbG9yZXItdmlldyc7XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21FeHBsb3JlclZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XG5cdGRlZmF1bHRQYXRoOiBzdHJpbmc7XG5cdGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBhdGg6IHN0cmluZykge1xuXHRcdHN1cGVyKGxlYWYpO1xuXHRcdHRoaXMuZGVmYXVsdFBhdGggPSBwYXRoO1xuXHR9XG5cblx0Z2V0Vmlld1R5cGUoKSB7XG5cdFx0cmV0dXJuIFZJRVdfVFlQRV9DVVNUT01fRVhQTE9SRVI7XG5cdH1cblxuXHRnZXREaXNwbGF5VGV4dCgpIHtcblx0XHRyZXR1cm4gJ0V4YW1wbGUgdmlldyc7XG5cdH1cblxuXHRhc3luYyBvbk9wZW4oKSB7XG5cdFx0Y29uc3Qgd3JhcHBlciA9IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV07XG5cdFx0d3JhcHBlci5lbXB0eSgpO1xuXHRcdGNvbnN0IG1haW5Db250YWluZXIgPSB3cmFwcGVyLmNyZWF0ZURpdignY2ZlLW1haW4tZGlzcGxheScpO1xuXHRcdGNvbnN0IGhvbWVQYWdlID0gbWFpbkNvbnRhaW5lci5jcmVhdGVEaXYoJ2NmZS1ob21lLXBhZ2UnKTtcblx0XHRob21lUGFnZS5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdQYXRoIHRvIFNvdXJjZSBGb2xkZXI6JyB9ICk7XG5cdFx0Y29uc3QgZXhpc3RpbmdTb3VyY2VQYXRoSW5wdXQgPSBob21lUGFnZS5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMuZGVmYXVsdFBhdGggfSApO1xuXHRcdGV4aXN0aW5nU291cmNlUGF0aElucHV0LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuXHRcdGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGhvbWVQYWdlLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdzdWJtaXQnIH0gKTtcblx0XHRjb25zdCB2YXVsdCA9IHRoaXMuYXBwLnZhdWx0O1xuXHRcdHN1Ym1pdEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0Y29uc3QgcGF0aCA9IGV4aXN0aW5nU291cmNlUGF0aElucHV0LnZhbHVlO1xuXHRcdFx0Y29uc3Qgc2YgPSA8U291cmNlRm9sZGVyPiBhd2FpdCBTb3VyY2VGb2xkZXIuQ3JlYXRlT3JMb2FkU291cmNlRm9sZGVyKHBhdGgsIHZhdWx0KTtcblx0XHRcdGF3YWl0IHNmLkRpc3BsYXkobWFpbkNvbnRhaW5lciwgdmF1bHQpO1xuXHRcdH1cblx0XHRob21lUGFnZS5vbmtleWRvd24gPSBhc3luYyAoa2V5UHJlc3NFdmVudCkgPT4ge1xuXHRcdFx0aWYgKGtleVByZXNzRXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG5cdFx0XHRcdGNvbnN0IHBhdGggPSBleGlzdGluZ1NvdXJjZVBhdGhJbnB1dC52YWx1ZTtcblx0XHRcdFx0Y29uc3Qgc2YgPSBhd2FpdCBTb3VyY2VGb2xkZXIuQ3JlYXRlT3JMb2FkU291cmNlRm9sZGVyKHBhdGgsIHZhdWx0KTtcblx0XHRcdFx0YXdhaXQgc2YuRGlzcGxheShtYWluQ29udGFpbmVyLCB2YXVsdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgb25DbG9zZSgpIHtcblx0XHQvLyBOb3RoaW5nIHRvIGNsZWFuIHVwLlxuXHR9XG59XG4iLCAiaW1wb3J0IHsgbm9ybWFsaXplUGF0aCwgTm90aWNlLCBWYXVsdCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgQ0ZFRmlsZUhhbmRsZXIgfSBmcm9tIFwiLi9jZmUtZmlsZS1oYW5kbGVyXCI7XG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xuXG5leHBvcnQgY2xhc3MgU291cmNlRm9sZGVyIHtcblx0dmF1bHRQYXRoOiBzdHJpbmc7XG5cdGZpbGVDb3VudDogbnVtYmVyO1xuXG5cdHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy52YXVsdFBhdGggPSAnJztcblx0XHR0aGlzLmZpbGVDb3VudCA9IDA7XG5cdH1cblxuXHRhc3luYyBEaXNwbGF5KGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIHZhdWx0OiBWYXVsdCkge1xuXHRcdGNvbnN0IHNudiA9IG5ldyBTb3VyY2VBbmRWYXVsdCh0aGlzLCB2YXVsdCk7XG5cdFx0Y29uc3Qgbm90RXhpc3RzID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aChzbnYuc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvMC5qc29uJykgPT09IG51bGw7XG5cdFx0aWYgKG5vdEV4aXN0cykge1xuXHRcdFx0YXdhaXQgQ0ZFRmlsZUhhbmRsZXIuQ3JlYXRlTmV3KHNudiwgJ0ZvbGRlcicsIDAsICdSb290IEZvbGRlcicpO1xuXHRcdH1cblx0XHRjb25zdCByb290Rm9sZGVyID0gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCAwKTtcblx0XHRhd2FpdCBTb3VyY2VGb2xkZXIuU2F2ZShzbnYpO1xuXHRcdGF3YWl0IHJvb3RGb2xkZXIuU2F2ZShzbnYpO1xuXHRcdGF3YWl0IHJvb3RGb2xkZXIuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgQ3JlYXRlT3JMb2FkU291cmNlRm9sZGVyKHZhdWx0UGF0aDogc3RyaW5nLCB2YXVsdDogVmF1bHQpOiBQcm9taXNlPFNvdXJjZUZvbGRlcj4ge1xuXHRcdHZhdWx0UGF0aCA9IHZhdWx0UGF0aC5lbmRzV2l0aCgnL3NvdXJjZS5qc29uJykgPyB2YXVsdFBhdGguc2xpY2UoMCwgLTEyKSA6IHZhdWx0UGF0aDtcblx0XHRjb25zdCBleGlzdHMgPSB2YXVsdC5nZXRGaWxlQnlQYXRoKHZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKSAhPT0gbnVsbDtcblx0XHRsZXQgbmV3U291cmNlRm9sZGVyOiBTb3VyY2VGb2xkZXI7XG5cdFx0aWYgKGV4aXN0cykge1xuXHRcdFx0bmV3U291cmNlRm9sZGVyID0gYXdhaXQgdGhpcy5Mb2FkRXhpc3RpbmdTb3VyY2UodmF1bHRQYXRoLCB2YXVsdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ld1NvdXJjZUZvbGRlciA9IGF3YWl0IHRoaXMuQ3JlYXRlTmV3U291cmNlRm9sZGVyKHZhdWx0UGF0aCwgdmF1bHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3U291cmNlRm9sZGVyO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgYXN5bmMgQ3JlYXRlTmV3U291cmNlRm9sZGVyKHZhdWx0UGF0aDogc3RyaW5nLCB2YXVsdDogVmF1bHQpOiBQcm9taXNlPFNvdXJjZUZvbGRlcj4ge1xuXHRcdGNvbnN0IG5ld1NvdXJjZUZvbGRlciA9IG5ldyBTb3VyY2VGb2xkZXIoKTtcblx0XHRuZXdTb3VyY2VGb2xkZXIudmF1bHRQYXRoID0gdmF1bHRQYXRoO1xuXHRcdG5ld1NvdXJjZUZvbGRlci5maWxlQ291bnQgPSAwO1xuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCB2YXVsdC5jcmVhdGVGb2xkZXIodmF1bHRQYXRoKTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0Y29uc3Qgc291cmNlUGF0aCA9IG5vcm1hbGl6ZVBhdGgodmF1bHRQYXRoICsgJy9zb3VyY2UuanNvbicpO1xuXHRcdFx0YXdhaXQgdmF1bHQuYWRhcHRlci53cml0ZShzb3VyY2VQYXRoLCAnMCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3U291cmNlRm9sZGVyO1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgYXN5bmMgTG9hZEV4aXN0aW5nU291cmNlKHZhdWx0UGF0aDogc3RyaW5nLCB2YXVsdDogVmF1bHQpOiBQcm9taXNlPFNvdXJjZUZvbGRlcj4ge1xuXHRcdGNvbnN0IHNvdXJjZVRGaWxlID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aCh2YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XG5cdFx0aWYgKHNvdXJjZVRGaWxlID09PSBudWxsKSB7XG5cdFx0XHRuZXcgTm90aWNlKFwiU291cmNlIEZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKTtcblx0XHRcdHRocm93IEVycm9yKFwiU291cmNlIEZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKTtcblx0XHR9XG5cdFx0Y29uc3QganNvbkRhdGEgPSBhd2FpdCB2YXVsdC5jYWNoZWRSZWFkKHNvdXJjZVRGaWxlKTtcblxuXHRcdGNvbnN0IHBsYWluT2JqZWN0ID0gYXdhaXQgSlNPTi5wYXJzZShqc29uRGF0YSk7XG5cdFx0Y29uc3QgbmV3U291cmNlRm9sZGVyID0gT2JqZWN0LmFzc2lnbihuZXcgU291cmNlRm9sZGVyKCksIHBsYWluT2JqZWN0KTtcblx0XHRuZXdTb3VyY2VGb2xkZXIudmF1bHRQYXRoID0gdmF1bHRQYXRoO1xuXHRcdGF3YWl0IFNvdXJjZUZvbGRlci5TYXZlKG5ldyBTb3VyY2VBbmRWYXVsdChuZXdTb3VyY2VGb2xkZXIsIHZhdWx0KSk7XG5cdFx0cmV0dXJuIG5ld1NvdXJjZUZvbGRlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBTYXZlcyB0aGUgbmV3IGZpbGUgY291bnRcblx0ICovXG5cdHN0YXRpYyBhc3luYyBTYXZlKHNvdXJjZUFuZFZhdWx0OiBTb3VyY2VBbmRWYXVsdCkge1xuXHRcdGNvbnN0IHNvdXJjZUZvbGRlciA9IHNvdXJjZUFuZFZhdWx0LnNvdXJjZUZvbGRlcjtcblx0XHRjb25zdCB2YXVsdCA9IHNvdXJjZUFuZFZhdWx0LnZhdWx0O1xuXG5cdFx0Ly8gRmluZCB0aGUgZmlsZSBhbmQgY2hlY2sgdGhhdCBpdCBpc24ndCBudWxsXG5cdFx0Y29uc3QgdEZpbGUgPSB2YXVsdC5nZXRGaWxlQnlQYXRoKHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XG5cdFx0aWYgKHRGaWxlID09PSBudWxsKSB7XG5cdFx0XHRuZXcgTm90aWNlKFwiU291cmNlIEZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XG5cdFx0XHR0aHJvdyBFcnJvcihcIlNvdXJjZSBGaWxlIGNvdWxkIG5vdCBiZSBmb3VuZCBhdCB0aGUgcGF0aDogXCIgKyBzb3VyY2VGb2xkZXIudmF1bHRQYXRoICsgJy9zb3VyY2UuanNvbicpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGpzb25EYXRhID0gSlNPTi5zdHJpbmdpZnkoc291cmNlRm9sZGVyKTtcblx0XHRhd2FpdCB2YXVsdC5tb2RpZnkodEZpbGUsIGpzb25EYXRhKTtcblx0fVxufVxuIiwgImltcG9ydCB7IG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5pbXBvcnQgeyBDRkVGaWxlSGFuZGxlciB9IGZyb20gXCIuL2NmZS1maWxlLWhhbmRsZXJcIjtcbmltcG9ydCB7IFNvdXJjZUZvbGRlciB9IGZyb20gXCIuL3NvdXJjZS1mb2xkZXJcIjtcbmltcG9ydCB7IEZvbGRlciB9IGZyb20gXCIuL2ZvbGRlclwiO1xuXG4vLyNyZWdpb24gRm9ybWF0dGVkIEZpbGUgSGFuZGxlclxuLy8jZW5kcmVnaW9uXG5cbi8vI3JlZ2lvbiBGaWxlIFR5cGVzXG4vKipcbiAqIEFuIGludGVycHJldGF0aW9uIG9mIGpzb24gZmlsZXMgYXMgYSBcImZpbGVcIiBvZiBhIHNwZWNpZmljIFwiZmlsZSBmb3JtYXRcIlxuICogdGhhdCBjYW4gYmUgaW50ZXJwcmV0ZWQgYW5kIGRpc3BsYXllZCBieSB0aGUgcGx1Z2luLlxuICovXG5leHBvcnQgY2xhc3MgQ0ZFRmlsZSB7XG5cdC8qKlxuXHQgKiBBIHVuaXF1ZSAod2l0aGluIHRoZSBcInNvdXJjZVwiIG9mIHRoZSBjdXJyZW50IGV4cGxvcmVyKSBudW1lcmljYWwgaWRlbnRpZmllciBmb3IgdGhlIGZpbGVcblx0ICovXG5cdGlkOiBudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSB0eXBlIG9mIGZpbGVcblx0ICovXG5cdGZpbGVUeXBlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHdpdGhpbiB0aGUgc291cmNlXG5cdCAqL1xuXHRmaWxlTmFtZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgSUQgb2YgdGhlIHBhcmVudCBmb2xkZXJcblx0ICovXG5cdHBhcmVudEZvbGRlcklEOiBudW1iZXI7XG5cblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRklMRV9OQU1FX0lOUFVUX0lOREVYID0gMDtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUEFSRU5UX0ZPTERFUl9JRF9JTlBVVF9JTkRFWCA9IDE7XG5cblx0LyoqXG5cdCAqIFNIT1VMRCBOT1QgQkUgQ0FMTEVEIE9VVFNJREUgT0YgQ0ZFRmlsZUhhbmRsZXIuXG5cdCAqIFxuXHQgKiBVc2UgQ0ZFRmlsZUhhbmRsZXIuQ3JlYXRlTmV3KCkgaW5zdGVhZC5cblx0ICogXG5cdCAqIENISUxEIENMQVNTRVMgU0hPVUxEIE5PVCBXUklURSBUTyBBIEZJTEUuIFRISVMgSVMgRE9ORSBJTlNJREUgT0YgQ0ZFRmlsZUhhbmRsZXJcblx0ICogXG5cdCAqIENGRUZpbGUgbGF5ZXI6XG5cdCAqIFxuXHQgKiBzZXRzIHRoZSBzb3VyY2UsIGlkLCBmaWxlIHR5cGUsIGZpbGUgbmFtZSwgYW5kIHBhcmVudCBmb2xkZXIgaWQgb2YgdGhlIGZpbGUgb2JqZWN0LlxuXHQgKi9cblx0c3RhdGljIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPENGRUZpbGU+IHtcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzbnYuc291cmNlRm9sZGVyO1xuXG5cdFx0Ly8gU2V0IHRoZSB2YWx1ZXMgb2YgdGhlIHVuZmluaXNoZWQgZmlsZVxuXHRcdGNvbnN0IHVuZmluaXNoZWRGaWxlID0gbmV3IENGRUZpbGUoKTtcblx0XHR1bmZpbmlzaGVkRmlsZS5pZCA9IHNvdXJjZUZvbGRlci5maWxlQ291bnQ7XG5cdFx0dW5maW5pc2hlZEZpbGUuZmlsZVR5cGUgPSBmaWxlVHlwZTtcblx0XHR1bmZpbmlzaGVkRmlsZS5maWxlTmFtZSA9IG5hbWU7XG5cdFx0dW5maW5pc2hlZEZpbGUucGFyZW50Rm9sZGVySUQgPSBwYXJlbnRGb2xkZXJJRDtcblx0XHRcblx0XHQvLyBVcGRhdGUgdGhlIGZpbGUgY291bnRcblx0XHRzb3VyY2VGb2xkZXIuZmlsZUNvdW50Kys7XG5cdFx0YXdhaXQgU291cmNlRm9sZGVyLlNhdmUoc252KTtcblxuXHRcdC8vIEZpbmQgdGhlIHBhcmVudCBmb2xkZXIgYW5kIGFkZCB0aGlzIGZpbGUgdG8gaXRcblx0XHRpZiAodW5maW5pc2hlZEZpbGUuaWQgIT09IHVuZmluaXNoZWRGaWxlLnBhcmVudEZvbGRlcklEKSB7XG5cdFx0XHRjb25zdCBwYXJlbnRGb2xkZXIgPSA8Rm9sZGVyPiAoYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCB1bmZpbmlzaGVkRmlsZS5wYXJlbnRGb2xkZXJJRCkpO1xuXHRcdFx0cGFyZW50Rm9sZGVyLmNvbnRhaW5lZEZpbGVJRHMucHVzaCh1bmZpbmlzaGVkRmlsZS5pZCk7XG5cdFx0XHRhd2FpdCBwYXJlbnRGb2xkZXIuU2F2ZShzbnYpO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgdW5maW5pc2hlZCBmaWxlIHNvIHRoZSBuZXh0IGxheWVyIGNhbiBhZGQgdG8gaXRcblx0XHRyZXR1cm4gdW5maW5pc2hlZEZpbGU7XG5cdH1cblxuXHQvKipcblx0ICogU0hPVUxEIE5PVCBCRSBDQUxMRUQgT1VUU0lERSBPRiBDRkVGaWxlSGFuZGxlci5cblx0ICogXG5cdCAqIFVzZSBDRkVGaWxlSGFuZGxlci5EaXNwbGF5VGh1bWJuYWlsKCkgaW5zdGVhZC5cblx0ICogXG5cdCAqIENGRUZpbGUgbGF5ZXI6XG5cdCAqIFxuXHQgKiBzZXRzIHRoZSB0aHVtYm5haWwgY29udGFpbmVyJ3MgY3NzIGNsYXNzIHRvICdjZmUtdGh1bWJuYWlsJ1xuXHQgKiBhbmQgZnVsbHkgZGlzcGxheXMgdGhlIGZpbGUgaWYgdGhlIHRodW1ibmFpbCBpcyBjbGlja2VkLlxuXHQgKi9cblx0YXN5bmMgRGlzcGxheVRodW1ibmFpbChzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQsIHRodW1ibmFpbERpdjogSFRNTERpdkVsZW1lbnQsIGRpc3BsYXlEaXY6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0dGh1bWJuYWlsRGl2LmNsYXNzTmFtZSA9ICdjZmUtdGh1bWJuYWlsIHZib3gnO1xuXHRcdHRodW1ibmFpbERpdi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNvdXJjZUFuZFZhdWx0LCBkaXNwbGF5RGl2KTtcblx0XHR9XG5cdFx0Y29uc3QgaWRUZXh0ID0gdGh1bWJuYWlsRGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdGlkVGV4dC50ZXh0Q29udGVudCA9ICdJRDogJyArIHRoaXMuaWQ7XG5cdFx0aWRUZXh0LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2NlbnRlcic7XG5cdFx0Y29uc3QgZmlsZVRleHQgPSB0aHVtYm5haWxEaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0ZmlsZVRleHQudGV4dENvbnRlbnQgPSAnRmlsZSBUeXBlOiAnICsgdGhpcy5maWxlVHlwZTtcblx0XHRmaWxlVGV4dC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInO1xuXHRcdGNvbnN0IG5hbWVUZXh0ID0gdGh1bWJuYWlsRGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdG5hbWVUZXh0LnRleHRDb250ZW50ID0gJ0ZpbGUgTmFtZTogJyArIHRoaXMuZmlsZU5hbWU7XG5cdFx0bmFtZVRleHQuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnY2VudGVyJztcblx0fVxuXHRcblx0LyoqXG5cdCAqIFNIT1VMRCBOT1QgQkUgQ0FMTEVEIE9VVFNJREUgT0YgQ0ZFRmlsZUhhbmRsZXIuXG5cdCAqIFxuXHQgKiBVc2UgQ0ZFRmlsZUhhbmRsZXIuRGlzcGxheSgpIGluc3RlYWQuXG5cdCAqIFxuXHQgKiBDRkVGaWxlIGxheWVyOlxuXHQgKiBcblx0ICogZW1wdGllcyB0aGUgZGlzcGxheSBjb250YWluZXIgcHJvdmlkZWQuXG5cdCAqL1xuXHRhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRjb250YWluZXIuZW1wdHkoKTtcblx0XHRjb25zdCBoZWFkZXJDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0Y29uc3QgYmFja0J1dHRvbiA9IGhlYWRlckNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQmFjayB0byBwYXJlbnQgZm9sZGVyJyB9ICk7XG5cdFx0aGVhZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnRmlsZSBJRDogJyArIHRoaXMuaWQgfSApXG5cdFx0aGVhZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnRmlsZSBOYW1lOiAnIH0gKVxuXHRcdGNvbnN0IG5hbWVJbnB1dCA9IGhlYWRlckNvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMuZmlsZU5hbWUgfSApO1xuXHRcdGJhY2tCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGNvbnN0IHBhcmVudEZvbGRlciA9IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgdGhpcy5wYXJlbnRGb2xkZXJJRCk7XG5cdFx0XHRpZiAocGFyZW50Rm9sZGVyICE9PSBudWxsKSB7XG5cdFx0XHRcdGF3YWl0IHBhcmVudEZvbGRlci5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0bmFtZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dGhpcy5maWxlTmFtZSA9IG5hbWVJbnB1dC52YWx1ZTtcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTSE9VTEQgTk9UIEJFIENBTExFRCBPVVRTSURFIE9GIENGRUZpbGVIYW5kbGVyLlxuXHQgKiBcblx0ICogKGl0IGlzIHVubGlrZWx5IHRoaXMgbWV0aG9kIHdpbGwgZXZlciBiZSBvdmVycmlkZW4gYnkgY2hpbGQgY2xhc3NlcywgYnV0IG1ha2luZyB0aGlzICdpbmFjY2Vzc2libGUnIGlzIGZvciBjb25zaXN0ZW5jeSlcblx0ICogXG5cdCAqIFVzZSBDRkVGaWxlSGFuZGxlci5TYXZlRmlsZSgpIGluc3RlYWQuXG5cdCAqIFxuXHQgKiBGb3JtYXR0ZWQgRmlsZSBsYXllcjpcblx0ICogXG5cdCAqIERlbGV0ZXMgdGhpcyBmaWxlIElEIGZyb20gdGhlIG9yaWdpbmFsIHBhcmVudCBmb2xkZXIsIGFkZHMgdGhpcyBmaWxlIHRvIHRoZSBuZXcgcGFyZW50IGZvbGRlciwgYW5kIGNoYW5nZXMgdGhlIHBhcmVudCBmb2xkZXIgSURcblx0ICovXG5cdGFzeW5jIE1vdmVGaWxlKHNvdXJjZUFuZFZhdWx0OiBTb3VyY2VBbmRWYXVsdCwgbmV3UGFyZW50Rm9sZGVySUQ6IG51bWJlcikge1xuXHRcdC8vIERlbGV0ZSB0aGlzIGZpbGUgaWQgZnJvbSB0aGUgb3JpZ2luYWwgcGFyZW50IGZvbGRlclxuXHRcdGNvbnN0IG9sZFBhcmVudEZvbGRlciA9IDxGb2xkZXI+IChhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzb3VyY2VBbmRWYXVsdCwgdGhpcy5wYXJlbnRGb2xkZXJJRCkpO1xuXHRcdGNvbnN0IGluZGV4T2ZGaWxlID0gb2xkUGFyZW50Rm9sZGVyLmNvbnRhaW5lZEZpbGVJRHMuaW5kZXhPZih0aGlzLmlkKTtcblx0XHRvbGRQYXJlbnRGb2xkZXIuY29udGFpbmVkRmlsZUlEcy5zcGxpY2UoaW5kZXhPZkZpbGUsIDEpO1xuXHRcdG9sZFBhcmVudEZvbGRlci5TYXZlKHNvdXJjZUFuZFZhdWx0KTsgLy8gdGhpcyBjYW4gYmUgZG9uZSBhc3luY2hyb25vdXNseSB3aXRob3V0IGFmZmVjdGluZyB0aGUgb3RoZXJzXG5cblx0XHQvLyBBZGQgdGhpcyBmaWxlIHRvIHRoZSBuZXcgcGFyZW50IGZvbGRlclxuXHRcdGNvbnN0IG5ld1BhcmVudEZvbGRlciA9IDxGb2xkZXI+IChhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzb3VyY2VBbmRWYXVsdCwgbmV3UGFyZW50Rm9sZGVySUQpKTtcblx0XHRuZXdQYXJlbnRGb2xkZXIuY29udGFpbmVkRmlsZUlEcy5wdXNoKHRoaXMuaWQpO1xuXHRcdG5ld1BhcmVudEZvbGRlci5TYXZlKHNvdXJjZUFuZFZhdWx0KTsgLy8gdGhpcyBjYW4gYmUgZG9uZSBhc3luY2hyb25vdXNseSB3aXRob3V0IGFmZmVjdGluZyB0aGUgb3RoZXJzXG5cblx0XHR0aGlzLnBhcmVudEZvbGRlcklEID0gbmV3UGFyZW50Rm9sZGVySUQ7XG5cdFx0dGhpcy5TYXZlKHNvdXJjZUFuZFZhdWx0KTsgLy8gdGhpcyBjYW4gYmUgZG9uZSBhc3luY2hyb25vdXNseSB3aXRob3V0IGFmZmVjdGluZyB0aGUgb3RoZXJzXG5cdH1cblxuXHRhc3luYyBTYXZlKHNvdXJjZUFuZFZhdWx0OiBTb3VyY2VBbmRWYXVsdCkge1xuXHRcdGNvbnN0IHNvdXJjZUZvbGRlciA9IHNvdXJjZUFuZFZhdWx0LnNvdXJjZUZvbGRlcjtcblx0XHRjb25zdCB2YXVsdCA9IHNvdXJjZUFuZFZhdWx0LnZhdWx0O1xuXHRcdGNvbnN0IGZpbGVQYXRoID0gc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvJyArIHRoaXMuaWQgKyAnLmpzb24nO1xuXHRcdGNvbnN0IGpzb25EYXRhID0gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG5cdFx0Y29uc3QgdEZpbGUgPSB2YXVsdC5nZXRGaWxlQnlQYXRoKGZpbGVQYXRoKTtcblx0XHRpZiAodEZpbGUgPT09IG51bGwpIHtcblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChmaWxlUGF0aCk7XG5cdFx0XHRhd2FpdCB2YXVsdC5hZGFwdGVyLndyaXRlKG5vcm1hbGl6ZWRQYXRoLCBqc29uRGF0YSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGF3YWl0IHZhdWx0Lm1vZGlmeSh0RmlsZSwganNvbkRhdGEpO1xuXHR9XG59XG4iLCAiaW1wb3J0IHsgbm9ybWFsaXplUGF0aCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5pbXBvcnQgeyBSZWFsRmlsZSB9IGZyb20gXCIuL3JlYWwtZmlsZVwiO1xuXG5leHBvcnQgY2xhc3MgU2luZ2xlTWVkaWFGaWxlIGV4dGVuZHMgUmVhbEZpbGUge1xuXHRcblx0cHJpdmF0ZSBleHRlbnNpb25OYW1lOiBzdHJpbmc7XG5cdFxuXHRnZXQgbWVkaWFUeXBlKCk6IHN0cmluZyB7XG5cdFx0c3dpdGNoICh0aGlzLmV4dGVuc2lvbk5hbWUpIHtcblx0XHRcdGNhc2UgJ3BuZyc6XG5cdFx0XHRjYXNlICdqcGcnOlxuXHRcdFx0Y2FzZSAnd2VicCc6XG5cdFx0XHRjYXNlICdoZWljJzpcblx0XHRcdGNhc2UgJ2dpZic6XG5cdFx0XHRcdHJldHVybiAnSW1hZ2UnO1xuXHRcdFx0Y2FzZSAnbXA0Jzpcblx0XHRcdGNhc2UgJ01QNCc6XG5cdFx0XHRjYXNlICdtb3YnOlxuXHRcdFx0Y2FzZSAnTU9WJzpcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiAnVmlkZW8nO1xuXHRcdH1cblx0fVxuXG5cdG92ZXJyaWRlIGFzeW5jIGdldFNyYyhzbnY6IFNvdXJjZUFuZFZhdWx0KTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBtZWRpYUZpbGUgPSBhd2FpdCB0aGlzLmdldFRGaWxlKHNudik7XG5cdFx0Y29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCBzbnYudmF1bHQucmVhZEJpbmFyeShtZWRpYUZpbGUpO1xuXHRcdGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbYXJyYXlCdWZmZXJdKTtcblx0XHRjb25zdCBtZWRpYVVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdFx0cmV0dXJuIG1lZGlhVXJsO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBnZXRURmlsZShzbnY6IFNvdXJjZUFuZFZhdWx0KTogUHJvbWlzZTxURmlsZT4ge1xuXHRcdGNvbnN0IG1lZGlhUGF0aCA9IGF3YWl0IHRoaXMuZ2V0UGF0aChzbnYpO1xuXHRcdGxldCBtZWRpYUZpbGUgPSBzbnYudmF1bHQuZ2V0RmlsZUJ5UGF0aChtZWRpYVBhdGgpO1xuXHRcdGlmIChtZWRpYUZpbGUgPT09IG51bGwpIHtcblx0XHRcdG1lZGlhRmlsZSA9IHNudi52YXVsdC5nZXRGaWxlQnlQYXRoKG1lZGlhUGF0aCArICcuJyArIHRoaXMuZXh0ZW5zaW9uTmFtZSk7XG5cdFx0XHRpZiAobWVkaWFGaWxlID09PSBudWxsKSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdGaWxlIG5vdCBmb3VuZCBhdCBwYXRoOiAnICsgbWVkaWFQYXRoICsgJyBvciAnICsgbWVkaWFQYXRoICsgJy4nICsgdGhpcy5leHRlbnNpb25OYW1lKTtcblx0XHRcdH1cblx0XHRcdHNudi52YXVsdC5yZW5hbWUobWVkaWFGaWxlLCBtZWRpYVBhdGgpO1xuXHRcdH1cblx0XHRyZXR1cm4gbWVkaWFGaWxlO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBnZXRQYXRoKHNudjogU291cmNlQW5kVmF1bHQpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IHNvdXJjZUZvbGRlciA9IHNudi5zb3VyY2VGb2xkZXI7XG5cdFx0cmV0dXJuIHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyB0aGlzLmlkICsgJyBBY3R1YWwgRmlsZSc7XG5cdH1cblxuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudjogU291cmNlQW5kVmF1bHQsIGZpbGVUeXBlOiBzdHJpbmcsIHBhcmVudEZvbGRlcklEOiBudW1iZXIsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8U2luZ2xlTWVkaWFGaWxlPiB7XG5cdFx0Y29uc3QgbmV3TWVkaWFGaWxlID0gPFNpbmdsZU1lZGlhRmlsZT4gKGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCwgbmFtZSkpO1xuXHRcdG5ld01lZGlhRmlsZS5leHRlbnNpb25OYW1lID0gJyc7XG5cdFx0cmV0dXJuIG5ld01lZGlhRmlsZTtcblx0fVxuXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xuXG5cdFx0Y29uc3QgaW1hZ2VEaXNwbGF5Q29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xuXHRcdGltYWdlRGlzcGxheUNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0NoYW5nZSBmaWxlJyB9ICk7XG5cdFx0Y29uc3QgbmV3RmlsZUlucHV0ID0gaW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2ZpbGUnIH0gKTtcblxuXHRcdGF3YWl0IHRoaXMuRGlzcGxheU1lZGlhT25seShpbWFnZURpc3BsYXlDb250YWluZXIsIHNudik7XG5cdFx0XG5cdFx0bmV3RmlsZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3Qgb2xkRmlsZSA9IGF3YWl0IHRoaXMuZ2V0VEZpbGUoc252KTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRhd2FpdCBzbnYudmF1bHQuZGVsZXRlKG9sZEZpbGUpO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZU5ld0ZpbGUoc252LCBuZXdGaWxlSW5wdXQpO1xuXHRcdFx0XHRcdHRoaXMuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRjb25zb2xlLmxvZygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgU2F2ZU5ld0ZpbGUoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50KSB7XG5cdFx0Y29uc3QgZmlsZUFycmF5ID0gZmlsZUlucHV0LmZpbGVzO1xuXHRcdGlmIChmaWxlQXJyYXkgPT09IG51bGwpIHtcblx0XHRcdHRocm93IEVycm9yKFwibm8gZmlsZSB3YXMgc2VsZWN0ZWRcIik7XG5cdFx0fVxuXHRcdGNvbnN0IG1lZGlhRmlsZSA9IGZpbGVBcnJheVswXTtcblx0XHRhd2FpdCB0aGlzLlNldEZpbGVUbyhzbnYsIG1lZGlhRmlsZSk7XG5cdH1cblxuXHRhc3luYyBTZXRGaWxlVG8oc252OiBTb3VyY2VBbmRWYXVsdCwgbWVkaWFGaWxlOiBGaWxlKSB7XG5cdFx0Y29uc3QgcGFydHNPZlBhdGggPSBtZWRpYUZpbGUubmFtZS5zcGxpdCgnLicpO1xuXHRcdGNvbnN0IGV4dGVuc2lvbiA9IHBhcnRzT2ZQYXRoW3BhcnRzT2ZQYXRoLmxlbmd0aCAtIDFdO1xuXHRcdHRoaXMuZmlsZU5hbWUgPSBwYXJ0c09mUGF0aFswXTtcblx0XHR0aGlzLmV4dGVuc2lvbk5hbWUgPSBleHRlbnNpb247XG5cdFx0Y29uc3QgcGF0aCA9IHNudi5zb3VyY2VGb2xkZXIudmF1bHRQYXRoICsgJy8nICsgdGhpcy5pZCArICcgQWN0dWFsIEZpbGUnO1xuXHRcdGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoKTtcblx0XHRhd2FpdCBzbnYudmF1bHQuYWRhcHRlci53cml0ZUJpbmFyeShub3JtYWxpemVkUGF0aCwgYXdhaXQgbWVkaWFGaWxlLmFycmF5QnVmZmVyKCkpO1xuXHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHR9XG5cblx0YXN5bmMgRGlzcGxheU1lZGlhT25seShtZWRpYURpdjogSFRNTERpdkVsZW1lbnQsIHNudjogU291cmNlQW5kVmF1bHQpIHtcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xuXHRcdGlmICh0aGlzLm1lZGlhVHlwZSA9PT0gJ0ltYWdlJykge1xuXHRcdFx0Y29uc3QgaW1hZ2VFbGVtZW50ID0gbWVkaWFEaXYuY3JlYXRlRWwoJ2ltZycpO1xuXHRcdFx0aW1hZ2VFbGVtZW50LnNyYyA9IGF3YWl0IHRoaXMuZ2V0U3JjKHNudik7XG5cdFx0XHRpbWFnZUVsZW1lbnQuc3R5bGUub2JqZWN0Rml0ID0gJ2NvbnRhaW4nO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCB2aWRlb0VsZW1lbnQgPSBtZWRpYURpdi5jcmVhdGVFbCgndmlkZW8nKTtcblx0XHRcdHZpZGVvRWxlbWVudC5zcmMgPSBhd2FpdCB0aGlzLmdldFNyYyhzbnYpO1xuXHRcdFx0dmlkZW9FbGVtZW50LmNvbnRyb2xzID0gdHJ1ZTtcblx0XHRcdHZpZGVvRWxlbWVudC5sb29wID0gdHJ1ZTtcblx0XHRcdHZpZGVvRWxlbWVudC5hdXRvcGxheSA9IHRydWU7XG5cdFx0XHR2aWRlb0VsZW1lbnQuc3R5bGUub2JqZWN0Rml0ID0gJ2NvbnRhaW4nO1xuXHRcdH1cblx0fVxufVxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xyXG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlYWxGaWxlIGV4dGVuZHMgQ0ZFRmlsZSB7XHJcblx0YWJzdHJhY3QgZ2V0U3JjKHNvdXJjZUFuZFZhdWx0OiBTb3VyY2VBbmRWYXVsdCk6IFByb21pc2U8c3RyaW5nPjtcclxuXHRhc3luYyBEaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2OiBIVE1MRGl2RWxlbWVudCwgc252OiBTb3VyY2VBbmRWYXVsdCkge1xyXG5cdFx0bWVkaWFEaXYuZW1wdHkoKTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xuaW1wb3J0IHsgQ0ZFRmlsZUhhbmRsZXIgfSBmcm9tIFwiLi9jZmUtZmlsZS1oYW5kbGVyXCI7XG5pbXBvcnQgeyBTaW5nbGVNZWRpYUZpbGUgfSBmcm9tIFwiLi9zaW5nbGUtbWVkaWEtZmlsZVwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcblxuLyoqXG4gKiBBIGNoaWxkIGNsYXNzIG9mIHRoZSBDRkVGaWxlIGNsYXNzLiBSZXByZXNlbnRzIGEgZm9sZGVyIHdpdGhpbiB0aGUgU291cmNlRm9sZGVyLlxuICovXG5leHBvcnQgY2xhc3MgRm9sZGVyIGV4dGVuZHMgQ0ZFRmlsZSB7XG5cdC8qKlxuXHQgKiBUaGUgSURzIG9mIGZpbGVzIGNvbnRhaW5lZCBpbiB0aGlzIGZvbGRlclxuXHQgKi9cblx0Y29udGFpbmVkRmlsZUlEczogbnVtYmVyW107XG5cblx0LyoqXG5cdCAqIEBvdmVycmlkZSBGb2xkZXIgbGF5ZXI6XG5cdCAqIFxuXHQgKiBpbml0aWFsaXplcyB0aGUgY29udGFpbmVkIGZpbGUgaWRzIGFycmF5IGZvciB0aGUgZm9sZGVyIG9iamVjdFxuXHQgKi9cblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPEZvbGRlcj4ge1xuXHRcdGNvbnN0IHVuZmluaXNoZWRGb2xkZXIgPSA8Rm9sZGVyPiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklELCBuYW1lKSk7XG5cdFx0dW5maW5pc2hlZEZvbGRlci5jb250YWluZWRGaWxlSURzID0gW107XG5cdFx0cmV0dXJuIHVuZmluaXNoZWRGb2xkZXI7XG5cdH1cblxuXHRvdmVycmlkZSBhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0YXdhaXQgc3VwZXIuRGlzcGxheShzbnYsIG1haW5EaXYpO1xuXHRcdGNvbnN0IGNyZWF0ZUJ1dHRvbnNEaXYgPSBtYWluRGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdGNvbnN0IG5ld0ZpbGVCdXR0b24gPSBjcmVhdGVCdXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDcmVhdGUgTmV3IEZpbGUnIH0gKTtcblx0XHRuZXdGaWxlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLkxvYWRDcmVhdGVGaWxlVUkoc252LCBtYWluRGl2KTtcblx0XHR9XG5cdFx0Y29uc3QgbWVkaWFGaWxlc0J1dHRvbiA9IGNyZWF0ZUJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1VwbG9hZCBNdWx0aXBsZSBJbWFnZXMgLyBWaWRlb3MnIH0gKTtcblx0XHRtZWRpYUZpbGVzQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLkxvYWRGaWxlU2VsZWN0aW9uVUkoc252LCBtYWluRGl2KTtcblx0XHR9XG5cdFx0Y29uc3QgZm9sZGVyRGlzcGxheUNvbnRhaW5lciA9IG1haW5EaXYuY3JlYXRlRGl2KCdjZmUtZ3JpZCcpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250YWluZWRGaWxlSURzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBjb250YWluZWRGaWxlID0gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCB0aGlzLmNvbnRhaW5lZEZpbGVJRHNbaV0pO1xuXHRcdFx0aWYgKGNvbnRhaW5lZEZpbGUgIT09IG51bGwpIHtcblx0XHRcdFx0YXdhaXQgY29udGFpbmVkRmlsZS5EaXNwbGF5VGh1bWJuYWlsKHNudiwgZm9sZGVyRGlzcGxheUNvbnRhaW5lci5jcmVhdGVEaXYoKSwgbWFpbkRpdik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRwcml2YXRlIExvYWRDcmVhdGVGaWxlVUkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRjb25zdCBwb3BVcENvbnRhaW5lciA9IG1haW5EaXYuY3JlYXRlRGl2KCd2Ym94IGNmZS1wb3B1cCcpO1xuXHRcdGNvbnN0IHdyYXBwZXJEaXYgPSBwb3BVcENvbnRhaW5lci5jcmVhdGVEaXYoKTtcblx0XHR3cmFwcGVyRGl2LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblx0XHRjb25zdCBleGl0QnV0dG9uID0gd3JhcHBlckRpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnWCcsIGNsczogJ2NmZS1yZW1vdmUtYnV0dG9uJyB9ICk7XG5cdFx0ZXhpdEJ1dHRvbi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0ZXhpdEJ1dHRvbi5zdHlsZS50b3AgPSAnMCUnO1xuXHRcdGV4aXRCdXR0b24uc3R5bGUucmlnaHQgPSAnMCUnO1xuXHRcdGV4aXRCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdHBvcFVwQ29udGFpbmVyLnJlbW92ZSgpO1xuXHRcdH1cblx0XHRwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0Nob29zZSBhIEZpbGUgVHlwZSB0byBjcmVhdGU6JyB9ICk7XG5cdFx0Y29uc3QgZmlsZVR5cGVEcm9wZG93biA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdzZWxlY3QnKTtcblx0XHRwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0ZpbGUgTmFtZTonIH0gKTtcblx0XHRjb25zdCBuYW1lSW5wdXQgPSBwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICdVbm5hbWVkJyB9ICk7XG5cdFx0cG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdQYXJlbnQgRm9sZGVyIElEOicgfSApO1xuXHRcdGNvbnN0IHBhcmVudEZvbGRlcklESW5wdXQgPSBwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICcnICsgdGhpcy5pZCB9ICk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBDRkVGaWxlSGFuZGxlci5Lbm93bkZpbGVUeXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3Qgb3B0aW9uID0gZmlsZVR5cGVEcm9wZG93bi5jcmVhdGVFbCgnb3B0aW9uJyk7XG5cdFx0XHRvcHRpb24udmFsdWUgPSBDRkVGaWxlSGFuZGxlci5Lbm93bkZpbGVUeXBlc1tpXTtcblx0XHRcdG9wdGlvbi50ZXh0ID0gQ0ZFRmlsZUhhbmRsZXIuS25vd25GaWxlVHlwZXNbaV07XG5cdFx0XHRmaWxlVHlwZURyb3Bkb3duLm9wdGlvbnMuYWRkKG9wdGlvbik7XG5cdFx0fVxuXHRcdGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDcmVhdGUnIH0gKTtcblx0XHRzdWJtaXRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGF3YWl0IENGRUZpbGVIYW5kbGVyLkNyZWF0ZU5ldyhzbnYsIGZpbGVUeXBlRHJvcGRvd24udmFsdWUsIHBhcnNlSW50KHBhcmVudEZvbGRlcklESW5wdXQudmFsdWUpLCBuYW1lSW5wdXQudmFsdWUpO1xuXHRcdFx0ZXhpdEJ1dHRvbi5jbGljaygpO1xuXHRcdFx0Y29uc3QgcmVzZXR0ZWRGb2xkZXIgPSBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMuaWQpO1xuXHRcdFx0YXdhaXQgcmVzZXR0ZWRGb2xkZXIuRGlzcGxheShzbnYsIG1haW5EaXYpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgTG9hZEZpbGVTZWxlY3Rpb25VSShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGNvbnN0IHBvcFVwQ29udGFpbmVyID0gbWFpbkRpdi5jcmVhdGVEaXYoJ3Zib3ggY2ZlLXBvcHVwJyk7XG5cdFx0cG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdDaG9vc2UgeW91ciBmaWxlcycgfSApO1xuXHRcdGNvbnN0IGZpbGVJbnB1dCA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2ZpbGUnIH0gKTtcblx0XHRmaWxlSW5wdXQubXVsdGlwbGUgPSB0cnVlO1xuXHRcdHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnUGFyZW50IEZvbGRlciBJRDogJyB9ICk7XG5cdFx0Y29uc3QgcGFyZW50Rm9sZGVySURJbnB1dCA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogJycgKyB0aGlzLmlkIH0gKTtcblx0XHRjb25zdCBleGl0QnV0dG9uID0gcG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1gnLCBjbHM6ICdjZmUtZXhpdC1idXR0b24nIH0gKTtcblx0XHRleGl0QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRwb3BVcENvbnRhaW5lci5yZW1vdmUoKTtcblx0XHR9XG5cdFx0Y29uc3Qgc3VibWl0QnV0dG9uID0gcG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0NyZWF0ZScgfSApO1xuXHRcdHN1Ym1pdEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0Y29uc3QgZmlsZUFycmF5ID0gZmlsZUlucHV0LmZpbGVzO1xuXHRcdFx0Y29uc3QgcGFyZW50Rm9sZGVySUQgPSBwYXJzZUludChwYXJlbnRGb2xkZXJJRElucHV0LnZhbHVlKTtcblx0XHRcdGlmIChmaWxlQXJyYXkgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlQXJyYXkubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb25zdCBjZmVGaWxlID0gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuQ3JlYXRlTmV3KHNudiwgJ1NpbmdsZSBNZWRpYSBGaWxlJywgcGFyZW50Rm9sZGVySUQsIGZpbGVBcnJheVtpXS5uYW1lKTtcblx0XHRcdFx0XHRjb25zdCBtZWRpYUZpbGUgPSBPYmplY3QuYXNzaWduKG5ldyBTaW5nbGVNZWRpYUZpbGUoKSwgY2ZlRmlsZSk7XG5cdFx0XHRcdFx0YXdhaXQgbWVkaWFGaWxlLlNldEZpbGVUbyhzbnYsIGZpbGVBcnJheVtpXSk7XG5cdFx0XHRcdFx0YXdhaXQgbWVkaWFGaWxlLlNhdmUoc252KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRleGl0QnV0dG9uLmNsaWNrKCk7XG5cdFx0XHRcdGNvbnN0IHJlc2V0dGVkRm9sZGVyID0gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCB0aGlzLmlkKTtcblx0XHRcdFx0YXdhaXQgcmVzZXR0ZWRGb2xkZXIuRGlzcGxheShzbnYsIG1haW5EaXYpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xuaW1wb3J0IHsgQ0ZFRmlsZUhhbmRsZXIgfSBmcm9tIFwiLi9jZmUtZmlsZS1oYW5kbGVyXCI7XG5pbXBvcnQgeyBSZWFsRmlsZSB9IGZyb20gXCIuL3JlYWwtZmlsZVwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcblxuZXhwb3J0IGNsYXNzIFBsYXlsaXN0IGV4dGVuZHMgQ0ZFRmlsZSB7XG5cdHByaXZhdGUgY3VycmVudFZpZGVvSW5kZXg6IG51bWJlcjtcblx0dmlkZW9JRHM6IG51bWJlcltdO1xuXG5cdHByaXZhdGUgdmlkZW9PcmRlcjogc3RyaW5nO1xuXG5cdHByaXZhdGUgc3RhdGljIGdldE5leHRWaWRlb0lESW5PcmRlcihwbGF5bGlzdDogUGxheWxpc3QpIHtcblx0XHRsZXQgbmV4dFZpZGVvSW5kZXggPSBwbGF5bGlzdC5jdXJyZW50VmlkZW9JbmRleCArIDE7XG5cdFx0aWYgKG5leHRWaWRlb0luZGV4ID49IHBsYXlsaXN0LnZpZGVvSURzLmxlbmd0aCkge1xuXHRcdFx0bmV4dFZpZGVvSW5kZXggPSAwO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV4dFZpZGVvSW5kZXg7XG5cdH1cblx0cHJpdmF0ZSBzdGF0aWMgZ2V0TmV4dFZpZGVvSURTaHVmZmxlZChwbGF5bGlzdDogUGxheWxpc3QpIHtcblx0XHRsZXQgbmV4dFZpZGVvSW5kZXggPSBNYXRoLnJhbmRvbSgpICogcGxheWxpc3QudmlkZW9JRHMubGVuZ3RoO1xuXHRcdG5leHRWaWRlb0luZGV4ID0gTWF0aC5mbG9vcihuZXh0VmlkZW9JbmRleCk7XG5cdFx0cmV0dXJuIG5leHRWaWRlb0luZGV4O1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgYXN5bmMgbG9hZE5leHRWaWRlbyhzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQsIHBsYXlsaXN0OiBQbGF5bGlzdCwgdmlkZW9FbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50KSB7XG5cdFx0aWYgKHBsYXlsaXN0LnZpZGVvT3JkZXIgPT09ICdzaHVmZmxlZCcpIHtcblx0XHRcdHBsYXlsaXN0LmN1cnJlbnRWaWRlb0luZGV4ID0gUGxheWxpc3QuZ2V0TmV4dFZpZGVvSURTaHVmZmxlZChwbGF5bGlzdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBsYXlsaXN0LmN1cnJlbnRWaWRlb0luZGV4ID0gUGxheWxpc3QuZ2V0TmV4dFZpZGVvSURJbk9yZGVyKHBsYXlsaXN0KTtcblx0XHR9XG5cdFx0Y29uc3QgbmV4dFZpZGVvID0gPFJlYWxGaWxlPiAoYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc291cmNlQW5kVmF1bHQsIHBsYXlsaXN0LnZpZGVvSURzW3BsYXlsaXN0LmN1cnJlbnRWaWRlb0luZGV4XSkpO1xuXG5cdFx0dmlkZW9FbGVtZW50LnNyYyA9IGF3YWl0IG5leHRWaWRlby5nZXRTcmMoc291cmNlQW5kVmF1bHQpO1xuXHR9XG5cblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFBsYXlsaXN0PiB7XG5cdFx0Y29uc3QgbmV3UGxheWxpc3RGaWxlID0gPFBsYXlsaXN0PiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklELCBuYW1lKSk7XG5cdFx0bmV3UGxheWxpc3RGaWxlLnZpZGVvSURzID0gW107XG5cdFx0cmV0dXJuIG5ld1BsYXlsaXN0RmlsZTtcblx0fVxuXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xuXHRcdHRoaXMuY3VycmVudFZpZGVvSW5kZXggPSAwO1xuXHRcdGNvbnN0IHZpZGVvRGlzcGxheUNvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoJ2NmZS1kaXNwbGF5LXZpZGVvJyk7XG5cdFx0Y29uc3QgdmlkZW9FbGVtZW50ID0gdmlkZW9EaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCd2aWRlbycpO1xuXHRcdGNvbnN0IGJ1dHRvbnNDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0Y29uc3QgaGlkZUJ1dHRvbiA9IGJ1dHRvbnNDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ2hpZGUgdmlkZW8nIH0gKTtcblx0XHRoaWRlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRpZiAoaGlkZUJ1dHRvbi50ZXh0Q29udGVudCA9PT0gJ2hpZGUgdmlkZW8nKSB7XG5cdFx0XHRcdGhpZGVCdXR0b24udGV4dENvbnRlbnQgPSAnc2hvdyB2aWRlbyc7XG5cdFx0XHRcdHZpZGVvRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGlkZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdoaWRlIHZpZGVvJztcblx0XHRcdFx0dmlkZW9FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IHNodWZmbGVCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdzaHVmZmxlJyB9ICk7XG5cdFx0dGhpcy52aWRlb09yZGVyID0gJ2luIG9yZGVyJztcblx0XHRzaHVmZmxlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRpZiAoc2h1ZmZsZUJ1dHRvbi50ZXh0Q29udGVudCA9PT0gJ3NodWZmbGUnKSB7XG5cdFx0XHRcdHNodWZmbGVCdXR0b24udGV4dENvbnRlbnQgPSAnZ28gaW4gb3JkZXInO1xuXHRcdFx0XHR0aGlzLnZpZGVvT3JkZXIgPSAnc2h1ZmZsZWQnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2h1ZmZsZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdzaHVmZmxlJztcblx0XHRcdFx0dGhpcy52aWRlb09yZGVyID0gJ2luIG9yZGVyJztcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgbmV4dEJ1dHRvbiA9IGJ1dHRvbnNDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ25leHQgdmlkZW8nIH0gKTtcblx0XHRuZXh0QnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRhd2FpdCBQbGF5bGlzdC5sb2FkTmV4dFZpZGVvKHNudiwgdGhpcywgdmlkZW9FbGVtZW50KTtcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZmlyc3RWaWRlbyA9IDxSZWFsRmlsZT4gKGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgdGhpcy52aWRlb0lEc1t0aGlzLmN1cnJlbnRWaWRlb0luZGV4XSkpO1xuXHRcdFx0dmlkZW9FbGVtZW50LnNyYyA9IGF3YWl0IGZpcnN0VmlkZW8uZ2V0U3JjKHNudik7XG5cdFx0XHR2aWRlb0VsZW1lbnQuYXV0b3BsYXkgPSB0cnVlO1xuXHRcdFx0dmlkZW9FbGVtZW50LmNvbnRyb2xzID0gdHJ1ZTtcblx0XHRcdHZpZGVvRWxlbWVudC5vbnRpbWV1cGRhdGUgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGlmICh2aWRlb0VsZW1lbnQuZW5kZWQpIHtcblx0XHRcdFx0XHRhd2FpdCBQbGF5bGlzdC5sb2FkTmV4dFZpZGVvKHNudiwgdGhpcywgdmlkZW9FbGVtZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRjb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdDaGFuZ2UgZmlsZXMnIH0gKTtcblx0XHRcdGxldCBjb3VudCA9IDA7XG5cdFx0XHRjb25zdCBtZWRpYUlESW5wdXREaXYgPSBjb250YWluZXIuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0XHRjb25zdCBuZXdGaWxlQnV0dG9uID0gY29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdBZGQgRmlsZScgfSApO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZpZGVvSURzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGNvdW50O1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHRjb25zdCBtZWRpYUlERGl2ID0gbWVkaWFJRElucHV0RGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdFx0XHRjb25zdCBpZElucHV0ID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICcnICsgdGhpcy52aWRlb0lEc1tjdXJyZW50SW5kZXhdIH0gKTtcblx0XHRcdFx0Y29uc3QgZGVsZXRlQnV0dG9uID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnZGVsZXRlJyB9ICk7XG5cdFx0XHRcdGRlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0XHRcdG1lZGlhSUREaXYucmVtb3ZlKCk7XG5cdFx0XHRcdFx0dGhpcy52aWRlb0lEcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcblx0XHRcdFx0XHR0aGlzLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlkSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy52aWRlb0lEc1tjdXJyZW50SW5kZXhdID0gcGFyc2VJbnQoaWRJbnB1dC52YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5TYXZlKHNudik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG5ld0ZpbGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdFx0Y29uc3QgY3VycmVudEluZGV4ID0gY291bnQ7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdGNvbnN0IG1lZGlhSUREaXYgPSBtZWRpYUlESW5wdXREaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0XHRcdGNvbnN0IGlkSW5wdXQgPSBtZWRpYUlERGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnIH0gKTtcblx0XHRcdFx0Y29uc3QgZGVsZXRlQnV0dG9uID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnZGVsZXRlJyB9ICk7XG5cdFx0XHRcdGRlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0XHRcdG1lZGlhSUREaXYucmVtb3ZlKCk7XG5cdFx0XHRcdFx0dGhpcy52aWRlb0lEcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcblx0XHRcdFx0XHR0aGlzLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlkSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy52aWRlb0lEc1tjdXJyZW50SW5kZXhdID0gcGFyc2VJbnQoaWRJbnB1dC52YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5TYXZlKHNudik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBDRkVGaWxlSGFuZGxlciB9IGZyb20gXCIuL2NmZS1maWxlLWhhbmRsZXJcIjtcbmltcG9ydCB7IFJlYWxGaWxlIH0gZnJvbSBcIi4vcmVhbC1maWxlXCI7XG5pbXBvcnQgeyBTaW5nbGVNZWRpYUZpbGUgfSBmcm9tIFwiLi9zaW5nbGUtbWVkaWEtZmlsZVwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcblxuZXhwb3J0IGNsYXNzIFZhcmlhbnRNZWRpYUZpbGUgZXh0ZW5kcyBSZWFsRmlsZSB7XG5cblx0cHJpdmF0ZSB2YXJpYW50SURzOiBudW1iZXJbXTtcblxuXHRhc3luYyBnZXRTcmMoc252OiBTb3VyY2VBbmRWYXVsdCwgaW5kZXg6IG51bWJlciB8IG51bGwgPSBudWxsKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRpZiAoaW5kZXggPT09IG51bGwpIHtcblx0XHRcdGluZGV4ID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSkgKiB0aGlzLnZhcmlhbnRJRHMubGVuZ3RoKTtcblx0XHR9XG5cdFx0Y29uc3QgY29udGFpbmVkTWVkaWEgPSA8U2luZ2xlTWVkaWFGaWxlPiBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMudmFyaWFudElEc1tpbmRleF0pO1xuXHRcdHJldHVybiBhd2FpdCBjb250YWluZWRNZWRpYS5nZXRTcmMoc252KTtcblx0fVxuXG5cdHN0YXRpYyBvdmVycmlkZSBhc3luYyBDcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZVR5cGU6IHN0cmluZywgcGFyZW50Rm9sZGVySUQ6IG51bWJlciwgbmFtZTogc3RyaW5nKTogUHJvbWlzZTxWYXJpYW50TWVkaWFGaWxlPiB7XG5cdFx0Y29uc3QgbmV3TWVkaWFGaWxlID0gPFZhcmlhbnRNZWRpYUZpbGU+IChhd2FpdCBzdXBlci5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252LCBmaWxlVHlwZSwgcGFyZW50Rm9sZGVySUQsIG5hbWUpKTtcblx0XHRuZXdNZWRpYUZpbGUudmFyaWFudElEcyA9IFtdO1xuXHRcdHJldHVybiBuZXdNZWRpYUZpbGU7XG5cdH1cblxuXHRvdmVycmlkZSBhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcblxuXHRcdGNvbnN0IGltYWdlRGlzcGxheUNvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoJ3Zib3gnKTtcblx0XHRpbWFnZURpc3BsYXlDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdDaGFuZ2UgZmlsZXMnIH0gKTtcblx0XHRjb25zdCBtZWRpYUlESW5wdXREaXYgPSBpbWFnZURpc3BsYXlDb250YWluZXIuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0Y29uc3QgbmV3RmlsZUJ1dHRvbiA9IGltYWdlRGlzcGxheUNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQWRkIEZpbGUnIH0gKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFyaWFudElEcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY3VycmVudEluZGV4ID0gaTtcblx0XHRcdGNvbnN0IG1lZGlhSUREaXYgPSBtZWRpYUlESW5wdXREaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0XHRjb25zdCBpZElucHV0ID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICcnICsgdGhpcy52YXJpYW50SURzW2N1cnJlbnRJbmRleF0gfSApO1xuXHRcdFx0Y29uc3QgZGVsZXRlQnV0dG9uID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnZGVsZXRlJyB9ICk7XG5cdFx0XHRkZWxldGVCdXR0b24uY2xhc3NOYW1lID0gJ2NmZS1yZW1vdmUtYnV0dG9uJztcblx0XHRcdGRlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRtZWRpYUlERGl2LnJlbW92ZSgpO1xuXHRcdFx0XHR0aGlzLnZhcmlhbnRJRHMuc3BsaWNlKGN1cnJlbnRJbmRleCwgMSk7XG5cdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0XHRhd2FpdCB0aGlzLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xuXHRcdFx0fVxuXHRcdFx0aWRJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdFx0dGhpcy52YXJpYW50SURzW2N1cnJlbnRJbmRleF0gPSBwYXJzZUludChpZElucHV0LnZhbHVlKTtcblx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG5ld0ZpbGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMudmFyaWFudElEcy5wdXNoKC0xKTtcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcblx0XHR9XG5cdFx0Y29uc3QgbWVkaWFEaXYgPSBpbWFnZURpc3BsYXlDb250YWluZXIuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0XG5cdFx0YXdhaXQgdGhpcy5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xuXHR9XG5cdGFzeW5jIERpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXY6IEhUTUxEaXZFbGVtZW50LCBzbnY6IFNvdXJjZUFuZFZhdWx0LCBpbmRleCA9IC0xKSB7XG5cdFx0Ly8gVGhpcyBjYWxsIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBjb250YWluZWRNZWRpYS5EaXNwbGF5TWVkaWFPbmx5KCkgY2FsbHMgaXQgYW55d2F5XG5cdFx0Ly8gYXdhaXQgc3VwZXIuRGlzcGxheU1lZGlhT25seVxuXHRcdGlmIChpbmRleCA9PT0gLTEpIHtcblx0XHRcdGluZGV4ID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSkgKiB0aGlzLnZhcmlhbnRJRHMubGVuZ3RoKTtcblx0XHR9XG5cdFx0Y29uc3QgY29udGFpbmVkTWVkaWEgPSA8U2luZ2xlTWVkaWFGaWxlPiBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMudmFyaWFudElEc1tpbmRleF0pO1xuXHRcdGF3YWl0IGNvbnRhaW5lZE1lZGlhLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBDRkVGaWxlIH0gZnJvbSBcIi4vY2ZlLWZpbGVcIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5pbXBvcnQgeyBTb3VyY2VGb2xkZXIgfSBmcm9tIFwiLi9zb3VyY2UtZm9sZGVyXCI7XG5cbi8qKlxuICogQSBjaGlsZCBjbGFzcyBvZiB0aGUgQ0ZFRmlsZSBjbGFzcy4gUmVwcmVzZW50cyBhIGZvbGRlciB3aXRoaW4gdGhlIFNvdXJjZUZvbGRlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFNvdXJjZUZvbGRlclNob3J0Y3V0IGV4dGVuZHMgQ0ZFRmlsZSB7XG5cdC8qKlxuXHQgKiBUaGUgSURzIG9mIGZpbGVzIGNvbnRhaW5lZCBpbiB0aGlzIGZvbGRlclxuXHQgKi9cblx0cGF0aFRvT3RoZXJTb3VyY2U6IHN0cmluZztcblxuXHQvKipcblx0ICogQG92ZXJyaWRlIEZvbGRlciBsYXllcjpcblx0ICogXG5cdCAqIGluaXRpYWxpemVzIHRoZSBjb250YWluZWQgZmlsZSBpZHMgYXJyYXkgZm9yIHRoZSBmb2xkZXIgb2JqZWN0XG5cdCAqL1xuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudjogU291cmNlQW5kVmF1bHQsIGZpbGVUeXBlOiBzdHJpbmcsIHBhcmVudEZvbGRlcklEOiBudW1iZXIsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8U291cmNlRm9sZGVyU2hvcnRjdXQ+IHtcblx0XHRjb25zdCB1bmZpbmlzaGVkRm9sZGVyID0gPFNvdXJjZUZvbGRlclNob3J0Y3V0PiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklELCBuYW1lKSk7XG5cdFx0dW5maW5pc2hlZEZvbGRlci5wYXRoVG9PdGhlclNvdXJjZSA9ICcnO1xuXHRcdHJldHVybiB1bmZpbmlzaGVkRm9sZGVyO1xuXHR9XG5cblx0b3ZlcnJpZGUgYXN5bmMgRGlzcGxheShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBtYWluRGl2KTtcblx0XHRjb25zdCBpbnB1dERpdiA9IG1haW5EaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0aW5wdXREaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdQYXRoIHRvIE90aGVyIFNvdXJjZSBGb2xkZXInIH0gKTtcblx0XHRjb25zdCBwYXRoSW5wdXQgPSBpbnB1dERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyB9ICk7XG5cdFx0Y29uc3QgZ29CdXR0b24gPSBpbnB1dERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnR28nIH0gKTtcblx0XHRwYXRoSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLnBhdGhUb090aGVyU291cmNlID0gcGF0aElucHV0LnZhbHVlO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0fVxuXHRcdGdvQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBvdGhlclNvdXJjZSA9IGF3YWl0IFNvdXJjZUZvbGRlci5DcmVhdGVPckxvYWRTb3VyY2VGb2xkZXIodGhpcy5wYXRoVG9PdGhlclNvdXJjZSwgc252LnZhdWx0KTtcblx0XHRcdG90aGVyU291cmNlLkRpc3BsYXkobWFpbkRpdiwgc252LnZhdWx0KTtcblx0XHR9XG5cdH1cblx0fVxuIiwgImV4cG9ydCBjbGFzcyBId2F5dSB7XHJcblx0c3RhdGljIERpc3BsYXkoZGl2OiBIVE1MRGl2RWxlbWVudCwgdGV4dCA9ICcnLCBmb250U2l6ZSA9IDIwLCBpc1ZlcnRpY2FsID0gdHJ1ZSk6IEhUTUxFbGVtZW50IHtcclxuXHRcdGNvbnN0IHRleHRFbGVtZW50ID0gZGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiB0ZXh0IH0gKTtcclxuXHRcdHRleHRFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBpc1ZlcnRpY2FsID8gJ0h3YXl1UmVhbCcgOiAnSHdheXVIb3Jpem9udGFsJztcclxuXHRcdHRleHRFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgKyAncHgnO1xyXG5cdFx0aWYgKGlzVmVydGljYWwpIHtcclxuXHRcdFx0dGV4dEVsZW1lbnQuc3R5bGUud3JpdGluZ01vZGUgPSAndmVydGljYWwtbHInO1xyXG5cdFx0XHR0ZXh0RWxlbWVudC5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGV4dEVsZW1lbnQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgQ3JlYXRlVGV4dEFyZWEoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdUZXh0ID0gJycsIGZvbnRTaXplID0gMjAsIGlzVmVydGljYWwgPSB0cnVlKTogSFRNTFRleHRBcmVhRWxlbWVudCB7XHJcblx0XHRjb25zdCB0ZXh0QXJlYSA9IGRpdi5jcmVhdGVFbCgndGV4dGFyZWEnLCB7IHRleHQ6IGV4aXN0aW5nVGV4dCB9ICk7XHJcblx0XHR0ZXh0QXJlYS5zdHlsZS5mb250RmFtaWx5ID0gaXNWZXJ0aWNhbCA/ICdId2F5dVJlYWwnIDogJ0h3YXl1SG9yaXpvbnRhbCc7XHJcblx0XHR0ZXh0QXJlYS5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICsgJ3B4JztcclxuXHRcdGlmIChpc1ZlcnRpY2FsKSB7XHJcblx0XHRcdHRleHRBcmVhLnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHRcdFx0dGV4dEFyZWEuc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xyXG5cdFx0fVxyXG5cdFx0dGV4dEFyZWEuc3BlbGxjaGVjayA9IGZhbHNlO1xyXG5cdFx0cmV0dXJuIHRleHRBcmVhO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIENyZWF0ZVRleHRJbnB1dChkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1RleHQgPSAnJywgZm9udFNpemUgPSAyMCwgaXNWZXJ0aWNhbCA9IHRydWUpOiBIVE1MSW5wdXRFbGVtZW50IHtcclxuXHRcdGNvbnN0IHRleHRJbnB1dCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IGV4aXN0aW5nVGV4dCB9ICk7XHJcblx0XHR0ZXh0SW5wdXQuc3R5bGUuZm9udEZhbWlseSA9IGlzVmVydGljYWwgPyAnSHdheXVSZWFsJyA6ICdId2F5dUhvcml6b250YWwnO1xyXG5cdFx0dGV4dElucHV0LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgKyAncHgnO1xyXG5cdFx0aWYgKGlzVmVydGljYWwpIHtcclxuXHRcdFx0dGV4dElucHV0LnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHRcdFx0dGV4dElucHV0LnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0JztcclxuXHRcdH1cclxuXHRcdHRleHRJbnB1dC5zcGVsbGNoZWNrID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdGV4dElucHV0O1xyXG5cdH1cclxufVxyXG4iLCAiZXhwb3J0IGNsYXNzIFBob3RvTGFuZyB7XHJcblx0c3RhdGljIERpc3BsYXkoZGl2OiBIVE1MRGl2RWxlbWVudCwgdGV4dCA9ICcnLCBmb250U2l6ZSA9IDEwLCBtb3ZlU3BlZWRzOiBudW1iZXJbXSB8IG51bGwgPSBudWxsLCBkdXJhdGlvbnM6IG51bWJlcltdIHwgbnVsbCA9IG51bGwsIGRvTG9vcCA9IGZhbHNlKTogSFRNTEVsZW1lbnQge1xyXG5cdFx0Y29uc3QgbGluZSA9IG5ldyBQaG90b0xpbmUodGV4dCk7XHJcblx0XHRpZiAoIW1vdmVTcGVlZHMpIHtcclxuXHRcdFx0bW92ZVNwZWVkcyA9IFsxMDAsIDI1MCwgNTAwXTtcclxuXHRcdH1cclxuXHRcdGlmICghZHVyYXRpb25zKSB7XHJcblx0XHRcdGR1cmF0aW9ucyA9IFswLCA1MDBdO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgZGlzcGxheURpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHRcdGxpbmUuU3BlYWsoZGlzcGxheURpdiwgZm9udFNpemUsIG1vdmVTcGVlZHMsIGR1cmF0aW9ucywgZG9Mb29wKTtcclxuXHRcdHJldHVybiBkaXNwbGF5RGl2O1xyXG5cdH1cclxuXHRzdGF0aWMgQ3JlYXRlVGV4dEFyZWEoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdUZXh0ID0gJycsIGZvbnRTaXplID0gMTcuNSk6IEhUTUxUZXh0QXJlYUVsZW1lbnQge1xyXG5cdFx0Y29uc3QgdGV4dEFyZWEgPSBkaXYuY3JlYXRlRWwoJ3RleHRhcmVhJywgeyB0ZXh0OiBleGlzdGluZ1RleHQgfSApO1xyXG5cdFx0dGV4dEFyZWEuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZSArICdweCc7XHJcblx0XHR0ZXh0QXJlYS5zcGVsbGNoZWNrID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdGV4dEFyZWE7XHJcblx0fVxyXG5cdHN0YXRpYyBDcmVhdGVUZXh0SW5wdXQoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdUZXh0ID0gJycsIGZvbnRTaXplID0gMTcuNSk6IEhUTUxJbnB1dEVsZW1lbnQge1xyXG5cdFx0Y29uc3QgdGV4dElucHV0ID0gZGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogZXhpc3RpbmdUZXh0IH0gKTtcclxuXHRcdHRleHRJbnB1dC5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICsgJ3B4JztcclxuXHRcdHRleHRJbnB1dC5zcGVsbGNoZWNrID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdGV4dElucHV0O1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBob3RvTGluZSB7XHJcblx0Z2x5cGhzOiBQaG90b0dseXBoW107XHJcblx0Y29uc3RydWN0b3IodGV4dENvbnRlbnQgPSAnJykge1xyXG5cdFx0dGhpcy5nbHlwaHMgPSBbXTtcclxuXHJcblx0XHRjb25zdCB0ZXh0QXJyYXkgPSB0ZXh0Q29udGVudC5zcGxpdChcIiAgIFwiKS5maWx0ZXIoKGM6IHN0cmluZykgPT4gYyAhPT0gXCJcIik7XHJcblxyXG5cdFx0bGV0IGRvU3BhY2UgPSBmYWxzZTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRleHRBcnJheS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRjb25zdCBuZXdHbHlwaCA9IG5ldyBQaG90b0dseXBoKCk7XHJcblx0XHRcdGNvbnN0IGdseXBoVGV4dCA9IHRleHRBcnJheVtpXTtcclxuXHJcblx0XHRcdGlmIChnbHlwaFRleHQgPT09ICd8fHwnKSB7XHJcblx0XHRcdFx0bmV3R2x5cGguaHVlID0gMDtcclxuXHRcdFx0XHRuZXdHbHlwaC5zYXR1cmF0aW9uID0gMDtcclxuXHRcdFx0XHRuZXdHbHlwaC52YWx1ZSA9IDA7XHJcblx0XHRcdFx0bmV3R2x5cGgub3BhY2l0eSA9IDA7XHJcblx0XHRcdFx0bmV3R2x5cGgubW92ZVNwZWVkID0gMDtcclxuXHRcdFx0XHRuZXdHbHlwaC5kdXJhdGlvbiA9IDA7XHJcblx0XHRcdFx0bmV3R2x5cGgueCA9IHRoaXMuZ2x5cGhzW3RoaXMuZ2x5cGhzLmxlbmd0aCAtIDFdLng7XHJcblx0XHRcdFx0bmV3R2x5cGgueSA9IHRoaXMuZ2x5cGhzW3RoaXMuZ2x5cGhzLmxlbmd0aCAtIDFdLnk7XHJcblx0XHRcdFx0ZG9TcGFjZSA9IHRydWU7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGogPSAwO1xyXG5cdFx0XHRcdGxldCBza2lwTmV4dCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHQvLyBtb3ZlIHNwZWVkXHJcblx0XHRcdFx0c3dpdGNoIChnbHlwaFRleHRbal0pIHtcclxuXHRcdFx0XHRcdGNhc2UgJy4nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5tb3ZlU3BlZWQgPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJy0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5tb3ZlU3BlZWQgPSAxO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJz0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5tb3ZlU3BlZWQgPSAyO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyBkdXJhdGlvblxyXG5cdFx0XHRcdHN3aXRjaCAoZ2x5cGhUZXh0W2pdKSB7XHJcblx0XHRcdFx0XHRjYXNlICcuJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGguZHVyYXRpb24gPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJy0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5kdXJhdGlvbiA9IDE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRqKys7XHJcblxyXG5cdFx0XHRcdC8vIHNoYXBlXHJcblx0XHRcdFx0bmV3R2x5cGguc2hhcGUgPSBnbHlwaFRleHRbal07XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyBodWVcclxuXHRcdFx0XHRsZXQgaHVlMSA9IDA7XHJcblx0XHRcdFx0c3dpdGNoIChnbHlwaFRleHRbal0pIHtcclxuXHRcdFx0XHRcdGNhc2UgJ3InOlxyXG5cdFx0XHRcdFx0XHRodWUxID0gMDtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICdvJzpcclxuXHRcdFx0XHRcdFx0aHVlMSA9IDQwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ3knOlxyXG5cdFx0XHRcdFx0XHRodWUxID0gNjA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnZyc6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAxMjA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnYyc6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAxODA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnYic6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAyNDA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAncCc6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAyNzA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnLic6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLmh1ZSA9IDA7XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAwO1xyXG5cdFx0XHRcdFx0XHRza2lwTmV4dCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRqKys7XHJcblx0XHRcdFx0aWYgKCFza2lwTmV4dCkge1xyXG5cdFx0XHRcdFx0bGV0IGh1ZTIgPSAwO1xyXG5cdFx0XHRcdFx0c3dpdGNoIChnbHlwaFRleHRbal0pIHtcclxuXHRcdFx0XHRcdFx0Y2FzZSAncic6XHJcblx0XHRcdFx0XHRcdFx0aHVlMiA9IDA7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ28nOlxyXG5cdFx0XHRcdFx0XHRcdGh1ZTIgPSA0MDtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0Y2FzZSAneSc6XHJcblx0XHRcdFx0XHRcdFx0aHVlMiA9IDYwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdnJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMTIwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdjJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMTgwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdiJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMjQwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdwJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMjcwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0XHRcdG5ld0dseXBoLmh1ZSA9IGh1ZTE7XHJcblx0XHRcdFx0XHRcdFx0c2tpcE5leHQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCFza2lwTmV4dCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoaHVlMSA9PT0gMCAmJiBodWUyID09PSAyNzAgfHwgaHVlMSA9PT0gMjcwICYmIGh1ZTIgPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRuZXdHbHlwaC5odWUgPSAzMTU7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3R2x5cGguaHVlID0gKGh1ZTEgKyBodWUyKSAvIDI7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aisrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRza2lwTmV4dCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHQvLyBzYXR1cmF0aW9uXHJcblx0XHRcdFx0Y29uc3Qgc2F0dXJhdGlvblRleHQgPSBnbHlwaFRleHRbal07XHJcblx0XHRcdFx0c3dpdGNoIChzYXR1cmF0aW9uVGV4dCkge1xyXG5cdFx0XHRcdFx0Y2FzZSAnMCc6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJzEnOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5zYXR1cmF0aW9uID0gMC4yNTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICcyJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDAuNTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICczJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDAuNzU7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnNCc6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAxO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyB2YWx1ZVxyXG5cdFx0XHRcdGNvbnN0IHZhbHVlVGV4dCA9IGdseXBoVGV4dFtqXTtcclxuXHRcdFx0XHRzd2l0Y2ggKHZhbHVlVGV4dCkge1xyXG5cdFx0XHRcdFx0Y2FzZSAnMCc6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnZhbHVlID0gMDtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICcxJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGgudmFsdWUgPSAwLjE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnMic6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnZhbHVlID0gMC4yO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJzMnOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC52YWx1ZSA9IDAuNTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICc0JzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGgudmFsdWUgPSAxO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyBvcGFjaXR5XHJcblx0XHRcdFx0Y29uc3Qgb3BhY2l0eVRleHQgPSBnbHlwaFRleHRbal07XHJcblx0XHRcdFx0c3dpdGNoIChvcGFjaXR5VGV4dCkge1xyXG5cdFx0XHRcdFx0Y2FzZSAnLic6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLm9wYWNpdHkgPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJy0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5vcGFjaXR5ID0gMC41O1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJz0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5vcGFjaXR5ID0gMTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGorKztcclxuXHJcblx0XHRcdFx0Y29uc3QgbG9jYXRpb25JbmZvID0gZ2x5cGhUZXh0LnN1YnN0cmluZyhqKTtcclxuXHJcblx0XHRcdFx0Ly8gbG9jYXRpb25cclxuXHRcdFx0XHQvLyB4XHJcblx0XHRcdFx0aWYgKGxvY2F0aW9uSW5mby5jb250YWlucygnPCcpKSB7XHJcblx0XHRcdFx0XHRuZXdHbHlwaC54ID0gMDtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKGxvY2F0aW9uSW5mby5jb250YWlucygnPicpKSB7XHJcblx0XHRcdFx0XHRuZXdHbHlwaC54ID0gMjtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bmV3R2x5cGgueCA9IDE7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIHlcclxuXHRcdFx0XHRpZiAobG9jYXRpb25JbmZvLmNvbnRhaW5zKCd2JykpIHtcclxuXHRcdFx0XHRcdG5ld0dseXBoLnkgPSAwO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAobG9jYXRpb25JbmZvLmNvbnRhaW5zKCdeJykpIHtcclxuXHRcdFx0XHRcdG5ld0dseXBoLnkgPSAyO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuZXdHbHlwaC55ID0gMTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChkb1NwYWNlKSB7XHJcblx0XHRcdFx0XHRjb25zdCBlbXB0eUdseXBoID0gbmV3IFBob3RvR2x5cGgoKTtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGguaHVlID0gMDtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGguc2F0dXJhdGlvbiA9IDA7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLnZhbHVlID0gMDtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGgub3BhY2l0eSA9IDA7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLm1vdmVTcGVlZCA9IDA7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLmR1cmF0aW9uID0gMDtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGgueCA9IG5ld0dseXBoLng7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLnkgPSBuZXdHbHlwaC55O1xyXG5cdFx0XHRcdFx0ZG9TcGFjZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGhpcy5nbHlwaHMucHVzaChlbXB0eUdseXBoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuZ2x5cGhzLnB1c2gobmV3R2x5cGgpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGRvU3BhY2UpIHtcclxuXHRcdFx0Y29uc3QgZW1wdHlHbHlwaCA9IG5ldyBQaG90b0dseXBoKCk7XHJcblx0XHRcdGVtcHR5R2x5cGguaHVlID0gMDtcclxuXHRcdFx0ZW1wdHlHbHlwaC5zYXR1cmF0aW9uID0gMDtcclxuXHRcdFx0ZW1wdHlHbHlwaC52YWx1ZSA9IDA7XHJcblx0XHRcdGVtcHR5R2x5cGgub3BhY2l0eSA9IDA7XHJcblx0XHRcdGVtcHR5R2x5cGgubW92ZVNwZWVkID0gMDtcclxuXHRcdFx0ZW1wdHlHbHlwaC5kdXJhdGlvbiA9IDA7XHJcblx0XHRcdGVtcHR5R2x5cGgueCA9IHRoaXMuZ2x5cGhzWzBdLng7XHJcblx0XHRcdGVtcHR5R2x5cGgueSA9IHRoaXMuZ2x5cGhzWzBdLnk7XHJcblx0XHRcdGRvU3BhY2UgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5nbHlwaHMucHVzaChlbXB0eUdseXBoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIFNwZWFrKGRpdjogSFRNTERpdkVsZW1lbnQsIHRleHRTaXplOiBudW1iZXIsIG1vdmVTcGVlZHM6IG51bWJlcltdLCBkdXJhdGlvbnM6IG51bWJlcltdLCBkb0xvb3AgPSBmYWxzZSkge1xyXG5cdFx0ZGl2LnN0eWxlLmZvbnRTaXplID0gdGV4dFNpemUgKyAncHgnO1xyXG5cdFx0ZGl2LnN0eWxlLmZvbnRGYW1pbHkgPSAnUGhvdG9sYW5nJztcclxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcblx0XHRkaXYuc3R5bGUuaGVpZ2h0ID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0ZGl2LnN0eWxlLndpZHRoID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0Y29uc3QgdGV4dERpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHRcdHRleHREaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0dGV4dERpdi5zdHlsZS5ib3R0b20gPSB0ZXh0U2l6ZSArICdweCc7XHJcblx0XHR0ZXh0RGl2LnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9ICdib3R0b20sIGxlZnQsIGNvbG9yJztcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgcGhvdG9HbHlwaCA9IHRoaXMuZ2x5cGhzW2ldO1xyXG5cclxuXHRcdFx0dGV4dERpdi50ZXh0Q29udGVudCA9IHBob3RvR2x5cGguc2hhcGU7XHJcblx0XHRcdHRleHREaXYuc3R5bGUubGVmdCA9IChwaG90b0dseXBoLnggKiB0ZXh0U2l6ZSkgKyAncHgnO1xyXG5cdFx0XHR0ZXh0RGl2LnN0eWxlLmJvdHRvbSA9IChwaG90b0dseXBoLnkgKiB0ZXh0U2l6ZSkgKyAncHgnO1xyXG5cdFx0XHR0ZXh0RGl2LnN0eWxlLmNvbG9yID0gcGhvdG9HbHlwaC5jb2xvcjtcclxuXHJcblx0XHRcdGlmIChkb0xvb3AgJiYgaSA9PT0gdGhpcy5nbHlwaHMubGVuZ3RoIC0gMSkge1xyXG5cdFx0XHRcdGkgPSAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0ZXh0RGl2LnN0eWxlLnRyYW5zaXRpb24gPSBtb3ZlU3BlZWRzW3Bob3RvR2x5cGgubW92ZVNwZWVkXSArICdtcyc7XHJcblx0XHRcdGF3YWl0IHNsZWVwKG1vdmVTcGVlZHNbcGhvdG9HbHlwaC5tb3ZlU3BlZWRdICsgZHVyYXRpb25zW3Bob3RvR2x5cGguZHVyYXRpb25dKTtcclxuXHRcdH1cclxuXHRcdGRpdi5yZW1vdmUoKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIERpc3BsYXlTdGF0aWMoZGl2OiBIVE1MRGl2RWxlbWVudCwgdGV4dFNpemU6IG51bWJlcikge1xyXG5cdFx0Y29uc3QgbGluZURpdiA9IGRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdGxpbmVEaXYuc3R5bGUuZ2FwID0gJycgKyAodGV4dFNpemUgKiAzLjI1KSArICdweCknO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdseXBocy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR0aGlzLmdseXBoc1tpXSA9IE9iamVjdC5hc3NpZ24obmV3IFBob3RvR2x5cGgoKSwgdGhpcy5nbHlwaHNbaV0pO1xyXG5cdFx0XHR0aGlzLmdseXBoc1tpXS5EaXNwbGF5U3RhdGljKGxpbmVEaXYuY3JlYXRlRGl2KCksIHRleHRTaXplKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGhvdG9HbHlwaCB7XHJcblx0c2hhcGU6IHN0cmluZztcclxuXHR4OiBudW1iZXI7XHJcblx0eTogbnVtYmVyO1xyXG5cdGh1ZTogbnVtYmVyO1xyXG5cdHNhdHVyYXRpb246IG51bWJlcjtcclxuXHR2YWx1ZTogbnVtYmVyO1xyXG5cdG9wYWNpdHk6IG51bWJlcjtcclxuXHRtb3ZlU3BlZWQ6IG51bWJlcjtcclxuXHRkdXJhdGlvbjogbnVtYmVyO1xyXG5cclxuXHRnZXQgY29sb3IoKSB7XHJcblx0XHQvLyBoc3YgdmFsdWVzIGFyZSBpbiBbMCwgMV1cclxuXHRcdGxldCBsaWdodG5lc3MgPSAoMiAtIHRoaXMuc2F0dXJhdGlvbikgKiB0aGlzLnZhbHVlIC8gMjtcclxuXHRcdGxldCBuZXdTID0gdGhpcy5zYXR1cmF0aW9uICogdGhpcy52YWx1ZSAvIChsaWdodG5lc3MgPCAxID8gbGlnaHRuZXNzICogMiA6IDIgLSBsaWdodG5lc3MgKiAyKTtcclxuXHJcblx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgbGlnaHRuZXNzIGlzIDAgb3IgMSwgd2hpY2ggcmVzdWx0cyBpbiBzYXR1cmF0aW9uIGJlaW5nIDBcclxuXHRcdGlmIChsaWdodG5lc3MgPT09IDAgfHwgbGlnaHRuZXNzID09PSAxKSB7XHJcblx0XHRcdG5ld1MgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxpZ2h0bmVzcyAqPSAxMDA7XHJcblx0XHRuZXdTICo9IDEwMDtcclxuXHJcblx0XHRyZXR1cm4gJ2hzbGEoJyArIHRoaXMuaHVlICsgJywnICsgbmV3UyArICclLCcgKyBsaWdodG5lc3MgKyAnJSwnICsgdGhpcy5vcGFjaXR5ICsgJyknO1xyXG5cdH1cclxuXHJcblx0RGlzcGxheVN0YXRpYyhkaXY6IEhUTUxEaXZFbGVtZW50LCB0ZXh0U2l6ZTogbnVtYmVyKSB7XHJcblx0XHRjb25zdCBvdXRlckRpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHRcdG91dGVyRGl2LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuXHRcdG91dGVyRGl2LnN0eWxlLndpZHRoID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0b3V0ZXJEaXYuc3R5bGUuaGVpZ2h0ID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0b3V0ZXJEaXYuY2xhc3NOYW1lID0gJ2NmZS1waG90b2dseXBoJztcclxuXHRcdGNvbnN0IGdseXBoRGl2ID0gb3V0ZXJEaXYuY3JlYXRlRGl2KCk7XHJcblx0XHRnbHlwaERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHRnbHlwaERpdi50ZXh0Q29udGVudCA9IHRoaXMuc2hhcGU7XHJcblx0XHRnbHlwaERpdi5zdHlsZS5sZWZ0ID0gKHRoaXMueCAqIHRleHRTaXplKSArICdweCc7XHJcblx0XHRnbHlwaERpdi5zdHlsZS5ib3R0b20gPSAodGhpcy55ICogdGV4dFNpemUpICsgJ3B4JztcclxuXHRcdGdseXBoRGl2LnN0eWxlLmNvbG9yID0gdGhpcy5jb2xvcjtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xyXG5pbXBvcnQgeyBId2F5dSB9IGZyb20gXCIuL2NvbmxhbmdzL2h3YXl1LXRleHRcIjtcclxuaW1wb3J0IHsgUGhvdG9MYW5nIH0gZnJvbSBcIi4vY29ubGFuZ3MvcGhvdG9sYW5nLXRleHRcIjtcclxuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25sYW5nRGljdGlvbmFyeSBleHRlbmRzIENGRUZpbGUge1xyXG5cclxuXHRsYW5ndWFnZTogc3RyaW5nO1xyXG5cdHdvcmRzOiBbc3RyaW5nLCBzdHJpbmddW107XHJcblx0c2VhcmNoVGVybTogc3RyaW5nO1xyXG5cdHNlYXJjaEluQ29ubGFuZzogYm9vbGVhbjtcclxuXHJcblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyKTogUHJvbWlzZTxDb25sYW5nRGljdGlvbmFyeT4ge1xyXG5cdFx0Y29uc3QgdW5maW5pc2hlZERpY3Rpb25hcnkgPSA8Q29ubGFuZ0RpY3Rpb25hcnk+IGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCk7XHJcblx0XHR1bmZpbmlzaGVkRGljdGlvbmFyeS5sYW5ndWFnZSA9ICdId2F5dSc7XHJcblx0XHR1bmZpbmlzaGVkRGljdGlvbmFyeS53b3JkcyA9IFtdO1xyXG5cdFx0dW5maW5pc2hlZERpY3Rpb25hcnkuc2VhcmNoVGVybSA9ICcnO1xyXG5cdFx0dW5maW5pc2hlZERpY3Rpb25hcnkuc2VhcmNoSW5Db25sYW5nID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdW5maW5pc2hlZERpY3Rpb25hcnk7XHJcblx0fVxyXG5cclxuXHRvdmVycmlkZSBhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgbWFpbkRpdik7XHJcblxyXG5cdFx0Y29uc3QgbGFuZ3VhZ2VEcm9wZG93biA9IG1haW5EaXYuY3JlYXRlRWwoJ3NlbGVjdCcpO1xyXG5cdFx0bGFuZ3VhZ2VEcm9wZG93bi5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiAnSHdheXUnLCB2YWx1ZTogJ0h3YXl1JyB9ICk7XHJcblx0XHRsYW5ndWFnZURyb3Bkb3duLmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICdQaG90b2xhbmcnLCB2YWx1ZTogJ1Bob3RvbGFuZycgfSApO1xyXG5cdFx0bGFuZ3VhZ2VEcm9wZG93bi52YWx1ZSA9IHRoaXMubGFuZ3VhZ2U7XHJcblxyXG5cdFx0Y29uc3QgYWRkV29yZERpdiA9IG1haW5EaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0XHRhd2FpdCB0aGlzLkNyZWF0ZU5ld1dvcmRFZGl0b3Ioc252LCBtYWluRGl2LCBhZGRXb3JkRGl2KTtcclxuXHJcblx0XHRsYW5ndWFnZURyb3Bkb3duLm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VEcm9wZG93bi52YWx1ZTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGF3YWl0IHRoaXMuRGlzcGxheUxpc3Qoc252LCBtYWluRGl2KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgRGlzcGxheVdvcmQoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQsIGRpdjogSFRNTERpdkVsZW1lbnQsIGluZGV4OiBudW1iZXIpIHtcclxuXHRcdGRpdi5lbXB0eSgpO1xyXG5cclxuXHRcdGNvbnN0IG1vZGVCdXR0b24gPSBkaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0VkaXQnIH0gKTtcclxuXHRcdG1vZGVCdXR0b24uc3R5bGUudG9wID0gJzAnO1xyXG5cdFx0bW9kZUJ1dHRvbi5zdHlsZS5yaWdodCA9ICcwJztcclxuXHRcdG1vZGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0YXdhaXQgdGhpcy5FZGl0V29yZChzbnYsIG1haW5EaXYsIGRpdiwgaW5kZXgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHdvcmREaXYgPSBkaXYuY3JlYXRlRGl2KCdoYm94Jyk7XHJcblx0XHR3b3JkRGl2LnN0eWxlLmdhcCA9ICcxJSc7XHJcblx0XHR3b3JkRGl2LnN0eWxlLmZvbnRTaXplID0gJzI1cHgnO1xyXG5cdFx0Y29uc3QgY29ubGFuZ1dvcmQgPSB0aGlzLndvcmRzW2luZGV4XVswXTtcclxuXHRcdGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLndvcmRzW2luZGV4XVsxXTtcclxuXHRcdGNvbnN0IGNvbmxhbmdXb3JkRGl2ID0gdGhpcy5EaXNwbGF5Q29ubGFuZ1RleHQod29yZERpdiwgY29ubGFuZ1dvcmQpO1xyXG5cdFx0Y29ubGFuZ1dvcmREaXYuY2xhc3NMaXN0LmFkZCgnY2ZlLXBvaW50ZXItaG92ZXInKTtcclxuXHRcdHdvcmREaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICc6JyB9ICk7XHJcblx0XHR3b3JkRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiBkZWZpbml0aW9uIH0gKTtcclxuXHJcblx0XHRjb25sYW5nV29yZERpdi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvbmxhbmdXb3JkKTtcclxuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNvcHkgdGV4dDogJywgZXJyKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBFZGl0V29yZChzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCwgZGl2OiBIVE1MRGl2RWxlbWVudCwgaW5kZXg6IG51bWJlcikge1xyXG5cdFx0ZGl2LmVtcHR5KCk7XHJcblx0XHRjb25zdCBidXR0b25zRGl2ID0gZGl2LmNyZWF0ZURpdignaGJveCcpO1xyXG5cclxuXHRcdGNvbnN0IG1vZGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdWaWV3JyB9ICk7XHJcblx0XHRtb2RlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheVdvcmQoc252LCBtYWluRGl2LCBkaXYsIGluZGV4KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBkZWxldGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdEZWxldGUnIH0gKTtcclxuXHRcdGRlbGV0ZUJ1dHRvbi5jbGFzc0xpc3QgPSAnY2ZlLXJlbW92ZS1idXR0b24nO1xyXG5cdFx0ZGVsZXRlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMud29yZHMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHdvcmREaXYgPSBkaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0XHR3b3JkRGl2LnN0eWxlLmZvbnRTaXplID0gJzI1cHgnO1xyXG5cdFx0d29yZERpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1dvcmQgaW4gJyArIHRoaXMubGFuZ3VhZ2UgfSApO1xyXG5cdFx0Y29uc3QgY29ubGFuZ1dvcmQgPSB0aGlzLndvcmRzW2luZGV4XVswXTtcclxuXHRcdGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLndvcmRzW2luZGV4XVsxXTtcclxuXHRcdGNvbnN0IG5ld1dvcmRJbnB1dCA9IHRoaXMuRGlzcGxheUNvbmxhbmdFZGl0b3Iod29yZERpdiwgY29ubGFuZ1dvcmQpO1xyXG5cclxuXHRcdHdvcmREaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdEZWZpbml0aW9uJyB9ICk7XHJcblx0XHRjb25zdCBkZWZpbml0aW9uSW5wdXQgPSB3b3JkRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogZGVmaW5pdGlvbiB9ICk7XHJcblx0XHRkZWZpbml0aW9uSW5wdXQuc3R5bGUuZm9udFNpemUgPSAnMjVweCc7XHJcblxyXG5cdFx0Y29uc3Qgb25TdWJtaXQgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMud29yZHNbaW5kZXhdID0gW25ld1dvcmRJbnB1dC52YWx1ZSwgZGVmaW5pdGlvbklucHV0LnZhbHVlXTtcclxuXHRcdFx0dGhpcy5SZVNvcnQoaW5kZXgpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNudiwgbWFpbkRpdik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZGl2Lm9ua2V5ZG93biA9IGFzeW5jIChldmVudCkgPT4ge1xyXG5cdFx0XHRpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcblx0XHRcdFx0YXdhaXQgb25TdWJtaXQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBDcmVhdGVOZXdXb3JkRWRpdG9yKHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50LCBkaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblx0XHRkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdBZGQgTmV3IFdvcmQ6JyB9ICk7XHJcblx0XHRkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdXb3JkIGluICcgKyB0aGlzLmxhbmd1YWdlIH0gKTtcclxuXHRcdGNvbnN0IG5ld1dvcmRJbnB1dCA9IHRoaXMuRGlzcGxheUNvbmxhbmdFZGl0b3IoZGl2KTtcclxuXHJcblx0XHRkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdEZWZpbml0aW9uJyB9ICk7XHJcblx0XHRjb25zdCBkZWZpbml0aW9uSW5wdXQgPSBkaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyB9ICk7XHJcblx0XHRjb25zdCBzdWJtaXRCdXR0b24gPSBkaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ3N1Ym1pdCcgfSApO1xyXG5cclxuXHRcdGNvbnN0IG9uU3VibWl0ID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLndvcmRzLnB1c2goW25ld1dvcmRJbnB1dC52YWx1ZSwgZGVmaW5pdGlvbklucHV0LnZhbHVlXSk7XHJcblx0XHRcdHRoaXMuUmVTb3J0KHRoaXMud29yZHMubGVuZ3RoIC0gMSk7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLkRpc3BsYXkoc252LCBtYWluRGl2KTtcclxuXHRcdH1cclxuXHJcblx0XHRzdWJtaXRCdXR0b24ub25jbGljayA9IG9uU3VibWl0O1xyXG5cdFx0ZGl2Lm9ua2V5ZG93biA9IGFzeW5jIChldmVudCkgPT4ge1xyXG5cdFx0XHRpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcblx0XHRcdFx0YXdhaXQgb25TdWJtaXQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBEaXNwbGF5Q29ubGFuZ0VkaXRvcihkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1dvcmQgPSAnJykge1xyXG5cdFx0c3dpdGNoKHRoaXMubGFuZ3VhZ2UpIHtcclxuXHRcdFx0Y2FzZSAnSHdheXUnOlxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHJldHVybiBId2F5dS5DcmVhdGVUZXh0SW5wdXQoZGl2LCBleGlzdGluZ1dvcmQsIDI1LCBmYWxzZSk7XHJcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XHJcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5DcmVhdGVUZXh0SW5wdXQoZGl2LCBleGlzdGluZ1dvcmQsIDI1KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgRGlzcGxheUNvbmxhbmdUZXh0KGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nV29yZCA9ICcnKSB7XHJcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xyXG5cdFx0XHRjYXNlICdId2F5dSc6XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIEh3YXl1LkRpc3BsYXkoZGl2LCBleGlzdGluZ1dvcmQsIDI1LCBmYWxzZSk7XHJcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XHJcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5EaXNwbGF5KGRpdiwgZXhpc3RpbmdXb3JkLCAyNSwgbnVsbCwgbnVsbCwgdHJ1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIERpc3BsYXlMaXN0KHNudjogU291cmNlQW5kVmF1bHQsIGRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1NlYXJjaCBpbiAnICsgdGhpcy5sYW5ndWFnZSArICc/JyB9ICk7XHJcblx0XHRcclxuXHRcdGNvbnN0IGNoZWNrYm94ID0gZGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2NoZWNrYm94JyB9ICk7XHJcblx0XHRjaGVja2JveC5jaGVja2VkID0gdGhpcy5zZWFyY2hJbkNvbmxhbmc7XHJcblxyXG5cdFx0ZGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnU2VhcmNoIHRlcm0nIH0gKTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgY29ubGFuZ1NlYXJjaCA9IHRoaXMuRGlzcGxheUNvbmxhbmdFZGl0b3IoZGl2LCB0aGlzLnNlYXJjaFRlcm0pO1xyXG5cdFx0Y29uc3QgZW5nbGlzaFNlYXJjaCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMuc2VhcmNoVGVybSB9ICk7XHJcblx0XHRcclxuXHRcdGxldCBwcmV2RWxlbWVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyBlbmdsaXNoU2VhcmNoIDogY29ubGFuZ1NlYXJjaDtcclxuXHRcdGxldCBjdXJyZW50RWxlbWVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyBjb25sYW5nU2VhcmNoIDogZW5nbGlzaFNlYXJjaDtcclxuXHRcdHByZXZFbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG5cdFx0Y3VycmVudEVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblxyXG5cdFx0dGhpcy5zZWFyY2hUZXJtID0gcHJldkVsZW1lbnQudmFsdWU7XHJcblxyXG5cdFx0cHJldkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdGN1cnJlbnRFbGVtZW50LnZhbHVlID0gdGhpcy5zZWFyY2hUZXJtO1xyXG5cdFx0Y3VycmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG5cdFx0XHJcblx0XHRjb25zdCByZXN1bHRzRGl2ID0gZGl2LmNyZWF0ZURpdignY2ZlLWRpY3Rpb25hcnktZ3JpZCcpO1xyXG5cdFx0XHJcblx0XHRjb25zdCByZWZyZXNoUmVzdWx0cyA9ICgpID0+IHtcclxuXHRcdFx0dGhpcy5zZWFyY2hUZXJtID0gY3VycmVudEVsZW1lbnQudmFsdWU7XHJcblx0XHRcdHRoaXMuc2VhcmNoSW5Db25sYW5nID0gY2hlY2tib3guY2hlY2tlZDtcclxuXHRcdFx0cmVzdWx0c0Rpdi5lbXB0eSgpO1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud29yZHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAodGhpcy53b3Jkc1tpXVtjaGVja2JveC5jaGVja2VkID8gMCA6IDFdLmNvbnRhaW5zKGN1cnJlbnRFbGVtZW50LnZhbHVlKSkge1xyXG5cdFx0XHRcdFx0Y29uc3Qgd29yZERpdiA9IHJlc3VsdHNEaXYuY3JlYXRlRGl2KCdjZmUtZGljdGlvbmFyeS13b3JkJyk7XHJcblx0XHRcdFx0XHR0aGlzLkRpc3BsYXlXb3JkKHNudiwgZGl2LCB3b3JkRGl2LCBpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZWZyZXNoUmVzdWx0cygpO1xyXG5cclxuXHRcdGNvbmxhbmdTZWFyY2gub25pbnB1dCA9IHJlZnJlc2hSZXN1bHRzO1xyXG5cclxuXHRcdGVuZ2xpc2hTZWFyY2gub25pbnB1dCA9IHJlZnJlc2hSZXN1bHRzO1xyXG5cclxuXHRcdGNoZWNrYm94Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG5cdFx0XHRyZXN1bHRzRGl2LmVtcHR5KCk7XHJcblxyXG5cdFx0XHRwcmV2RWxlbWVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyBlbmdsaXNoU2VhcmNoIDogY29ubGFuZ1NlYXJjaDtcclxuXHRcdFx0Y3VycmVudEVsZW1lbnQgPSBjaGVja2JveC5jaGVja2VkID8gY29ubGFuZ1NlYXJjaCA6IGVuZ2xpc2hTZWFyY2g7XHJcblx0XHRcdHRoaXMuc2VhcmNoVGVybSA9IHByZXZFbGVtZW50LnZhbHVlO1xyXG5cclxuXHRcdFx0cHJldkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdFx0Y3VycmVudEVsZW1lbnQudmFsdWUgPSB0aGlzLnNlYXJjaFRlcm07XHJcblx0XHRcdGN1cnJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuXHRcdFx0XHJcblx0XHRcdHJlZnJlc2hSZXN1bHRzKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIFJlU29ydChpbmRleE9mQ2hhbmdlZFdvcmQ6IG51bWJlcikge1xyXG5cdFx0Y29uc3QgY2hhbmdlZFdvcmQgPSB0aGlzLndvcmRzLnNwbGljZShpbmRleE9mQ2hhbmdlZFdvcmQsIDEpWzBdO1xyXG5cdFx0bGV0IGkgPSAwO1xyXG5cdFx0bGV0IGxlZnQgPSAwO1xyXG5cdFx0bGV0IHJpZ2h0ID0gdGhpcy53b3Jkcy5sZW5ndGggLSAxO1xyXG5cdFx0XHJcblx0XHR3aGlsZSAobGVmdCA8PSByaWdodCkge1xyXG5cdFx0XHRjb25zdCBtaWQgPSBNYXRoLmZsb29yKChsZWZ0ICsgcmlnaHQpIC8gMik7XHJcblx0XHRcdGlmICh0aGlzLndvcmRzW21pZF1bMF0gPCBjaGFuZ2VkV29yZFswXSkge1xyXG5cdFx0XHRcdGxlZnQgPSBtaWQgKyAxO1xyXG5cdFx0XHRcdGkgPSBsZWZ0O1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJpZ2h0ID0gbWlkIC0gMTtcclxuXHRcdFx0XHRpID0gbWlkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy53b3Jkcy5zcGxpY2UoaSwgMCwgY2hhbmdlZFdvcmQpO1xyXG5cdH1cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xuaW1wb3J0IHsgQ0ZFRmlsZUhhbmRsZXIgfSBmcm9tIFwiLi9jZmUtZmlsZS1oYW5kbGVyXCI7XG5pbXBvcnQgeyBTaW5nbGVNZWRpYUZpbGUgfSBmcm9tIFwiLi9zaW5nbGUtbWVkaWEtZmlsZVwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcbmltcG9ydCB7IFBob3RvTGFuZywgUGhvdG9MaW5lIH0gZnJvbSBcIi4vY29ubGFuZ3MvcGhvdG9sYW5nLXRleHRcIjtcbmltcG9ydCB7IEh3YXl1IH0gZnJvbSBcIi4vY29ubGFuZ3MvaHdheXUtdGV4dFwiO1xuXG5leHBvcnQgY2xhc3MgU3RvcnkgZXh0ZW5kcyBDRkVGaWxlIHtcblx0cHJpdmF0ZSBjdXJyZW50UGFnZUluZGV4OiBudW1iZXI7XG5cdHByaXZhdGUgcGFnZXM6IFBhZ2VbXTtcblx0cHJpdmF0ZSBjaGFyYWN0ZXJzOiBDaGFyYWN0ZXJbXTtcblx0cHJpdmF0ZSBsYW5ndWFnZTogc3RyaW5nO1xuXHRwcml2YXRlIGRvVmVydGljYWw6IGJvb2xlYW47XG5cblx0cHJpdmF0ZSBzdGF0aWMga25vd25MYW5ndWFnZXMgPSBbXG5cdFx0J0VuZ2xpc2gnLFxuXHRcdCdId2F5dScsXG5cdFx0J1Bob3RvbGFuZydcblx0XVxuXG5cdHByaXZhdGUgTWFrZVZlcnRpY2FsKGVsOiBIVE1MRWxlbWVudCkge1xuXHRcdGVsLnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcblx0XHRlbC5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XG5cdH1cblxuXHRwcml2YXRlIENyZWF0ZVRleHRJbnB1dChkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1dvcmQgPSAnJykge1xuXHRcdGxldCBpbnB1dDtcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xuXHRcdFx0Y2FzZSAnSHdheXUnOlxuXHRcdFx0XHRyZXR1cm4gSHdheXUuQ3JlYXRlVGV4dElucHV0KGRpdiwgZXhpc3RpbmdXb3JkLCAyNSwgdGhpcy5kb1ZlcnRpY2FsKTtcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XG5cdFx0XHRcdHJldHVybiBQaG90b0xhbmcuQ3JlYXRlVGV4dElucHV0KGRpdiwgZXhpc3RpbmdXb3JkLCAyNSk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpbnB1dCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IGV4aXN0aW5nV29yZCB9ICk7XG5cdFx0XHRcdGlucHV0LnN0eWxlLmZvbnRTaXplID0gJzI1cHgnO1xuXHRcdFx0XHRyZXR1cm4gaW5wdXQ7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBEaXNwbGF5TGluZUVkaXQoZGl2OiBIVE1MRGl2RWxlbWVudCwgbGluZTogRGlhbG9ndWVMaW5lKSB7XG5cdFx0Y29uc3QgaW5wdXQgPSB0aGlzLkNyZWF0ZVRleHRBcmVhKGRpdiwgbGluZS5jb250ZW50KTtcblx0XHRpZiAodGhpcy5sYW5ndWFnZSAhPT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdGNvbnN0IHNwZWFrZXIgPSB0aGlzLmNoYXJhY3RlcnNbbGluZS5zcGVha2VySW5kZXhdO1xuXHRcdFx0aW5wdXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gc3BlYWtlci5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHRpbnB1dC5zdHlsZS5jb2xvciA9IHNwZWFrZXIuY29sb3I7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdHRoaXMuTWFrZVZlcnRpY2FsKGlucHV0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cblx0cHJpdmF0ZSBDcmVhdGVUZXh0QXJlYShkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1dvcmQgPSAnJykge1xuXHRcdGxldCBpbnB1dDtcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xuXHRcdFx0Y2FzZSAnSHdheXUnOlxuXHRcdFx0XHRyZXR1cm4gSHdheXUuQ3JlYXRlVGV4dEFyZWEoZGl2LCBleGlzdGluZ1dvcmQsIDI1LCB0aGlzLmRvVmVydGljYWwpO1xuXHRcdFx0Y2FzZSAnUGhvdG9sYW5nJzpcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5DcmVhdGVUZXh0QXJlYShkaXYsIGV4aXN0aW5nV29yZCwgMjUpO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aW5wdXQgPSBkaXYuY3JlYXRlRWwoJ3RleHRhcmVhJywgeyB0ZXh0OiBleGlzdGluZ1dvcmQgfSApO1xuXHRcdFx0XHRpbnB1dC5zdHlsZS5mb250U2l6ZSA9ICcyNXB4Jztcblx0XHRcdFx0cmV0dXJuIGlucHV0O1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgRGlzcGxheVRleHQoZGl2OiBIVE1MRGl2RWxlbWVudCwgZm9udFNpemUgPSAyNSwgZXhpc3RpbmdXb3JkID0gJycpIHtcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xuXHRcdFx0Y2FzZSAnSHdheXUnOlxuXHRcdFx0XHRyZXR1cm4gSHdheXUuRGlzcGxheShkaXYsIGV4aXN0aW5nV29yZCwgZm9udFNpemUsIHRoaXMuZG9WZXJ0aWNhbCk7XG5cdFx0XHRjYXNlICdQaG90b2xhbmcnOlxuXHRcdFx0XHRyZXR1cm4gUGhvdG9MYW5nLkRpc3BsYXkoZGl2LCBleGlzdGluZ1dvcmQsIGZvbnRTaXplLCBudWxsLCBudWxsLCB0cnVlKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IGV4aXN0aW5nV29yZCB9ICk7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFN0b3J5PiB7XG5cdFx0Y29uc3QgbmV3U3RvcnlGaWxlID0gPFN0b3J5PiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklELCBuYW1lKSk7XG5cdFx0bmV3U3RvcnlGaWxlLmN1cnJlbnRQYWdlSW5kZXggPSAwO1xuXHRcdG5ld1N0b3J5RmlsZS5wYWdlcyA9IFtdO1xuXHRcdG5ld1N0b3J5RmlsZS5jaGFyYWN0ZXJzID0gW107XG5cdFx0bmV3U3RvcnlGaWxlLmxhbmd1YWdlID0gJ0VuZ2xpc2gnO1xuXHRcdG5ld1N0b3J5RmlsZS5kb1ZlcnRpY2FsID0gZmFsc2U7XG5cdFx0cmV0dXJuIG5ld1N0b3J5RmlsZTtcblx0fVxuXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgbWFpbkRpdik7XG5cdFx0dGhpcy5Mb2FkU3RvcnlVSShzbnYsIG1haW5EaXYuY3JlYXRlRGl2KCd2Ym94JykpO1xuXHR9XG5cblx0cHJpdmF0ZSBMb2FkU3RvcnlVSShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdG1haW5EaXYuZW1wdHkoKTtcblx0XHRtYWluRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnR28gdG8gcGFnZSBudW1iZXI6JyB9ICk7XG5cdFx0Y29uc3QgcGFnZVNlbGVjdERpdiA9IG1haW5EaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0Y29uc3QgcGFnZU51bWJlcklucHV0ID0gcGFnZVNlbGVjdERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICcnICsgKHRoaXMuY3VycmVudFBhZ2VJbmRleCArIDEpIH0gKTtcblx0XHRwYWdlU2VsZWN0RGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnJyArICcvJyArIHRoaXMucGFnZXMubGVuZ3RoIH0gKTtcblx0XHRjb25zdCBnb0J1dHRvbiA9IHBhZ2VTZWxlY3REaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0dvJyB9ICk7XG5cdFx0Z29CdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleCA9IHBhcnNlSW50KHBhZ2VOdW1iZXJJbnB1dC52YWx1ZSkgLSAxO1xuXHRcdFx0dGhpcy5Mb2FkQ3VycmVudFBhZ2VFZGl0KHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbGFuZ3VhZ2VJbnB1dCA9IG1haW5EaXYuY3JlYXRlRWwoJ3NlbGVjdCcpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgU3Rvcnkua25vd25MYW5ndWFnZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxhbmd1YWdlSW5wdXQuY3JlYXRlRWwoJ29wdGlvbicsIHsgdGV4dDogU3Rvcnkua25vd25MYW5ndWFnZXNbaV0sIHZhbHVlOiBTdG9yeS5rbm93bkxhbmd1YWdlc1tpXSB9ICk7XG5cdFx0fVxuXHRcdGxhbmd1YWdlSW5wdXQudmFsdWUgPSB0aGlzLmxhbmd1YWdlO1xuXHRcdGxhbmd1YWdlSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VJbnB1dC52YWx1ZTtcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0dGhpcy5Mb2FkU3RvcnlVSShzbnYsIG1haW5EaXYpO1xuXHRcdH1cblxuXHRcdG1haW5EaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdWZXJ0aWNhbCBUZXh0JyB9ICk7XG5cdFx0Y29uc3QgZG9WZXJ0aWNhbEJveCA9IG1haW5EaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnY2hlY2tib3gnIH0gKTtcblx0XHRkb1ZlcnRpY2FsQm94LmNoZWNrZWQgPSB0aGlzLmRvVmVydGljYWw7XG5cdFx0ZG9WZXJ0aWNhbEJveC5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dGhpcy5kb1ZlcnRpY2FsID0gZG9WZXJ0aWNhbEJveC5jaGVja2VkO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHR0aGlzLkxvYWRTdG9yeVVJKHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXG5cdFx0dGhpcy5Mb2FkQ2hhcmFjdGVyRWRpdG9yVUkoc252LCBtYWluRGl2KTtcblx0fVxuXG5cdHByaXZhdGUgTG9hZENoYXJhY3RlckVkaXRvclVJKHNudjogU291cmNlQW5kVmF1bHQsIGRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRjb25zdCBjaGFyRWRpdG9yRGl2ID0gZGl2LmNyZWF0ZURpdigpO1xuXHRcdGNoYXJFZGl0b3JEaXYuY2xhc3NOYW1lID0gdGhpcy5kb1ZlcnRpY2FsID8gJ2hib3gnIDogJ3Zib3gnO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50SW5kZXggPSBpO1xuXHRcdFx0Y29uc3QgY2hhckRpdiA9IGNoYXJFZGl0b3JEaXYuY3JlYXRlRGl2KCk7XG5cdFx0XHRjaGFyRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICd2Ym94JyA6ICdoYm94JztcblxuXHRcdFx0Y2hhckRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ05hbWU6ICcgfSApO1xuXHRcdFx0Y29uc3QgbmFtZUlucHV0ID0gdGhpcy5DcmVhdGVUZXh0SW5wdXQoY2hhckRpdiwgdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0ubmFtZSk7XG5cdFx0XHRpZiAodGhpcy5sYW5ndWFnZSAhPT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdFx0bmFtZUlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50SW5kZXhdLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdFx0bmFtZUlucHV0LnN0eWxlLmNvbG9yID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3I7XG5cdFx0XHR9XG5cdFx0XHRuYW1lSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50SW5kZXhdLm5hbWUgPSBuYW1lSW5wdXQudmFsdWU7XG5cdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0XHR0aGlzLkxvYWRTdG9yeVVJKHNudiwgZGl2KTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdFx0bmFtZUlucHV0LnN0eWxlLmhlaWdodCA9ICdmaXQtY29udGVudCc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuYW1lSW5wdXQuc3R5bGUud2lkdGggPSAnZml0LWNvbnRlbnQnO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMubGFuZ3VhZ2UgIT09ICdQaG90b2xhbmcnKSB7XG5cdFx0XHRcdHRoaXMuTG9hZENoYXJhY3RlckNvbG9yU2VsZWN0aW9uVUkoc252LCBkaXYsIGNoYXJFZGl0b3JEaXYsIGN1cnJlbnRJbmRleCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLkRpc3BsYXlUZXh0KGNoYXJEaXYsIDI1LCB0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5uYW1lKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgYWRkQ2hhckJ1dHRvbiA9IGNoYXJFZGl0b3JEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0FkZCBDaGFyYWN0ZXInIH0gKTtcblx0XHRhZGRDaGFyQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLmNoYXJhY3RlcnMucHVzaChuZXcgQ2hhcmFjdGVyKCkpO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRjaGFyRWRpdG9yRGl2LnJlbW92ZSgpO1xuXHRcdFx0dGhpcy5Mb2FkQ2hhcmFjdGVyRWRpdG9yVUkoc252LCBkaXYpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgTG9hZENoYXJhY3RlckNvbG9yU2VsZWN0aW9uVUkoc252OiBTb3VyY2VBbmRWYXVsdCwgZGl2OiBIVE1MRGl2RWxlbWVudCwgY2hhckVkaXRvckRpdjogSFRNTERpdkVsZW1lbnQsIGN1cnJlbnRJbmRleDogbnVtYmVyKSB7XG5cdFx0Y29uc3QgY29sb3JEaXYgPSBjaGFyRWRpdG9yRGl2LmNyZWF0ZURpdigpO1xuXHRcdGNvbG9yRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICd2Ym94JyA6ICdoYm94Jztcblx0XHRjb2xvckRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1RleHQgQ29sb3I6JyB9ICk7XG5cdFx0Y29uc3QgY29sb3JJbnB1dCA9IGNvbG9yRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2NvbG9yJywgdmFsdWU6IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50SW5kZXhdLmNvbG9yIH0gKTtcblx0XHRjb2xvckRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0JhY2tncm91bmQgQ29sb3I6JyB9ICk7XG5cdFx0Y29uc3QgYmFja2dyb3VuZElucHV0ID0gY29sb3JEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnY29sb3InLCB2YWx1ZTogdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uYmFja2dyb3VuZENvbG9yIH0gKTtcblx0XHRjb25zdCBzd2FwQnV0dG9uID0gY29sb3JEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1N3YXAnIH0gKTtcblx0XHRjb2xvcklucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3IgPSBjb2xvcklucHV0LnZhbHVlO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0fVxuXHRcdGJhY2tncm91bmRJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50SW5kZXhdLmJhY2tncm91bmRDb2xvciA9IGJhY2tncm91bmRJbnB1dC52YWx1ZTtcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdH1cblx0XHRzd2FwQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcklucHV0LnZhbHVlO1xuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3IgPSBiYWNrZ3JvdW5kSW5wdXQudmFsdWU7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdGNoYXJFZGl0b3JEaXYucmVtb3ZlKCk7XG5cdFx0XHR0aGlzLkxvYWRDaGFyYWN0ZXJFZGl0b3JVSShzbnYsIGRpdik7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBMb2FkUGFnZVNlbGVjdG9yKHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0Y29uc3QgYnV0dG9uc0RpdiA9IG1haW5EaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0Y29uc3QgYmFja0J1dHRvbiA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJy0nIH0gKTtcblx0XHRjb25zdCBwYWdlTnVtYmVySW5wdXQgPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogJycgKyAodGhpcy5jdXJyZW50UGFnZUluZGV4ICsgMSkgfSApO1xuXHRcdGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICcnICsgJy8nICsgdGhpcy5wYWdlcy5sZW5ndGggfSApO1xuXHRcdGNvbnN0IG5leHRCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICcrJyB9ICk7XG5cdFx0Y29uc3QgZGVsZXRlQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnRGVsZXRlIFBhZ2UnIH0gKTtcblx0XHRkZWxldGVCdXR0b24uY2xhc3NOYW1lID0gJ2NmZS1yZW1vdmUtYnV0dG9uJztcblx0XHRjb25zdCBhZGRCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdBZGQgUGFnZScgfSApO1xuXHRcdGNvbnN0IGVkaXRNb2RlQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnRWRpdCBNb2RlJyB9ICk7XG5cdFx0Y29uc3Qgdmlld01vZGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdWaWV3IE1vZGUnIH0gKTtcblx0XHRjb25zdCBob21lQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnUmV0dXJuIHRvIFN0b3J5JyB9ICk7XG5cdFx0aG9tZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgdGhpcy5Mb2FkU3RvcnlVSShzbnYsIG1haW5EaXYpO1xuXHRcdH1cblx0XHRlZGl0TW9kZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgdGhpcy5Mb2FkQ3VycmVudFBhZ2VFZGl0KHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXHRcdHZpZXdNb2RlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRhd2FpdCB0aGlzLkxvYWRDdXJyZW50UGFnZURpc3BsYXlPbmx5KHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXHRcdGJhY2tCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGlmICh0aGlzLmN1cnJlbnRQYWdlSW5kZXggPiAwKSB7XG5cdFx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleC0tO1xuXHRcdFx0XHRhd2FpdCB0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LCBtYWluRGl2KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0bmV4dEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0aWYgKHRoaXMuY3VycmVudFBhZ2VJbmRleCA8IHRoaXMucGFnZXMubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleCsrO1xuXHRcdFx0XHRhd2FpdCB0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LCBtYWluRGl2KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cGFnZU51bWJlcklucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dGhpcy5jdXJyZW50UGFnZUluZGV4ID0gcGFyc2VJbnQocGFnZU51bWJlcklucHV0LnZhbHVlKSAtIDE7XG5cdFx0XHRhd2FpdCB0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LCBtYWluRGl2KTtcblx0XHR9XG5cdFx0ZGVsZXRlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLnBhZ2VzLnNwbGljZSh0aGlzLmN1cnJlbnRQYWdlSW5kZXgsIDEpO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRpZiAodGhpcy5jdXJyZW50UGFnZUluZGV4ICE9PSAwKSB7XG5cdFx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleC0tO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgdGhpcy5Mb2FkQ3VycmVudFBhZ2VFZGl0KHNudixtYWluRGl2KTtcblx0XHR9XG5cdFx0YWRkQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBkZWZhdWx0UGFnZSA9IG5ldyBQYWdlKCk7XG5cdFx0XHRjb25zdCB0aGlzUGFnZUZpbGVJRCA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYUZpbGVJRDtcblx0XHRcdGlmICh0aGlzUGFnZUZpbGVJRCAhPT0gLTEgJiYgdGhpc1BhZ2VGaWxlSUQgPCBzbnYuc291cmNlRm9sZGVyLmZpbGVDb3VudCkge1xuXHRcdFx0XHRkZWZhdWx0UGFnZS5tZWRpYUZpbGVJRCA9IHRoaXNQYWdlRmlsZUlEO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5wYWdlcy5zcGxpY2UodGhpcy5jdXJyZW50UGFnZUluZGV4ICsgMSwgMCwgZGVmYXVsdFBhZ2UpO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHR0aGlzLmN1cnJlbnRQYWdlSW5kZXgrKztcblx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsbWFpbkRpdik7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBMb2FkQ3VycmVudFBhZ2VFZGl0KHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0bWFpbkRpdi5lbXB0eSgpO1xuXHRcdHRoaXMuTG9hZFBhZ2VTZWxlY3RvcihzbnYsIG1haW5EaXYpO1xuXG5cdFx0bWFpbkRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ01lZGlhIEZpbGUgSUQ6JyB9ICk7XG5cdFx0Y29uc3QgbWVkaWFGaWxlSURJbnB1dCA9IG1haW5EaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcgfSApO1xuXHRcdFxuXHRcdGNvbnN0IHBhbmVsRGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRjb25zdCBvdXRlck1lZGlhRGl2ID0gcGFuZWxEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0Y29uc3QgbGluZXNEaXYgPSBwYW5lbERpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcblx0XHRjb25zdCBtZWRpYVdpZHRoSW5wdXQgPSBvdXRlck1lZGlhRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnIH0gKTtcblx0XHRtZWRpYVdpZHRoSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRvdXRlck1lZGlhRGl2LnN0eWxlLndpZHRoID0gbWVkaWFXaWR0aElucHV0LnZhbHVlICsgJyUnO1xuXHRcdFx0bGluZXNEaXYuc3R5bGUud2lkdGggPSAxMDAgLSBwYXJzZUludChtZWRpYVdpZHRoSW5wdXQudmFsdWUpICsgJyUnO1xuXHRcdFx0dGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLm1lZGlhU2l6ZVBlcmNlbnRhZ2UgPSBwYXJzZUludChtZWRpYVdpZHRoSW5wdXQudmFsdWUpO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbWVkaWFEaXYgPSBvdXRlck1lZGlhRGl2LmNyZWF0ZURpdigndmJveCcpO1xuXHRcdG91dGVyTWVkaWFEaXYuc3R5bGUud2lkdGggPSAnNTAlJztcblx0XHRtZWRpYURpdi5zdHlsZS5vYmplY3RGaXQgPSAnY29udGFpbic7XG5cdFx0bGluZXNEaXYuc3R5bGUud2lkdGggPSAnNTAlJztcblx0XHRsaW5lc0Rpdi5zdHlsZS5tYXhIZWlnaHQgPSAnODB2aCc7XG5cdFx0bGluZXNEaXYuc3R5bGUucG9zaXRpb24gPSAnc3RpY2t5Jztcblx0XHRsaW5lc0Rpdi5zdHlsZS50b3AgPSAnMCUnO1xuXG5cdFx0aWYgKHRoaXMuY3VycmVudFBhZ2VJbmRleCA8IHRoaXMucGFnZXMubGVuZ3RoKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XTtcblx0XHRcdGNvbnN0IG1lZGlhRmlsZUlEID0gY3VycmVudFBhZ2UubWVkaWFGaWxlSUQ7XG5cdFx0XHRtZWRpYUZpbGVJRElucHV0LnZhbHVlID0gJycgKyBjdXJyZW50UGFnZS5tZWRpYUZpbGVJRDtcblx0XHRcdGlmIChtZWRpYUZpbGVJRCA+IDApIHtcblx0XHRcdFx0Y29uc3QgbWVkaWFGaWxlID0gPFNpbmdsZU1lZGlhRmlsZT4gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCBtZWRpYUZpbGVJRCk7XG5cdFx0XHRcdGF3YWl0IG1lZGlhRmlsZS5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYVNpemVQZXJjZW50YWdlKSB7XG5cdFx0XHRcdG1lZGlhV2lkdGhJbnB1dC52YWx1ZSA9ICcnICsgdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLm1lZGlhU2l6ZVBlcmNlbnRhZ2U7XG5cdFx0XHRcdG91dGVyTWVkaWFEaXYuc3R5bGUud2lkdGggPSBtZWRpYVdpZHRoSW5wdXQudmFsdWUgKyAnJSc7XG5cdFx0XHRcdGxpbmVzRGl2LnN0eWxlLndpZHRoID0gMTAwIC0gcGFyc2VJbnQobWVkaWFXaWR0aElucHV0LnZhbHVlKSArICclJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lZGlhV2lkdGhJbnB1dC52YWx1ZSA9ICc1MCc7XG5cdFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYVNpemVQZXJjZW50YWdlID0gNTA7XG5cdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBkZWZhdWx0UGFnZSA9IG5ldyBQYWdlKCk7XG5cdFx0XHRjb25zdCBsYXN0UGFnZSA9IHRoaXMuY3VycmVudFBhZ2VJbmRleCAtIDE7XG5cdFx0XHRpZiAobGFzdFBhZ2UgPj0gMCAmJiB0aGlzLmN1cnJlbnRQYWdlSW5kZXggIT09IDApIHtcblx0XHRcdFx0Y29uc3QgbGFzdFBhZ2VGaWxlSUQgPSB0aGlzLnBhZ2VzW2xhc3RQYWdlXS5tZWRpYUZpbGVJRDtcblx0XHRcdFx0Y29uc3QgbGFzdFBhZ2VTaXplID0gdGhpcy5wYWdlc1tsYXN0UGFnZV0ubWVkaWFTaXplUGVyY2VudGFnZTtcblx0XHRcdFx0ZGVmYXVsdFBhZ2UubWVkaWFTaXplUGVyY2VudGFnZSA9IGxhc3RQYWdlU2l6ZTtcblx0XHRcdFx0bWVkaWFXaWR0aElucHV0LnZhbHVlID0gJycgKyBsYXN0UGFnZVNpemU7XG5cdFx0XHRcdG91dGVyTWVkaWFEaXYuc3R5bGUud2lkdGggPSBtZWRpYVdpZHRoSW5wdXQudmFsdWUgKyAnJSc7XG5cdFx0XHRcdGxpbmVzRGl2LnN0eWxlLndpZHRoID0gMTAwIC0gcGFyc2VJbnQobWVkaWFXaWR0aElucHV0LnZhbHVlKSArICclJztcblx0XHRcdFx0aWYgKGxhc3RQYWdlRmlsZUlEICE9PSAtMSAmJiBsYXN0UGFnZUZpbGVJRCA8IHNudi5zb3VyY2VGb2xkZXIuZmlsZUNvdW50KSB7XG5cdFx0XHRcdFx0Y29uc3QgbWVkaWFGaWxlSUQgPSBsYXN0UGFnZUZpbGVJRCArIDE7XG5cdFx0XHRcdFx0ZGVmYXVsdFBhZ2UubWVkaWFGaWxlSUQgPSBtZWRpYUZpbGVJRDtcblx0XHRcdFx0XHRtZWRpYUZpbGVJRElucHV0LnZhbHVlID0gJycgKyBtZWRpYUZpbGVJRDtcblx0XHRcdFx0XHRpZiAobWVkaWFGaWxlSUQgPiAwKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBtZWRpYUZpbGUgPSA8U2luZ2xlTWVkaWFGaWxlPiBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIG1lZGlhRmlsZUlEKTtcblx0XHRcdFx0XHRcdGF3YWl0IG1lZGlhRmlsZS5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5wYWdlcy5wdXNoKGRlZmF1bHRQYWdlKTtcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdH1cblx0XHRhd2FpdCB0aGlzLkxvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnYsIGxpbmVzRGl2KTtcblx0XHRtZWRpYUZpbGVJRElucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0Y29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF07XG5cdFx0XHRjdXJyZW50UGFnZS5tZWRpYUZpbGVJRCA9IHBhcnNlSW50KG1lZGlhRmlsZUlESW5wdXQudmFsdWUpO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRjb25zdCBtZWRpYUZpbGUgPSA8U2luZ2xlTWVkaWFGaWxlPiBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIGN1cnJlbnRQYWdlLm1lZGlhRmlsZUlEKTtcblx0XHRcdGF3YWl0IG1lZGlhRmlsZS5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgTG9hZEN1cnJlbnRQYWdlRGlzcGxheU9ubHkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRtYWluRGl2LmVtcHR5KCk7XG5cblx0XHR0aGlzLkxvYWRQYWdlU2VsZWN0b3Ioc252LCBtYWluRGl2KTtcblx0XHRcblx0XHRjb25zdCBwYW5lbERpdiA9IG1haW5EaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0Y29uc3Qgb3V0ZXJNZWRpYURpdiA9IHBhbmVsRGl2LmNyZWF0ZURpdigndmJveCcpO1xuXHRcdGNvbnN0IGxpbmVzRGl2ID0gcGFuZWxEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cblx0XHRjb25zdCBtZWRpYURpdiA9IG91dGVyTWVkaWFEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0b3V0ZXJNZWRpYURpdi5zdHlsZS53aWR0aCA9ICc1MCUnO1xuXHRcdG1lZGlhRGl2LnN0eWxlLm9iamVjdEZpdCA9ICdjb250YWluJztcblx0XHRsaW5lc0Rpdi5zdHlsZS53aWR0aCA9ICc1MCUnO1xuXHRcdGxpbmVzRGl2LnN0eWxlLm1heEhlaWdodCA9ICc4MHZoJztcblx0XHRsaW5lc0Rpdi5zdHlsZS5wb3NpdGlvbiA9ICdzdGlja3knO1xuXHRcdGxpbmVzRGl2LnN0eWxlLnRvcCA9ICcwJSc7XG5cblx0XHRjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XTtcblx0XHRjb25zdCBtZWRpYUZpbGVJRCA9IGN1cnJlbnRQYWdlLm1lZGlhRmlsZUlEO1xuXHRcdGlmIChtZWRpYUZpbGVJRCA+IDApIHtcblx0XHRcdGNvbnN0IG1lZGlhRmlsZSA9IDxTaW5nbGVNZWRpYUZpbGU+IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgbWVkaWFGaWxlSUQpO1xuXHRcdFx0YXdhaXQgbWVkaWFGaWxlLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubWVkaWFTaXplUGVyY2VudGFnZSkge1xuXHRcdFx0Y29uc3Qgd2lkdGggPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubWVkaWFTaXplUGVyY2VudGFnZTtcblx0XHRcdG91dGVyTWVkaWFEaXYuc3R5bGUud2lkdGggPSB3aWR0aCArICclJztcblx0XHRcdGxpbmVzRGl2LnN0eWxlLndpZHRoID0gMTAwIC0gd2lkdGggKyAnJSc7XG5cdFx0fVxuXHRcdGF3YWl0IHRoaXMuTG9hZERpYWxvZ3VlTGluZXNEaXNwbGF5T25seShsaW5lc0Rpdik7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIExvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnY6IFNvdXJjZUFuZFZhdWx0LCBsaW5lc0RpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRsaW5lc0Rpdi5lbXB0eSgpO1xuXG5cdFx0Y29uc3Qgc3BlYWtEaXYgPSBsaW5lc0Rpdi5jcmVhdGVEaXYoKTtcblx0XHRzcGVha0Rpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0c3BlYWtEaXYuc3R5bGUudG9wID0gJzBweCc7XG5cdFx0c3BlYWtEaXYuc3R5bGUubGVmdCA9ICcwcHgnO1xuXG5cdFx0Y29uc3QgZXhpc3RpbmdMaW5lc0RpdiA9IGxpbmVzRGl2LmNyZWF0ZURpdigpO1xuXHRcdGV4aXN0aW5nTGluZXNEaXYuY2xhc3NOYW1lID0gdGhpcy5kb1ZlcnRpY2FsID8gJ2hib3gnIDogJ3Zib3gnO1xuXHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdGV4aXN0aW5nTGluZXNEaXYuc3R5bGUub3ZlcmZsb3dYID0gJ3Njcm9sbCc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4aXN0aW5nTGluZXNEaXYuc3R5bGUub3ZlcmZsb3dZID0gJ3Njcm9sbCc7XG5cdFx0fVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50SW5kZXggPSBpO1xuXHRcdFx0Y29uc3QgY3VycmVudExpbmUgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbaV07XG5cdFx0XHRjb25zdCBzcGVha2VyID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRMaW5lLnNwZWFrZXJJbmRleF07XG5cblx0XHRcdGNvbnN0IGxpbmVEaXYgPSBleGlzdGluZ0xpbmVzRGl2LmNyZWF0ZURpdigpO1xuXHRcdFx0bGluZURpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAndmJveCcgOiAnaGJveCc7XG5cblx0XHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGxpbmVEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJy0nIH0gKTtcblx0XHRcdGRlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSAnY2ZlLXJlbW92ZS1idXR0b24nO1xuXHRcdFx0ZGVsZXRlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcblx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRcdGF3YWl0IHRoaXMuTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudiwgbGluZXNEaXYpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xuXHRcdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChkZWxldGVCdXR0b24pO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBpbmRleFRleHRFbCA9IHRoaXMuRGlzcGxheVRleHQobGluZURpdiwgMjUsICcnICsgY3VycmVudEluZGV4KTtcblx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdFx0dGhpcy5NYWtlVmVydGljYWwoaW5kZXhUZXh0RWwpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5sYW5ndWFnZSA9PT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdFx0Y29uc3QgcGxheUJ1dHRvbiA9IGxpbmVEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1x1MjVCNycgfSApO1xuXHRcdFx0XHRwbGF5QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgcG9wdXAgPSBzcGVha0Rpdi5jcmVhdGVEaXYoKTtcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0XHRcdFx0cG9wdXAuc3R5bGUudG9wID0gJzBweCc7XG5cdFx0XHRcdFx0cG9wdXAuc3R5bGUubGVmdCA9ICcwcHgnO1xuXHRcdFx0XHRcdGNvbnN0IHBob3RvbGluZSA9IG5ldyBQaG90b0xpbmUobGluZUlucHV0LnZhbHVlKTtcblx0XHRcdFx0XHRwaG90b2xpbmUuU3BlYWsocG9wdXAsIDIwMCwgWzEwMCwgMjUwLCA1MDBdLCBbMCwgNTAwXSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChwbGF5QnV0dG9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBjaGFyRHJvcGRvd25CdXR0b24gPSBsaW5lRGl2LmNyZWF0ZURpdigpO1xuXHRcdFx0Y29uc3QgY2hhckRyb3Bkb3duRGl2ID0gY2hhckRyb3Bkb3duQnV0dG9uLmNyZWF0ZURpdigpO1xuXHRcdFx0Y2hhckRyb3Bkb3duRGl2LnN0eWxlLmhlaWdodCA9ICdmaXQtY29udGVudCc7XG5cdFx0XHRjaGFyRHJvcGRvd25EaXYuc3R5bGUud2lkdGggPSAnZml0LWNvbnRlbnQnO1xuXHRcdFx0Y2hhckRyb3Bkb3duRGl2LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblx0XHRcdGNoYXJEcm9wZG93bkJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBzZWxlY3REaXYgPSBjaGFyRHJvcGRvd25EaXYuY3JlYXRlRGl2KCk7XG5cdFx0XHRcdHNlbGVjdERpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAnaGJveCcgOiAndmJveCc7XG5cdFx0XHRcdHNlbGVjdERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0XHRcdHNlbGVjdERpdi5zdHlsZS50b3AgPSAnMCUnO1xuXHRcdFx0XHRzZWxlY3REaXYuc3R5bGUubGVmdCA9ICcwJSc7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgY3VycmVudENoYXJJbmRleCA9IGk7XG5cdFx0XHRcdFx0Y29uc3QgY3VycmVudENoYXIgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudENoYXJJbmRleF07XG5cdFx0XHRcdFx0Y29uc3QgY3VycmVudE9wdGlvbiA9IHNlbGVjdERpdi5jcmVhdGVEaXYoKTtcblx0XHRcdFx0XHRpZiAodGhpcy5kb1ZlcnRpY2FsKSB7XG5cdFx0XHRcdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChjdXJyZW50T3B0aW9uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMubGFuZ3VhZ2UgIT09ICdQaG90b2xhbmcnKSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50T3B0aW9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGN1cnJlbnRDaGFyLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuY29sb3IgPSBjdXJyZW50Q2hhci5jb2xvcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS56SW5kZXggPSAnMic7XG5cdFx0XHRcdFx0dGhpcy5EaXNwbGF5VGV4dChjdXJyZW50T3B0aW9uLCAyNSwgY3VycmVudENoYXIubmFtZSk7XG5cdFx0XHRcdFx0Y3VycmVudE9wdGlvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzW2N1cnJlbnRJbmRleF0uc3BlYWtlckluZGV4ID0gY3VycmVudENoYXJJbmRleDtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0XHRcdFx0dGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0VkaXQoc252LCBsaW5lc0Rpdik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG5hbWVFbCA9IHRoaXMuRGlzcGxheVRleHQoY2hhckRyb3Bkb3duRGl2LCAyNSwgdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRMaW5lLnNwZWFrZXJJbmRleF0ubmFtZSk7XG5cdFx0XHRpZiAodGhpcy5kb1ZlcnRpY2FsKSB7XG5cdFx0XHRcdHRoaXMuTWFrZVZlcnRpY2FsKG5hbWVFbCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5sYW5ndWFnZSAhPT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdFx0bmFtZUVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHNwZWFrZXIuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRuYW1lRWwuc3R5bGUuY29sb3IgPSBzcGVha2VyLmNvbG9yO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBsaW5lSW5wdXQgPSB0aGlzLkRpc3BsYXlMaW5lRWRpdChsaW5lRGl2LCBjdXJyZW50TGluZSk7XG5cdFx0XHRpZiAodGhpcy5kb1ZlcnRpY2FsKSB7XG5cdFx0XHRcdGxpbmVJbnB1dC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cdFx0XHRcdHRoaXMuTWFrZVZlcnRpY2FsKGxpbmVJbnB1dCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsaW5lSW5wdXQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG5cdFx0XHR9XG5cblx0XHRcdGxpbmVJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdFx0Y3VycmVudExpbmUuY29udGVudCA9IGxpbmVJbnB1dC52YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IGFkZEJ1dHRvbiA9IGV4aXN0aW5nTGluZXNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJysnIH0gKTtcblx0XHRhZGRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5wdXNoKG5ldyBEaWFsb2d1ZUxpbmUoMCkpO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRhd2FpdCB0aGlzLkxvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnYsIGxpbmVzRGl2KTtcblx0XHR9XG5cdH1cblxuXHQvLyBwcml2YXRlIGFzeW5jIExvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnY6IFNvdXJjZUFuZFZhdWx0LCBsaW5lc0RpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0Ly8gXHRjb25zdCBleGlzdGluZ0xpbmVzRGl2ID0gbGluZXNEaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdC8vIFx0ZXhpc3RpbmdMaW5lc0Rpdi5zdHlsZS5vdmVyZmxvd1ggPSAnc2Nyb2xsJztcblx0Ly8gXHRjb25zdCBmb250U2l6ZSA9ICcxNy41cHgnO1xuXHQvLyBcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdC8vIFx0XHRjb25zdCBjdXJyZW50SW5kZXggPSBpO1xuXHQvLyBcdFx0Y29uc3QgY3VycmVudExpbmUgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbaV07XG5cdC8vIFx0XHRjb25zdCBzcGVha2VySW5kZXggPSBjdXJyZW50TGluZS5zcGVha2VySW5kZXg7XG5cdC8vIFx0XHRjb25zdCBjdXJyZW50U3BlYWtlciA9IHRoaXMuY2hhcmFjdGVyc1tzcGVha2VySW5kZXhdO1xuXHQvLyBcdFx0Y29uc3QgbGluZURpdiA9IGV4aXN0aW5nTGluZXNEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdC8vIFx0XHRjb25zdCBkZWxldGVCdXR0b24gPSBsaW5lRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICctJyB9ICk7XG5cdC8vIFx0XHRkZWxldGVCdXR0b24uY2xhc3NOYW1lID0gJ2NmZS1yZW1vdmUtYnV0dG9uJztcblx0Ly8gXHRcdGRlbGV0ZUJ1dHRvbi5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XG5cdC8vIFx0XHRkZWxldGVCdXR0b24uc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xuXHQvLyBcdFx0ZGVsZXRlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdC8vIFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcblx0Ly8gXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdC8vIFx0XHRcdGF3YWl0IHRoaXMuTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudiwgbGluZXNEaXYpO1xuXHQvLyBcdFx0fVxuXHQvLyBcdFx0Y29uc3QgaW5kZXhFbGVtZW50ID0gbGluZURpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJycgKyAgY3VycmVudEluZGV4IH0gKTtcblx0Ly8gXHRcdGluZGV4RWxlbWVudC5zdHlsZS5jb2xvciA9IGN1cnJlbnRTcGVha2VyLmNvbG9yO1xuXHQvLyBcdFx0aW5kZXhFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSAnSHdheXVSZWFsJztcblx0Ly8gXHRcdGluZGV4RWxlbWVudC5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XG5cdC8vIFx0XHRpbmRleEVsZW1lbnQuc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xuXHQvLyBcdFx0Y29uc3QgY2hhckRyb3Bkb3duRGl2ID0gbGluZURpdi5jcmVhdGVEaXYoKTtcblx0Ly8gXHRcdGNoYXJEcm9wZG93bkRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cdC8vIFx0XHRjb25zdCBjaGFyRHJvcGRvd24gPSBjaGFyRHJvcGRvd25EaXYuY3JlYXRlRWwoJ2J1dHRvbicpO1xuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmhlaWdodCA9ICdmaXQtY29udGVudCc7XG5cdC8vIFx0XHRjaGFyRHJvcGRvd24ub25jbGljayA9ICgpID0+IHtcblx0Ly8gXHRcdFx0Y29uc3Qgc2VsZWN0RGl2ID0gY2hhckRyb3Bkb3duRGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHQvLyBcdFx0XHRzZWxlY3REaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHQvLyBcdFx0XHRzZWxlY3REaXYuc3R5bGUudG9wID0gJzAlJztcblx0Ly8gXHRcdFx0c2VsZWN0RGl2LnN0eWxlLmxlZnQgPSAnMCUnO1xuXHQvLyBcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcmFjdGVycy5sZW5ndGg7IGkrKykge1xuXHQvLyBcdFx0XHRcdGNvbnN0IGN1cnJlbnRDaGFySW5kZXggPSBpO1xuXHQvLyBcdFx0XHRcdGNvbnN0IGN1cnJlbnRDaGFyID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRDaGFySW5kZXhdO1xuXHQvLyBcdFx0XHRcdGNvbnN0IGN1cnJlbnRPcHRpb24gPSBzZWxlY3REaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogY3VycmVudENoYXIubmFtZSwgdmFsdWU6ICcnICsgaSB9ICk7XG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS5jb2xvciA9IGN1cnJlbnRDaGFyLmNvbG9yO1xuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuZm9udEZhbWlseSA9ICdId2F5dVJlYWwnO1xuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY3VycmVudENoYXIuYmFja2dyb3VuZENvbG9yO1xuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUud3JpdGluZ01vZGUgPSAndmVydGljYWwtbHInO1xuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuaGVpZ2h0ID0gJ2ZpdC1jb250ZW50Jztcblx0Ly8gXHRcdFx0XHRjdXJyZW50T3B0aW9uLnN0eWxlLnpJbmRleCA9ICcyJztcblx0Ly8gXHRcdFx0XHRjdXJyZW50T3B0aW9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdC8vIFx0XHRcdFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbY3VycmVudEluZGV4XS5zcGVha2VySW5kZXggPSBjdXJyZW50Q2hhckluZGV4O1xuXHQvLyBcdFx0XHRcdFx0Y29uc3QgbmV3U3BlYWtlckNvbG9yID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRDaGFySW5kZXhdLmNvbG9yO1xuXHQvLyBcdFx0XHRcdFx0Y29uc3QgbmV3QmFja2dyb3VuZENvbG9yID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRDaGFySW5kZXhdLmJhY2tncm91bmRDb2xvcjtcblx0Ly8gXHRcdFx0XHRcdGNoYXJEcm9wZG93bi5zdHlsZS5jb2xvciA9IG5ld1NwZWFrZXJDb2xvcjtcblx0Ly8gXHRcdFx0XHRcdGNoYXJEcm9wZG93bi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBuZXdCYWNrZ3JvdW5kQ29sb3I7XG5cdC8vIFx0XHRcdFx0XHRjaGFyRHJvcGRvd24udGV4dENvbnRlbnQgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudENoYXJJbmRleF0ubmFtZTtcblx0Ly8gXHRcdFx0XHRcdGxpbmVJbnB1dC5zdHlsZS5jb2xvciA9IG5ld1NwZWFrZXJDb2xvcjtcblx0Ly8gXHRcdFx0XHRcdGxpbmVJbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBuZXdCYWNrZ3JvdW5kQ29sb3I7XG5cdC8vIFx0XHRcdFx0XHRpbmRleEVsZW1lbnQuc3R5bGUuY29sb3IgPSBuZXdTcGVha2VyQ29sb3I7XG5cdC8vIFx0XHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0Ly8gXHRcdFx0XHRcdHNlbGVjdERpdi5yZW1vdmUoKTtcblx0Ly8gXHRcdFx0XHR9XG5cdC8vIFx0XHRcdH1cblx0Ly8gXHRcdH1cblx0Ly8gXHRcdGNoYXJEcm9wZG93bi50ZXh0Q29udGVudCA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50TGluZS5zcGVha2VySW5kZXhdLm5hbWU7XG5cdC8vIFx0XHRjaGFyRHJvcGRvd24uc3R5bGUuY29sb3IgPSBjdXJyZW50U3BlYWtlci5jb2xvcjtcblx0Ly8gXHRcdGNoYXJEcm9wZG93bi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjdXJyZW50U3BlYWtlci5iYWNrZ3JvdW5kQ29sb3I7XG5cdC8vIFx0XHRjaGFyRHJvcGRvd24uc3R5bGUuZm9udEZhbWlseSA9ICdId2F5dVJlYWwnO1xuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcblx0Ly8gXHRcdGNoYXJEcm9wZG93bi5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XG5cdC8vIFx0XHRjb25zdCBsaW5lSW5wdXQgPSBsaW5lRGl2LmNyZWF0ZUVsKCd0ZXh0YXJlYScpO1xuXHQvLyBcdFx0bGluZUlucHV0LnNwZWxsY2hlY2sgPSBmYWxzZTtcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5vdmVyZmxvd1ggPSAnc2Nyb2xsJztcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xuXHQvLyBcdFx0bGluZUlucHV0LmRlZmF1bHRWYWx1ZSA9IGN1cnJlbnRMaW5lLmNvbnRlbnQ7XG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUuY29sb3IgPSBjdXJyZW50U3BlYWtlci5jb2xvcjtcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjdXJyZW50U3BlYWtlci5iYWNrZ3JvdW5kQ29sb3I7XG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUuZm9udEZhbWlseSA9ICdId2F5dVJlYWwnO1xuXHQvLyBcdFx0bGluZUlucHV0LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemU7XG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuXHQvLyBcdFx0bGluZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHQvLyBcdFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbY3VycmVudEluZGV4XS5jb250ZW50ID0gbGluZUlucHV0LnZhbHVlO1xuXHQvLyBcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0Ly8gXHRcdH1cblx0Ly8gXHR9XG5cdC8vIFx0Y29uc3QgYWRkQnV0dG9uID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnKycgfSApO1xuXHQvLyBcdGFkZEJ1dHRvbi5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cdC8vIFx0YWRkQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdC8vIFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXMucHVzaChuZXcgRGlhbG9ndWVMaW5lKDApKTtcblx0Ly8gXHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHQvLyBcdFx0YXdhaXQgdGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0VkaXQoc252LCBsaW5lc0Rpdik7XG5cdC8vIFx0fVxuXHQvLyB9XG5cblx0cHJpdmF0ZSBhc3luYyBMb2FkRGlhbG9ndWVMaW5lc0Rpc3BsYXlPbmx5KGxpbmVzRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGxpbmVzRGl2LmVtcHR5KCk7XG5cblx0XHRjb25zdCBzcGVha0RpdiA9IGxpbmVzRGl2LmNyZWF0ZURpdigpO1xuXHRcdHNwZWFrRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRzcGVha0Rpdi5zdHlsZS50b3AgPSAnMHB4Jztcblx0XHRzcGVha0Rpdi5zdHlsZS5sZWZ0ID0gJzBweCc7XG5cblx0XHRjb25zdCBleGlzdGluZ0xpbmVzRGl2ID0gbGluZXNEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0ZXhpc3RpbmdMaW5lc0Rpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAnaGJveCcgOiAndmJveCcgO1xuXHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdGV4aXN0aW5nTGluZXNEaXYuc3R5bGUub3ZlcmZsb3dYID0gJ3Njcm9sbCc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4aXN0aW5nTGluZXNEaXYuc3R5bGUub3ZlcmZsb3dZID0gJ3Njcm9sbCc7XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRMaW5lID0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzW2ldO1xuXHRcdFx0Y29uc3Qgc3BlYWtlciA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50TGluZS5zcGVha2VySW5kZXhdO1xuXHRcdFx0XG5cdFx0XHRpZiAodGhpcy5sYW5ndWFnZSA9PT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdFx0Y29uc3QgcGxheUJ1dHRvbiA9IGV4aXN0aW5nTGluZXNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1x1MjVCNycgfSApO1xuXHRcdFx0XHRwbGF5QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgcG9wdXAgPSBzcGVha0Rpdi5jcmVhdGVEaXYoKTtcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0XHRcdFx0cG9wdXAuc3R5bGUudG9wID0gJzBweCc7XG5cdFx0XHRcdFx0cG9wdXAuc3R5bGUubGVmdCA9ICcwcHgnO1xuXHRcdFx0XHRcdGNvbnN0IHBob3RvbGluZSA9IG5ldyBQaG90b0xpbmUoY3VycmVudExpbmUuY29udGVudCk7XG5cdFx0XHRcdFx0cGhvdG9saW5lLlNwZWFrKHBvcHVwLCAyMDAsIFsxMDAsIDI1MCwgNTAwXSwgWzAsIDUwMF0sIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBuYW1lRGl2ID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVEaXYoJycpO1xuXHRcdFx0bmFtZURpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAndmJveCcgOiAnaGJveCc7XG5cdFx0XHRjb25zdCBsaW5lRGl2ID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVEaXYoJycpO1xuXHRcdFx0bGluZURpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAndmJveCcgOiAnaGJveCc7XG5cblx0XHRcdGNvbnN0IG5hbWVFbCA9IHRoaXMuRGlzcGxheVRleHQobmFtZURpdiwgMjUsIHNwZWFrZXIubmFtZSk7XG5cdFx0XHRuYW1lRWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gc3BlYWtlci5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHRuYW1lRWwuc3R5bGUuY29sb3IgPSBzcGVha2VyLmNvbG9yO1xuXHRcdFx0XG5cdFx0XHRpZiAodGhpcy5sYW5ndWFnZSA9PT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdFx0Y29uc3QgcGhvdG9MaW5lID0gbmV3IFBob3RvTGluZShjdXJyZW50TGluZS5jb250ZW50KTtcblx0XHRcdFx0cGhvdG9MaW5lLkRpc3BsYXlTdGF0aWMobGluZURpdiwgMjUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgbGluZUVsID0gdGhpcy5EaXNwbGF5VGV4dChsaW5lRGl2LCAyNSwgY3VycmVudExpbmUuY29udGVudCk7XG5cdFx0XHRcdGxpbmVFbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzcGVha2VyLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdFx0bGluZUVsLnN0eWxlLmNvbG9yID0gc3BlYWtlci5jb2xvcjtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHRoaXMubGFuZ3VhZ2UgPT09ICdQaG90b2xhbmcnKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBjdXJyZW50TGluZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lc1tpXTtcblxuXHRcdFx0XHRjb25zdCBuYW1lRGl2ID0gc3BlYWtEaXYuY3JlYXRlRGl2KCk7XG5cdFx0XHRcdG5hbWVEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdFx0XHRuYW1lRGl2LnN0eWxlLnRvcCA9ICcwcHgnO1xuXHRcdFx0XHRuYW1lRGl2LnN0eWxlLmxlZnQgPSAnMHB4Jztcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IHBob3RvTmFtZSA9IG5ldyBQaG90b0xpbmUodGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRMaW5lLnNwZWFrZXJJbmRleF0ubmFtZSk7XG5cdFx0XHRcdGF3YWl0IHBob3RvTmFtZS5TcGVhayhuYW1lRGl2LCAxMDAsIFsxMDAsIDI1MCwgNTAwXSwgWzAsIDUwMF0sIGZhbHNlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IHBvcHVwID0gc3BlYWtEaXYuY3JlYXRlRGl2KCk7XG5cdFx0XHRcdHBvcHVwLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRcdFx0cG9wdXAuc3R5bGUudG9wID0gJzBweCc7XG5cdFx0XHRcdHBvcHVwLnN0eWxlLmxlZnQgPSAnMHB4JztcblxuXHRcdFx0XHRjb25zdCBwaG90b0xpbmUgPSBuZXcgUGhvdG9MaW5lKGN1cnJlbnRMaW5lLmNvbnRlbnQpO1xuXHRcdFx0XHRhd2FpdCBwaG90b0xpbmUuU3BlYWsocG9wdXAsIDIwMCwgWzEwMCwgMjUwLCA1MDBdLCBbMCwgNTAwXSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG59XG5cbmNsYXNzIFBhZ2Uge1xuXHRtZWRpYUZpbGVJRDogbnVtYmVyO1xuXHRsaW5lczogRGlhbG9ndWVMaW5lW107XG5cdG1lZGlhU2l6ZVBlcmNlbnRhZ2U6IG51bWJlcjtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5tZWRpYUZpbGVJRCA9IC0xO1xuXHRcdHRoaXMubGluZXMgPSBbXTtcblx0XHR0aGlzLm1lZGlhU2l6ZVBlcmNlbnRhZ2UgPSA1MDtcblx0fVxufVxuXG5jbGFzcyBEaWFsb2d1ZUxpbmUge1xuXHRzcGVha2VySW5kZXg6IG51bWJlcjtcblx0Y29udGVudDogc3RyaW5nO1xuXHRjb25zdHJ1Y3RvcihzcGVha2VySW5kZXg6IG51bWJlcikge1xuXHRcdHRoaXMuc3BlYWtlckluZGV4ID0gc3BlYWtlckluZGV4O1xuXHRcdHRoaXMuY29udGVudCA9ICcnO1xuXHR9XG59XG5cbmNsYXNzIENoYXJhY3RlciB7XG5cdG5hbWU6IHN0cmluZztcblx0Y29sb3I6IHN0cmluZztcblx0YmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG5cdGNvbnN0cnVjdG9yKG5hbWUgPSAnJywgY29sb3IgPSAnd2hpdGUnLCBiYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnKSB7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmNvbG9yID0gY29sb3I7XG5cdFx0dGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3I7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBDRkVGaWxlIH0gZnJvbSBcIi4vY2ZlLWZpbGVcIjtcbmltcG9ydCB7IEZvbGRlciB9IGZyb20gXCIuL2ZvbGRlclwiO1xuaW1wb3J0IHsgUGxheWxpc3QgfSBmcm9tIFwiLi9wbGF5bGlzdFwiO1xuaW1wb3J0IHsgU2luZ2xlTWVkaWFGaWxlIH0gZnJvbSBcIi4vc2luZ2xlLW1lZGlhLWZpbGVcIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5pbXBvcnQgeyBWYXJpYW50TWVkaWFGaWxlIH0gZnJvbSBcIi4vdmFyaWFudC1tZWRpYS1maWxlXCI7XG5pbXBvcnQgeyBTb3VyY2VGb2xkZXJTaG9ydGN1dCB9IGZyb20gXCIuL3NvdXJjZS1mb2xkZXItc2hvcnRjdXRcIjtcbmltcG9ydCB7IENvbmxhbmdEaWN0aW9uYXJ5IH0gZnJvbSBcIi4vY29ubGFuZy1kaWN0aW9uYXJ5XCI7XG5pbXBvcnQgeyBTdG9yeSB9IGZyb20gXCIuL3N0b3J5XCI7XG5cbmV4cG9ydCBjbGFzcyBDRkVGaWxlSGFuZGxlciB7XG5cblx0LyoqXG5cdCAqIEFsbCBvZiB0aGUga25vd24gZmlsZSBmb3JtYXRzXG5cdCAqL1xuXHRzdGF0aWMgS25vd25GaWxlVHlwZXM6IHN0cmluZ1tdID0gW1xuXHRcdCdGb2xkZXInLFxuXHRcdCdTaW5nbGUgTWVkaWEgRmlsZScsXG5cdFx0J1ZhcmlhbnQgTWVkaWEgRmlsZScsXG5cdFx0J1BsYXlsaXN0Jyxcblx0XHQnU3RvcnknLFxuXHRcdCdTb3VyY2UgRm9sZGVyIFNob3J0Y3V0Jyxcblx0XHQnQ29ubGFuZyBEaWN0aW9uYXJ5J1xuXHRdXG5cblx0c3RhdGljIGFzeW5jIENyZWF0ZU5ldyhzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPENGRUZpbGU+IHtcblx0XHRsZXQgbmV3RmlsZTogQ0ZFRmlsZTtcblx0XHRzd2l0Y2goZmlsZVR5cGUpIHtcblx0XHRcdGNhc2UgJ0ZvbGRlcic6XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRuZXdGaWxlID0gYXdhaXQgRm9sZGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCwgbmFtZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnU2luZ2xlIE1lZGlhIEZpbGUnOlxuXHRcdFx0XHRuZXdGaWxlID0gYXdhaXQgU2luZ2xlTWVkaWFGaWxlLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCwgbmFtZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnVmFyaWFudCBNZWRpYSBGaWxlJzpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IFZhcmlhbnRNZWRpYUZpbGUuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklELCBuYW1lKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQbGF5bGlzdCc6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBQbGF5bGlzdC5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252LCBmaWxlVHlwZSwgcGFyZW50Rm9sZGVySUQsIG5hbWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1N0b3J5Jzpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IFN0b3J5LkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCwgbmFtZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnU291cmNlIEZvbGRlciBTaG9ydGN1dCc6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBTb3VyY2VGb2xkZXJTaG9ydGN1dC5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252LCBmaWxlVHlwZSwgcGFyZW50Rm9sZGVySUQsIG5hbWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0NvbmxhbmcgRGljdGlvbmFyeSc6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBDb25sYW5nRGljdGlvbmFyeS5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252LCBmaWxlVHlwZSwgcGFyZW50Rm9sZGVySUQsIG5hbWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0YXdhaXQgbmV3RmlsZS5TYXZlKHNudik7XG5cdFx0cmV0dXJuIG5ld0ZpbGU7XG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgTG9hZEZpbGUoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZUlEOiBudW1iZXIpOiBQcm9taXNlPENGRUZpbGU+IHtcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzbnYuc291cmNlRm9sZGVyO1xuXHRcdGNvbnN0IHZhdWx0ID0gc252LnZhdWx0O1xuXG5cdFx0Y29uc3QgdEZpbGUgPSB2YXVsdC5nZXRGaWxlQnlQYXRoKHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyBmaWxlSUQgKyAnLmpzb24nKTtcblx0XHRpZiAodEZpbGUgPT09IG51bGwpIHtcblx0XHRcdHRocm93IEVycm9yKFwiRmlsZSBjb3VsZCBub3QgYmUgZm91bmQgYXQgdGhlIHBhdGg6IFwiICsgc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvJyArIGZpbGVJRCArICcuanNvbicpO1xuXHRcdH1cblx0XHRjb25zdCBqc29uRGF0YSA9IGF3YWl0IHZhdWx0LmNhY2hlZFJlYWQodEZpbGUpO1xuXHRcdGNvbnN0IHBsYWluT2JqZWN0ID0gSlNPTi5wYXJzZShqc29uRGF0YSk7XG5cdFx0c3dpdGNoKHBsYWluT2JqZWN0LmZpbGVUeXBlKSB7XG5cdFx0XHRjYXNlICdGb2xkZXInOlxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIGF3YWl0IE9iamVjdC5hc3NpZ24obmV3IEZvbGRlcigpLCBwbGFpbk9iamVjdCk7XG5cdFx0XHRjYXNlICdTaW5nbGUgTWVkaWEgRmlsZSc6XG5cdFx0XHRcdHJldHVybiBhd2FpdCBPYmplY3QuYXNzaWduKG5ldyBTaW5nbGVNZWRpYUZpbGUoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnVmFyaWFudCBNZWRpYSBGaWxlJzpcblx0XHRcdFx0cmV0dXJuIGF3YWl0IE9iamVjdC5hc3NpZ24obmV3IFZhcmlhbnRNZWRpYUZpbGUoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnUGxheWxpc3QnOlxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgT2JqZWN0LmFzc2lnbihuZXcgUGxheWxpc3QoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnU3RvcnknOlxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgT2JqZWN0LmFzc2lnbihuZXcgU3RvcnkoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnU291cmNlIEZvbGRlciBTaG9ydGN1dCc6XG5cdFx0XHRcdHJldHVybiBhd2FpdCBPYmplY3QuYXNzaWduKG5ldyBTb3VyY2VGb2xkZXJTaG9ydGN1dCgpLCBwbGFpbk9iamVjdCk7XG5cdFx0XHRjYXNlICdDb25sYW5nIERpY3Rpb25hcnknOlxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgT2JqZWN0LmFzc2lnbihuZXcgQ29ubGFuZ0RpY3Rpb25hcnkoKSwgcGxhaW5PYmplY3QpO1xuXHRcdH1cblx0fVxufVxuIiwgImltcG9ydCB7IFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBTb3VyY2VGb2xkZXIgfSBmcm9tIFwiLi9zb3VyY2UtZm9sZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBTb3VyY2VBbmRWYXVsdCB7XG5cdHNvdXJjZUZvbGRlcjogU291cmNlRm9sZGVyO1xuXHR2YXVsdDogVmF1bHQ7XG5cdGNvbnN0cnVjdG9yKHNvdXJjZUZvbGRlcjogU291cmNlRm9sZGVyLCB2YXVsdDogVmF1bHQpIHtcblx0XHR0aGlzLnNvdXJjZUZvbGRlciA9IHNvdXJjZUZvbGRlcjtcblx0XHR0aGlzLnZhdWx0ID0gdmF1bHQ7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQ0FBLElBQUFBLG1CQUF3Qzs7O0FDQXhDLElBQUFDLG1CQUE2Qzs7O0FDQTdDLHNCQUE4QjtBQWN2QixJQUFNLFdBQU4sTUFBYztBQUFBO0FBQUE7QUFB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aUIsVUFBVSxTQUFTLENBQUMsUUFBb0I7QUFDN0QsY0FBUSxJQUFJLFNBQVMsR0FBRztBQUFBLElBQ3pCLENBQUM7QUFHRCxTQUFLLGlCQUFpQixPQUFPLFlBQVksTUFBTSxRQUFRLElBQUksYUFBYSxHQUFHLElBQUksS0FBSyxHQUFJLENBQUM7QUFBQSxFQUMxRjtBQUFBLEVBRUEsV0FBVztBQUFBLEVBRVg7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzFFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFBQSxFQUVBLE1BQU0sYUFBYSxXQUFtQjtBQUNyQyxVQUFNLEVBQUUsVUFBVSxJQUFJLEtBQUs7QUFFM0IsUUFBSSxPQUE2QjtBQUVqQyxXQUFPLFVBQVUsUUFBUSxLQUFLO0FBQzlCLFFBQUksU0FBUyxNQUFNO0FBQ2xCLFVBQUksd0JBQU8sZ0RBQWdEO0FBQzNEO0FBQUEsSUFDRDtBQUNBLFVBQU0sS0FBSyxhQUFhLEVBQUUsTUFBTSxXQUFXLFFBQVEsS0FBSyxDQUFDO0FBR3pELGNBQVUsV0FBVyxJQUFJO0FBQUEsRUFDMUI7QUFDRDtBQUVBLElBQU0sbUJBQU4sY0FBK0Isa0NBQWlCO0FBQUEsRUFHL0MsWUFBWSxLQUFVLFFBQWE7QUFDbEMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDZjtBQUFBLEVBRUEsVUFBZ0I7QUFDZixVQUFNLEVBQUMsWUFBVyxJQUFJO0FBRXRCLGdCQUFZLE1BQU07QUFFbEIsUUFBSSx5QkFBUSxXQUFXLEVBQ3JCLFFBQVEscUJBQXFCLEVBQzdCLFFBQVEsNkRBQTZELEVBQ3JFLFFBQVEsVUFBUSxLQUNmLGVBQWUscUJBQXFCLEVBQ3BDLFNBQVMsS0FBSyxPQUFPLFNBQVMsV0FBVyxFQUN6QyxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxjQUFjO0FBQ25DLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFBQSxFQUNMO0FBQ0Q7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImkiLCAiaW1wb3J0X29ic2lkaWFuIl0KfQo=
