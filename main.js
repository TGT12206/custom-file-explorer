/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CFE
});
module.exports = __toCommonJS(main_exports);

// classes/custom-explorer-view.ts
var import_obsidian5 = require("obsidian");

// classes/source-folder.ts
var import_obsidian4 = require("obsidian");

// classes/cfe-file-handler.ts
var import_obsidian3 = require("obsidian");

// classes/cfe-file.ts
var import_obsidian = require("obsidian");
var _CFEFile = class {
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.CreateNew() instead.
   * 
   * CHILD CLASSES SHOULD NOT WRITE TO A FILE. THIS IS DONE INSIDE OF CFEFileHandler
   * 
   * CFEFile layer:
   * 
   * sets the source, id, file type, file name, and parent folder id of the file object.
   */
  static async CreateNewFileForLayer(data) {
    const sourceAndVault = data.snv;
    const sourceFolder = sourceAndVault.sourceFolder;
    const unfinishedFile = new _CFEFile();
    unfinishedFile.id = sourceFolder.fileCount;
    unfinishedFile.fileType = data.fileType;
    unfinishedFile.fileName = "";
    unfinishedFile.parentFolderID = data.parentFolderID;
    sourceFolder.fileCount++;
    await SourceFolder.Save(sourceAndVault);
    if (unfinishedFile.id !== unfinishedFile.parentFolderID) {
      const parentFolder = await CFEFileHandler.LoadFile(sourceAndVault, unfinishedFile.parentFolderID);
      parentFolder.containedFileIDs.push(unfinishedFile.id);
      await parentFolder.Save(sourceAndVault);
    }
    return unfinishedFile;
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.DisplayThumbnail() instead.
   * 
   * CFEFile layer:
   * 
   * sets the thumbnail container's css class to 'cfe-thumbnail'
   * and fully displays the file if the thumbnail is clicked.
   */
  async DisplayThumbnail(sourceAndVault, thumbnailDiv, displayDiv) {
    thumbnailDiv.className = "cfe-thumbnail vbox";
    thumbnailDiv.onclick = async () => {
      await this.Display(sourceAndVault, displayDiv);
    };
    const idText = thumbnailDiv.createDiv("hbox");
    idText.textContent = "ID: " + this.id;
    idText.style.justifyContent = "center";
    const fileText = thumbnailDiv.createDiv("hbox");
    fileText.textContent = "File Type: " + this.fileType;
    fileText.style.justifyContent = "center";
    const nameText = thumbnailDiv.createDiv("hbox");
    nameText.textContent = "File Name: " + this.fileName;
    nameText.style.justifyContent = "center";
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.Display() instead.
   * 
   * CFEFile layer:
   * 
   * empties the display container provided.
   */
  async Display(snv, container) {
    container.empty();
    const headerContainer = container.createDiv("hbox");
    const backButton = headerContainer.createEl("button", { text: "Back to parent folder" });
    headerContainer.createEl("p", { text: "File ID: " + this.id });
    headerContainer.createEl("p", { text: "File Name: " });
    const nameInput = headerContainer.createEl("input", { type: "text", value: this.fileName });
    backButton.onclick = async () => {
      const parentFolder = await CFEFileHandler.LoadFile(snv, this.parentFolderID);
      if (parentFolder !== null) {
        await parentFolder.Display(snv, container);
      }
    };
    nameInput.onchange = async () => {
      this.fileName = nameInput.value;
      await this.Save(snv);
    };
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * (it is unlikely this method will ever be overriden by child classes, but making this 'inaccessible' is for consistency)
   * 
   * Use CFEFileHandler.SaveFile() instead.
   * 
   * Formatted File layer:
   * 
   * Deletes this file ID from the original parent folder, adds this file to the new parent folder, and changes the parent folder ID
   */
  async MoveFile(sourceAndVault, newParentFolderID) {
    const oldParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, this.parentFolderID);
    const indexOfFile = oldParentFolder.containedFileIDs.indexOf(this.id);
    oldParentFolder.containedFileIDs.splice(indexOfFile, 1);
    oldParentFolder.Save(sourceAndVault);
    const newParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, newParentFolderID);
    newParentFolder.containedFileIDs.push(this.id);
    newParentFolder.Save(sourceAndVault);
    this.parentFolderID = newParentFolderID;
    this.Save(sourceAndVault);
  }
  async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const filePath = sourceFolder.vaultPath + "/" + this.id + ".json";
    const jsonData = JSON.stringify(this);
    const tFile = vault.getFileByPath(filePath);
    if (tFile === null) {
      const normalizedPath = (0, import_obsidian.normalizePath)(filePath);
      await vault.adapter.write(normalizedPath, jsonData);
      return;
    }
    await vault.modify(tFile, jsonData);
  }
};
var CFEFile = _CFEFile;
CFEFile.FILE_NAME_INPUT_INDEX = 0;
CFEFile.PARENT_FOLDER_ID_INPUT_INDEX = 1;

// classes/file-creation-data.ts
var FileCreationData = class {
  constructor(snv, fileType, parentFolderID) {
    this.snv = snv;
    this.fileType = fileType;
    this.parentFolderID = parentFolderID;
  }
};

// classes/single-media-file.ts
var import_obsidian2 = require("obsidian");

// classes/real-file.ts
var RealFile = class extends CFEFile {
  constructor() {
    super(...arguments);
    this.fileType = "Real File";
  }
  async DisplayMediaOnly(mediaDiv, snv) {
    mediaDiv.empty();
  }
};

// classes/single-media-file.ts
var SingleMediaFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.fileType = "Single Media File";
  }
  get mediaType() {
    switch (this.extensionName) {
      case "png":
      case "jpg":
      case "webp":
      case "heic":
      case "gif":
        return "Image";
      case "mp4":
      case "MP4":
      case "mov":
      case "MOV":
      default:
        return "Video";
    }
  }
  async getSrc(snv) {
    const mediaFile = await this.getTFile(snv);
    const arrayBuffer = await snv.vault.readBinary(mediaFile);
    const blob = new Blob([arrayBuffer]);
    const mediaUrl = URL.createObjectURL(blob);
    return mediaUrl;
  }
  async getTFile(snv) {
    const mediaPath = await this.getPath(snv);
    let mediaFile = snv.vault.getFileByPath(mediaPath);
    if (mediaFile === null) {
      mediaFile = snv.vault.getFileByPath(mediaPath + "." + this.extensionName);
      if (mediaFile === null) {
        throw Error("File not found at path: " + mediaPath + " or " + mediaPath + "." + this.extensionName);
      }
      snv.vault.rename(mediaFile, mediaPath);
    }
    return mediaFile;
  }
  async getPath(snv) {
    const sourceFolder = snv.sourceFolder;
    return sourceFolder.vaultPath + "/" + this.id + " Actual File";
  }
  static async CreateNewFileForLayer(data) {
    const newMediaFile = await super.CreateNewFileForLayer(data);
    newMediaFile.extensionName = "";
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change file" });
    const newFileInput = imageDisplayContainer.createEl("input", { type: "file" });
    await this.DisplayMediaOnly(imageDisplayContainer, snv);
    newFileInput.onchange = async () => {
      try {
        const oldFile = await this.getTFile(snv);
        try {
          await snv.vault.delete(oldFile);
        } finally {
          await this.SaveNewFile(snv, newFileInput);
          this.Display(snv, container);
        }
      } catch (e) {
        console.log();
      }
    };
  }
  async SaveNewFile(snv, fileInput) {
    const fileArray = fileInput.files;
    if (fileArray === null) {
      throw Error("no file was selected");
    }
    const mediaFile = fileArray[0];
    await this.SetFileTo(snv, mediaFile);
  }
  async SetFileTo(snv, mediaFile) {
    const partsOfPath = mediaFile.name.split(".");
    const extension = partsOfPath[partsOfPath.length - 1];
    this.fileName = partsOfPath[0];
    this.extensionName = extension;
    const path = snv.sourceFolder.vaultPath + "/" + this.id + " Actual File";
    const normalizedPath = (0, import_obsidian2.normalizePath)(path);
    await snv.vault.adapter.writeBinary(normalizedPath, await mediaFile.arrayBuffer());
    await this.Save(snv);
  }
  async DisplayMediaOnly(mediaDiv, snv) {
    await super.DisplayMediaOnly(mediaDiv, snv);
    if (this.mediaType === "Image") {
      const imageElement = mediaDiv.createEl("img");
      imageElement.src = await this.getSrc(snv);
      imageElement.style.objectFit = "contain";
    } else {
      const videoElement = mediaDiv.createEl("video");
      videoElement.src = await this.getSrc(snv);
      videoElement.controls = true;
      videoElement.loop = true;
      videoElement.autoplay = true;
      videoElement.style.objectFit = "contain";
    }
  }
};

// classes/folder.ts
var Folder = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(data) {
    const unfinishedFolder = await super.CreateNewFileForLayer(data);
    unfinishedFolder.containedFileIDs = [];
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const createButtonsDiv = mainDiv.createDiv("hbox");
    const newFileButton = createButtonsDiv.createEl("button", { text: "Create New File" });
    newFileButton.onclick = () => {
      this.LoadCreateFileUI(snv, mainDiv);
    };
    const mediaFilesButton = createButtonsDiv.createEl("button", { text: "Upload Multiple Images / Videos" });
    mediaFilesButton.onclick = () => {
      this.LoadFileSelectionUI(snv, mainDiv);
    };
    const folderDisplayContainer = mainDiv.createDiv("cfe-grid");
    for (let i = 0; i < this.containedFileIDs.length; i++) {
      const containedFile = await CFEFileHandler.LoadFile(snv, this.containedFileIDs[i]);
      if (containedFile !== null) {
        await containedFile.DisplayThumbnail(snv, folderDisplayContainer.createDiv(), mainDiv);
      }
    }
  }
  LoadCreateFileUI(snv, mainDiv) {
    const data = new FileCreationData(snv, "Folder", 0);
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    popUpContainer.createEl("p", { text: "Choose a File Type to create: " });
    const fileTypeDropdown = popUpContainer.createEl("select");
    popUpContainer.createEl("p", { text: "Parent Folder ID: " });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    for (let i = 0; i < CFEFileHandler.KnownFileTypes.length; i++) {
      const option = fileTypeDropdown.createEl("option");
      option.value = CFEFileHandler.KnownFileTypes[i];
      option.text = CFEFileHandler.KnownFileTypes[i];
      fileTypeDropdown.options.add(option);
    }
    const exitButton = popUpContainer.createEl("button", { text: "X", cls: "cfe-exit-button" });
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      data.fileType = fileTypeDropdown.value;
      data.parentFolderID = parseInt(parentFolderIDInput.value);
      await CFEFileHandler.CreateNew(data);
      exitButton.click();
      const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
      await resettedFolder.Display(snv, mainDiv);
    };
  }
  LoadFileSelectionUI(snv, mainDiv) {
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    popUpContainer.createEl("p", { text: "Choose your files" });
    const fileInput = popUpContainer.createEl("input", { type: "file" });
    fileInput.multiple = true;
    popUpContainer.createEl("p", { text: "Parent Folder ID: " });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    const exitButton = popUpContainer.createEl("button", { text: "X", cls: "cfe-exit-button" });
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      const fileArray = fileInput.files;
      const parentFolderID = parseInt(parentFolderIDInput.value);
      if (fileArray !== null) {
        for (let i = 0; i < fileArray.length; i++) {
          const data = new FileCreationData(snv, "Single Media File", parentFolderID);
          const cfeFile = await CFEFileHandler.CreateNew(data);
          const mediaFile = Object.assign(new SingleMediaFile(), cfeFile);
          await mediaFile.SetFileTo(snv, fileArray[i]);
          await mediaFile.Save(snv);
        }
        exitButton.click();
        const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
        await resettedFolder.Display(snv, mainDiv);
      }
    };
  }
};

// classes/playlist.ts
var Playlist = class extends CFEFile {
  static getNextVideoIDInOrder(playlist) {
    let nextVideoIndex = playlist.currentVideoIndex + 1;
    if (nextVideoIndex >= playlist.videoIDs.length) {
      nextVideoIndex = 0;
    }
    return nextVideoIndex;
  }
  static getNextVideoIDShuffled(playlist) {
    let nextVideoIndex = Math.random() * playlist.videoIDs.length;
    nextVideoIndex = Math.floor(nextVideoIndex);
    return nextVideoIndex;
  }
  static async loadNextVideo(sourceAndVault, playlist, videoElement) {
    if (playlist.videoOrder === "shuffled") {
      playlist.currentVideoIndex = Playlist.getNextVideoIDShuffled(playlist);
    } else {
      playlist.currentVideoIndex = Playlist.getNextVideoIDInOrder(playlist);
    }
    const nextVideo = await CFEFileHandler.LoadFile(sourceAndVault, playlist.videoIDs[playlist.currentVideoIndex]);
    videoElement.src = await nextVideo.getSrc(sourceAndVault);
  }
  static async CreateNewFileForLayer(data) {
    const newPlaylistFile = await super.CreateNewFileForLayer(data);
    newPlaylistFile.videoIDs = [];
    return newPlaylistFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    this.currentVideoIndex = 0;
    const videoDisplayContainer = container.createDiv("cfe-display-video");
    const videoElement = videoDisplayContainer.createEl("video");
    const buttonsContainer = container.createDiv("hbox");
    const hideButton = buttonsContainer.createEl("button", { text: "hide video" });
    hideButton.onclick = () => {
      if (hideButton.textContent === "hide video") {
        hideButton.textContent = "show video";
        videoElement.style.display = "none";
      } else {
        hideButton.textContent = "hide video";
        videoElement.style.display = "flex";
      }
    };
    const shuffleButton = buttonsContainer.createEl("button", { text: "shuffle" });
    this.videoOrder = "in order";
    shuffleButton.onclick = () => {
      if (shuffleButton.textContent === "shuffle") {
        shuffleButton.textContent = "go in order";
        this.videoOrder = "shuffled";
      } else {
        shuffleButton.textContent = "shuffle";
        this.videoOrder = "in order";
      }
    };
    const nextButton = buttonsContainer.createEl("button", { text: "next video" });
    nextButton.onclick = async () => {
      await Playlist.loadNextVideo(snv, this, videoElement);
    };
    try {
      const firstVideo = await CFEFileHandler.LoadFile(snv, this.videoIDs[this.currentVideoIndex]);
      videoElement.src = await firstVideo.getSrc(snv);
      videoElement.autoplay = true;
      videoElement.controls = true;
      videoElement.ontimeupdate = async () => {
        if (videoElement.ended) {
          await Playlist.loadNextVideo(snv, this, videoElement);
        }
      };
    } finally {
      container.createEl("p", { text: "Change files" });
      let count = 0;
      const mediaIDInputDiv = container.createDiv("vbox");
      const newFileButton = container.createEl("button", { text: "Add File" });
      for (let i = 0; i < this.videoIDs.length; i++) {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.videoIDs[currentIndex] });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      }
      newFileButton.onclick = () => {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text" });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      };
    }
  }
};

// classes/variant-media-file.ts
var VariantMediaFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.fileType = "Variant Media File";
  }
  async getSrc(snv, index = null) {
    if (index === null) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    return await containedMedia.getSrc(snv);
  }
  static async CreateNewFileForLayer(data) {
    const newMediaFile = await super.CreateNewFileForLayer(data);
    newMediaFile.variantIDs = [];
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change files" });
    const mediaIDInputDiv = imageDisplayContainer.createDiv("vbox");
    const newFileButton = imageDisplayContainer.createEl("button", { text: "Add File" });
    for (let i = 0; i < this.variantIDs.length; i++) {
      const currentIndex = i;
      const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
      const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.variantIDs[currentIndex] });
      const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        mediaIDDiv.remove();
        this.variantIDs.splice(currentIndex, 1);
        await this.Save(snv);
        await this.Display(snv, container);
      };
      idInput.onchange = async () => {
        this.variantIDs[currentIndex] = parseInt(idInput.value);
        await this.Save(snv);
        await this.Display(snv, container);
      };
    }
    newFileButton.onclick = async () => {
      this.variantIDs.push(-1);
      await this.Save(snv);
      await this.Display(snv, container);
    };
    const mediaDiv = imageDisplayContainer.createDiv("vbox");
    await this.DisplayMediaOnly(mediaDiv, snv);
  }
  async DisplayMediaOnly(mediaDiv, snv, index = -1) {
    if (index === -1) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    await containedMedia.DisplayMediaOnly(mediaDiv, snv);
  }
};

// classes/source-folder-shortcut.ts
var SourceFolderShortcut = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(data) {
    const unfinishedFolder = await super.CreateNewFileForLayer(data);
    unfinishedFolder.pathToOtherSource = "";
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const inputDiv = mainDiv.createDiv("vbox");
    inputDiv.createEl("p", { text: "Path to Other Source Folder" });
    const pathInput = inputDiv.createEl("input", { type: "text" });
    const goButton = inputDiv.createEl("button", { text: "Go" });
    pathInput.onchange = async () => {
      this.pathToOtherSource = pathInput.value;
      await this.Save(snv);
    };
    goButton.onclick = async () => {
      const otherSource = await SourceFolder.CreateOrLoadSourceFolder(this.pathToOtherSource, snv.vault);
      otherSource.Display(mainDiv, snv.vault);
    };
  }
};

// classes/conlangs/hwayu-text.ts
var Hwayu = class {
  static Display(div, text = "", fontSize = 20, isVertical = true) {
    const textElement = div.createEl("p", { text });
    textElement.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textElement.style.fontSize = fontSize + "px";
    if (isVertical) {
      textElement.style.writingMode = "vertical-lr";
      textElement.style.textOrientation = "upright";
    }
    return textElement;
  }
  static CreateTextArea(div, existingText = "", fontSize = 20, isVertical = true) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textArea.style.fontSize = fontSize + "px";
    if (isVertical) {
      textArea.style.writingMode = "vertical-lr";
      textArea.style.textOrientation = "upright";
    }
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 20, isVertical = true) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textInput.style.fontSize = fontSize + "px";
    if (isVertical) {
      textInput.style.writingMode = "vertical-lr";
      textInput.style.textOrientation = "upright";
    }
    textInput.spellcheck = false;
    return textInput;
  }
};

// classes/conlangs/photolang-text.ts
var PhotoLang = class {
  static Display(div, text = "", fontSize = 10, moveSpeeds = null, durations = null, doLoop = false) {
    const line = new PhotoLine(text);
    if (!moveSpeeds) {
      moveSpeeds = [100, 250, 500];
    }
    if (!durations) {
      durations = [0, 500];
    }
    const displayDiv = div.createDiv();
    line.Speak(displayDiv, fontSize, moveSpeeds, durations, doLoop);
    return displayDiv;
  }
  static CreateTextArea(div, existingText = "", fontSize = 17.5) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontSize = fontSize + "px";
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 17.5) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontSize = fontSize + "px";
    textInput.spellcheck = false;
    return textInput;
  }
};
var PhotoLine = class {
  constructor(textContent = "") {
    this.glyphs = [];
    const textArray = textContent.split("   ").filter((c) => c !== "");
    let doSpace = false;
    for (let i = 0; i < textArray.length; i++) {
      const newGlyph = new PhotoGlyph();
      const glyphText = textArray[i];
      if (glyphText === "|||") {
        newGlyph.hue = 0;
        newGlyph.saturation = 0;
        newGlyph.value = 0;
        newGlyph.opacity = 0;
        newGlyph.moveSpeed = 0;
        newGlyph.duration = 0;
        newGlyph.x = this.glyphs[this.glyphs.length - 1].x;
        newGlyph.y = this.glyphs[this.glyphs.length - 1].y;
        doSpace = true;
      } else {
        let j = 0;
        let skipNext = false;
        switch (glyphText[j]) {
          case ".":
            newGlyph.moveSpeed = 0;
            break;
          case "-":
            newGlyph.moveSpeed = 1;
            break;
          case "=":
            newGlyph.moveSpeed = 2;
            break;
        }
        j++;
        switch (glyphText[j]) {
          case ".":
            newGlyph.duration = 0;
            break;
          case "-":
            newGlyph.duration = 1;
            break;
        }
        j++;
        newGlyph.shape = glyphText[j];
        j++;
        let hue1 = 0;
        switch (glyphText[j]) {
          case "r":
            hue1 = 0;
            break;
          case "o":
            hue1 = 40;
            break;
          case "y":
            hue1 = 60;
            break;
          case "g":
            hue1 = 120;
            break;
          case "c":
            hue1 = 180;
            break;
          case "b":
            hue1 = 240;
            break;
          case "p":
            hue1 = 270;
            break;
          case ".":
            newGlyph.hue = 0;
            newGlyph.saturation = 0;
            skipNext = true;
            break;
        }
        j++;
        if (!skipNext) {
          let hue2 = 0;
          switch (glyphText[j]) {
            case "r":
              hue2 = 0;
              break;
            case "o":
              hue2 = 40;
              break;
            case "y":
              hue2 = 60;
              break;
            case "g":
              hue2 = 120;
              break;
            case "c":
              hue2 = 180;
              break;
            case "b":
              hue2 = 240;
              break;
            case "p":
              hue2 = 270;
              break;
            default:
              newGlyph.hue = hue1;
              skipNext = true;
              break;
          }
          if (!skipNext) {
            if (hue1 === 0 && hue2 === 270 || hue1 === 270 && hue2 === 0) {
              newGlyph.hue = 315;
            } else {
              newGlyph.hue = (hue1 + hue2) / 2;
            }
            j++;
          }
        }
        skipNext = false;
        const saturationText = glyphText[j];
        switch (saturationText) {
          case "0":
            newGlyph.saturation = 0;
            break;
          case "1":
            newGlyph.saturation = 0.25;
            break;
          case "2":
            newGlyph.saturation = 0.5;
            break;
          case "3":
            newGlyph.saturation = 0.75;
            break;
          case "4":
            newGlyph.saturation = 1;
            break;
        }
        j++;
        const valueText = glyphText[j];
        switch (valueText) {
          case "0":
            newGlyph.value = 0;
            break;
          case "1":
            newGlyph.value = 0.1;
            break;
          case "2":
            newGlyph.value = 0.2;
            break;
          case "3":
            newGlyph.value = 0.5;
            break;
          case "4":
            newGlyph.value = 1;
            break;
        }
        j++;
        const opacityText = glyphText[j];
        switch (opacityText) {
          case ".":
            newGlyph.opacity = 0;
            break;
          case "-":
            newGlyph.opacity = 0.5;
            break;
          case "=":
            newGlyph.opacity = 1;
            break;
        }
        j++;
        const locationInfo = glyphText.substring(j);
        if (locationInfo.contains("<")) {
          newGlyph.x = 0;
        } else if (locationInfo.contains(">")) {
          newGlyph.x = 2;
        } else {
          newGlyph.x = 1;
        }
        if (locationInfo.contains("v")) {
          newGlyph.y = 0;
        } else if (locationInfo.contains("^")) {
          newGlyph.y = 2;
        } else {
          newGlyph.y = 1;
        }
        if (doSpace) {
          const emptyGlyph = new PhotoGlyph();
          emptyGlyph.hue = 0;
          emptyGlyph.saturation = 0;
          emptyGlyph.value = 0;
          emptyGlyph.opacity = 0;
          emptyGlyph.moveSpeed = 0;
          emptyGlyph.duration = 0;
          emptyGlyph.x = newGlyph.x;
          emptyGlyph.y = newGlyph.y;
          doSpace = false;
          this.glyphs.push(emptyGlyph);
        }
      }
      this.glyphs.push(newGlyph);
    }
    if (doSpace) {
      const emptyGlyph = new PhotoGlyph();
      emptyGlyph.hue = 0;
      emptyGlyph.saturation = 0;
      emptyGlyph.value = 0;
      emptyGlyph.opacity = 0;
      emptyGlyph.moveSpeed = 0;
      emptyGlyph.duration = 0;
      emptyGlyph.x = this.glyphs[0].x;
      emptyGlyph.y = this.glyphs[0].y;
      doSpace = false;
      this.glyphs.push(emptyGlyph);
    }
  }
  async Speak(div, textSize, moveSpeeds, durations, doLoop = false) {
    div.style.fontSize = textSize + "px";
    div.style.fontFamily = "Photolang";
    div.style.position = "relative";
    div.style.height = textSize * 3.25 + "px";
    div.style.width = textSize * 3.25 + "px";
    const textDiv = div.createDiv();
    textDiv.style.position = "absolute";
    textDiv.style.bottom = textSize + "px";
    textDiv.style.transitionProperty = "bottom, left, color";
    for (let i = 0; i < this.glyphs.length; i++) {
      const photoGlyph = this.glyphs[i];
      textDiv.textContent = photoGlyph.shape;
      textDiv.style.left = photoGlyph.x * textSize + "px";
      textDiv.style.bottom = photoGlyph.y * textSize + "px";
      textDiv.style.color = photoGlyph.color;
      if (doLoop && i === this.glyphs.length - 1) {
        i = -1;
      }
      textDiv.style.transition = moveSpeeds[photoGlyph.moveSpeed] + "ms";
      await sleep(moveSpeeds[photoGlyph.moveSpeed] + durations[photoGlyph.duration]);
    }
    div.remove();
  }
  async DisplayStatic(div, textSize) {
    const lineDiv = div.createDiv("hbox");
    lineDiv.style.gap = "" + textSize * 3.25 + "px)";
    for (let i = 0; i < this.glyphs.length; i++) {
      this.glyphs[i] = Object.assign(new PhotoGlyph(), this.glyphs[i]);
      this.glyphs[i].DisplayStatic(lineDiv.createDiv(), textSize);
    }
  }
};
var PhotoGlyph = class {
  get color() {
    let lightness = (2 - this.saturation) * this.value / 2;
    let newS = this.saturation * this.value / (lightness < 1 ? lightness * 2 : 2 - lightness * 2);
    if (lightness === 0 || lightness === 1) {
      newS = 0;
    }
    lightness *= 100;
    newS *= 100;
    return "hsla(" + this.hue + "," + newS + "%," + lightness + "%," + this.opacity + ")";
  }
  DisplayStatic(div, textSize) {
    const outerDiv = div.createDiv();
    outerDiv.style.position = "relative";
    outerDiv.style.width = textSize * 3.25 + "px";
    outerDiv.style.height = textSize * 3.25 + "px";
    outerDiv.className = "cfe-photoglyph";
    const glyphDiv = outerDiv.createDiv();
    glyphDiv.style.position = "absolute";
    glyphDiv.textContent = this.shape;
    glyphDiv.style.left = this.x * textSize + "px";
    glyphDiv.style.bottom = this.y * textSize + "px";
    glyphDiv.style.color = this.color;
  }
};

// classes/conlang-dictionary.ts
var ConlangDictionary = class extends CFEFile {
  static async CreateNewFileForLayer(data) {
    const unfinishedDictionary = await super.CreateNewFileForLayer(data);
    unfinishedDictionary.language = "Hwayu";
    unfinishedDictionary.words = [];
    unfinishedDictionary.searchTerm = "";
    unfinishedDictionary.searchInConlang = false;
    return unfinishedDictionary;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const languageDropdown = mainDiv.createEl("select");
    languageDropdown.createEl("option", { text: "Hwayu", value: "Hwayu" });
    languageDropdown.createEl("option", { text: "Photolang", value: "Photolang" });
    languageDropdown.value = this.language;
    const addWordDiv = mainDiv.createDiv("vbox");
    await this.CreateNewWordEditor(snv, mainDiv, addWordDiv);
    languageDropdown.onchange = async () => {
      this.language = languageDropdown.value;
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    await this.DisplayList(snv, mainDiv);
  }
  async DisplayWord(snv, mainDiv, div, index) {
    div.empty();
    const modeButton = div.createEl("button", { text: "Edit" });
    modeButton.style.top = "0";
    modeButton.style.right = "0";
    modeButton.onclick = async () => {
      await this.EditWord(snv, mainDiv, div, index);
    };
    const wordDiv = div.createDiv("hbox");
    wordDiv.style.gap = "1%";
    wordDiv.style.fontSize = "25px";
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const conlangWordDiv = this.DisplayConlangText(wordDiv, conlangWord);
    conlangWordDiv.classList.add("cfe-pointer-hover");
    wordDiv.createEl("p", { text: ":" });
    wordDiv.createEl("p", { text: definition });
    conlangWordDiv.onclick = async () => {
      try {
        await navigator.clipboard.writeText(conlangWord);
      } catch (err) {
        console.error("Failed to copy text: ", err);
      }
    };
  }
  async EditWord(snv, mainDiv, div, index) {
    div.empty();
    const buttonsDiv = div.createDiv("hbox");
    const modeButton = buttonsDiv.createEl("button", { text: "View" });
    modeButton.onclick = async () => {
      await this.DisplayWord(snv, mainDiv, div, index);
    };
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete" });
    deleteButton.classList = "cfe-remove-button";
    deleteButton.onclick = async () => {
      this.words.splice(index, 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    const wordDiv = div.createDiv("vbox");
    wordDiv.style.fontSize = "25px";
    wordDiv.createEl("p", { text: "Word in " + this.language });
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const newWordInput = this.DisplayConlangEditor(wordDiv, conlangWord);
    wordDiv.createEl("p", { text: "Definition" });
    const definitionInput = wordDiv.createEl("input", { type: "text", value: definition });
    definitionInput.style.fontSize = "25px";
    const onSubmit = async () => {
      this.words[index] = [newWordInput.value, definitionInput.value];
      this.ReSort(index);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  CreateNewWordEditor(snv, mainDiv, div) {
    div.createEl("p", { text: "Add New Word:" });
    div.createEl("p", { text: "Word in " + this.language });
    const newWordInput = this.DisplayConlangEditor(div);
    div.createEl("p", { text: "Definition" });
    const definitionInput = div.createEl("input", { type: "text", value: "" });
    const submitButton = div.createEl("button", { text: "submit" });
    const onSubmit = async () => {
      this.words.push([newWordInput.value, definitionInput.value]);
      this.ReSort(this.words.length - 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    submitButton.onclick = onSubmit;
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  DisplayConlangEditor(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.CreateTextInput(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, 25);
    }
  }
  DisplayConlangText(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.Display(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, 25, null, null, true);
    }
  }
  async DisplayList(snv, div) {
    div.createEl("p", { text: "Search in " + this.language + "?" });
    const checkbox = div.createEl("input", { type: "checkbox" });
    checkbox.checked = this.searchInConlang;
    div.createEl("p", { text: "Search term" });
    const conlangSearch = this.DisplayConlangEditor(div, this.searchTerm);
    const englishSearch = div.createEl("input", { type: "text", value: this.searchTerm });
    let prevElement = checkbox.checked ? englishSearch : conlangSearch;
    let currentElement = checkbox.checked ? conlangSearch : englishSearch;
    prevElement.style.width = "100%";
    currentElement.style.width = "100%";
    this.searchTerm = prevElement.value;
    prevElement.style.display = "none";
    currentElement.value = this.searchTerm;
    currentElement.style.display = "";
    const resultsDiv = div.createDiv("cfe-dictionary-grid");
    const refreshResults = () => {
      this.searchTerm = currentElement.value;
      this.searchInConlang = checkbox.checked;
      resultsDiv.empty();
      for (let i = 0; i < this.words.length; i++) {
        if (this.words[i][checkbox.checked ? 0 : 1].contains(currentElement.value)) {
          const wordDiv = resultsDiv.createDiv("cfe-dictionary-word");
          this.DisplayWord(snv, div, wordDiv, i);
        }
      }
    };
    refreshResults();
    conlangSearch.oninput = refreshResults;
    englishSearch.oninput = refreshResults;
    checkbox.onchange = () => {
      resultsDiv.empty();
      prevElement = checkbox.checked ? englishSearch : conlangSearch;
      currentElement = checkbox.checked ? conlangSearch : englishSearch;
      this.searchTerm = prevElement.value;
      prevElement.style.display = "none";
      currentElement.value = this.searchTerm;
      currentElement.style.display = "";
      refreshResults();
    };
  }
  ReSort(indexOfChangedWord) {
    const changedWord = this.words.splice(indexOfChangedWord, 1)[0];
    let i = 0;
    let left = 0;
    let right = this.words.length - 1;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (this.words[mid][0] < changedWord[0]) {
        left = mid + 1;
        i = left;
      } else {
        right = mid - 1;
        i = mid;
      }
    }
    this.words.splice(i, 0, changedWord);
  }
};

// classes/story.ts
var _Story = class extends CFEFile {
  MakeVertical(el) {
    el.style.writingMode = "vertical-lr";
    el.style.textOrientation = "upright";
  }
  CreateTextInput(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextInput(div, existingWord, 25, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, 25);
      default:
        input = div.createEl("input", { type: "text", value: existingWord });
        input.style.fontSize = "25px";
        return input;
    }
  }
  DisplayLineEdit(div, line) {
    const input = this.CreateTextArea(div, line.content);
    if (this.language !== "Photolang") {
      const speaker = this.characters[line.speakerIndex];
      input.style.backgroundColor = speaker.backgroundColor;
      input.style.color = speaker.color;
    }
    if (this.doVertical) {
      this.MakeVertical(input);
    }
    return input;
  }
  CreateTextArea(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextArea(div, existingWord, 25, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextArea(div, existingWord, 25);
      default:
        input = div.createEl("textarea", { text: existingWord });
        input.style.fontSize = "25px";
        return input;
    }
  }
  DisplayText(div, fontSize = 25, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
        return Hwayu.Display(div, existingWord, fontSize, this.doVertical);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, fontSize, null, null, true);
      default:
        return div.createEl("p", { text: existingWord });
    }
  }
  static async CreateNewFileForLayer(data) {
    const newStoryFile = await super.CreateNewFileForLayer(data);
    newStoryFile.currentPageIndex = 0;
    newStoryFile.pages = [];
    newStoryFile.characters = [];
    newStoryFile.language = "English";
    newStoryFile.doVertical = false;
    return newStoryFile;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    this.LoadStoryUI(snv, mainDiv.createDiv("vbox"));
  }
  LoadStoryUI(snv, mainDiv) {
    mainDiv.empty();
    mainDiv.createEl("p", { text: "Go to page number:" });
    const pageSelectDiv = mainDiv.createDiv("hbox");
    const pageNumberInput = pageSelectDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    pageSelectDiv.createEl("p", { text: "/" + this.pages.length });
    const goButton = pageSelectDiv.createEl("button", { text: "Go" });
    goButton.onclick = () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      this.LoadCurrentPageEdit(snv, mainDiv);
    };
    const languageInput = mainDiv.createEl("select");
    for (let i = 0; i < _Story.knownLanguages.length; i++) {
      languageInput.createEl("option", { text: _Story.knownLanguages[i], value: _Story.knownLanguages[i] });
    }
    languageInput.value = this.language;
    languageInput.onchange = async () => {
      this.language = languageInput.value;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Vertical Text" });
    const doVerticalBox = mainDiv.createEl("input", { type: "checkbox" });
    doVerticalBox.checked = this.doVertical;
    doVerticalBox.onclick = async () => {
      this.doVertical = doVerticalBox.checked;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    this.LoadCharacterEditorUI(snv, mainDiv);
  }
  LoadCharacterEditorUI(snv, div) {
    const charEditorDiv = div.createDiv();
    charEditorDiv.className = this.doVertical ? "hbox" : "vbox";
    for (let i = 0; i < this.characters.length; i++) {
      const currentIndex = i;
      const charDiv = charEditorDiv.createDiv();
      charDiv.className = this.doVertical ? "vbox" : "hbox";
      charDiv.createEl("p", { text: "Name: " });
      const nameInput = this.CreateTextInput(charDiv, this.characters[currentIndex].name);
      if (this.language !== "Photolang") {
        nameInput.style.backgroundColor = this.characters[currentIndex].backgroundColor;
        nameInput.style.color = this.characters[currentIndex].color;
      }
      nameInput.onchange = async () => {
        this.characters[currentIndex].name = nameInput.value;
        await this.Save(snv);
        this.LoadStoryUI(snv, div);
      };
      if (this.doVertical) {
        nameInput.style.height = "fit-content";
      } else {
        nameInput.style.width = "fit-content";
      }
      if (this.language !== "Photolang") {
        this.LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex);
      } else {
        this.DisplayText(charDiv, 25, this.characters[currentIndex].name);
      }
    }
    const addCharButton = charEditorDiv.createEl("button", { text: "Add Character" });
    addCharButton.onclick = async () => {
      this.characters.push(new Character());
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex) {
    const colorDiv = charEditorDiv.createDiv();
    colorDiv.className = this.doVertical ? "vbox" : "hbox";
    colorDiv.createEl("p", { text: "Text Color:" });
    const colorInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].color });
    colorDiv.createEl("p", { text: "Background Color:" });
    const backgroundInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].backgroundColor });
    const swapButton = colorDiv.createEl("button", { text: "Swap" });
    colorInput.onchange = async () => {
      this.characters[currentIndex].color = colorInput.value;
      await this.Save(snv);
    };
    backgroundInput.onchange = async () => {
      this.characters[currentIndex].backgroundColor = backgroundInput.value;
      await this.Save(snv);
    };
    swapButton.onclick = async () => {
      this.characters[currentIndex].backgroundColor = colorInput.value;
      this.characters[currentIndex].color = backgroundInput.value;
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadPageSelector(snv, mainDiv) {
    const buttonsDiv = mainDiv.createDiv("hbox");
    const backButton = buttonsDiv.createEl("button", { text: "-" });
    const pageNumberInput = buttonsDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    buttonsDiv.createEl("p", { text: "/" + this.pages.length });
    const nextButton = buttonsDiv.createEl("button", { text: "+" });
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete Page" });
    deleteButton.className = "cfe-remove-button";
    const addButton = buttonsDiv.createEl("button", { text: "Add Page" });
    const editModeButton = buttonsDiv.createEl("button", { text: "Edit Mode" });
    const viewModeButton = buttonsDiv.createEl("button", { text: "View Mode" });
    const homeButton = buttonsDiv.createEl("button", { text: "Return to Story" });
    homeButton.onclick = async () => {
      await this.LoadStoryUI(snv, mainDiv);
    };
    editModeButton.onclick = async () => {
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    viewModeButton.onclick = async () => {
      await this.LoadCurrentPageDisplayOnly(snv, mainDiv);
    };
    backButton.onclick = async () => {
      if (this.currentPageIndex > 0) {
        this.currentPageIndex--;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    nextButton.onclick = async () => {
      if (this.currentPageIndex < this.pages.length) {
        this.currentPageIndex++;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    pageNumberInput.onchange = async () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    deleteButton.onclick = async () => {
      this.pages.splice(this.currentPageIndex, 1);
      await this.Save(snv);
      if (this.currentPageIndex !== 0) {
        this.currentPageIndex--;
      }
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    addButton.onclick = async () => {
      const defaultPage = new Page();
      const thisPageFileID = this.pages[this.currentPageIndex].mediaFileID;
      if (thisPageFileID !== -1 && thisPageFileID < snv.sourceFolder.fileCount) {
        defaultPage.mediaFileID = thisPageFileID;
      }
      this.pages.splice(this.currentPageIndex + 1, 0, defaultPage);
      await this.Save(snv);
      this.currentPageIndex++;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
  }
  async LoadCurrentPageEdit(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    mainDiv.createEl("p", { text: "Media File ID:" });
    const mediaFileIDInput = mainDiv.createEl("input", { type: "text" });
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaWidthInput = outerMediaDiv.createEl("input", { type: "text" });
    mediaWidthInput.onchange = async () => {
      outerMediaDiv.style.width = mediaWidthInput.value + "%";
      linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      this.pages[this.currentPageIndex].mediaSizePercentage = parseInt(mediaWidthInput.value);
      await this.Save(snv);
    };
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    if (this.currentPageIndex < this.pages.length) {
      const currentPage = this.pages[this.currentPageIndex];
      const mediaFileID = currentPage.mediaFileID;
      mediaFileIDInput.value = "" + currentPage.mediaFileID;
      if (mediaFileID > 0) {
        const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
        await mediaFile.DisplayMediaOnly(mediaDiv, snv);
      }
      if (this.pages[this.currentPageIndex].mediaSizePercentage) {
        mediaWidthInput.value = "" + this.pages[this.currentPageIndex].mediaSizePercentage;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      } else {
        mediaWidthInput.value = "50";
        this.pages[this.currentPageIndex].mediaSizePercentage = 50;
        await this.Save(snv);
      }
    } else {
      const defaultPage = new Page();
      const lastPage = this.currentPageIndex - 1;
      if (lastPage >= 0 && this.currentPageIndex !== 0) {
        const lastPageFileID = this.pages[lastPage].mediaFileID;
        const lastPageSize = this.pages[lastPage].mediaSizePercentage;
        defaultPage.mediaSizePercentage = lastPageSize;
        mediaWidthInput.value = "" + lastPageSize;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
        if (lastPageFileID !== -1 && lastPageFileID < snv.sourceFolder.fileCount) {
          const mediaFileID = lastPageFileID + 1;
          defaultPage.mediaFileID = mediaFileID;
          mediaFileIDInput.value = "" + mediaFileID;
          if (mediaFileID > 0) {
            const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
            await mediaFile.DisplayMediaOnly(mediaDiv, snv);
          }
        }
      }
      this.pages.push(defaultPage);
      await this.Save(snv);
    }
    await this.LoadDialogueLinesEdit(snv, linesDiv);
    mediaFileIDInput.onchange = async () => {
      const currentPage = this.pages[this.currentPageIndex];
      currentPage.mediaFileID = parseInt(mediaFileIDInput.value);
      await this.Save(snv);
      const mediaFile = await CFEFileHandler.LoadFile(snv, currentPage.mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    };
  }
  async LoadCurrentPageDisplayOnly(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    const currentPage = this.pages[this.currentPageIndex];
    const mediaFileID = currentPage.mediaFileID;
    if (mediaFileID > 0) {
      const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    }
    if (this.pages[this.currentPageIndex].mediaSizePercentage) {
      const width = this.pages[this.currentPageIndex].mediaSizePercentage;
      outerMediaDiv.style.width = width + "%";
      linesDiv.style.width = 100 - width + "%";
    }
    await this.LoadDialogueLinesDisplayOnly(linesDiv);
  }
  async LoadDialogueLinesEdit(snv, linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv();
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentIndex = i;
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      const lineDiv = existingLinesDiv.createDiv();
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const deleteButton = lineDiv.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
        await this.Save(snv);
        await this.LoadDialogueLinesEdit(snv, linesDiv);
      };
      if (this.doVertical) {
        this.MakeVertical(deleteButton);
      }
      const indexTextEl = this.DisplayText(lineDiv, 25, "" + currentIndex);
      if (this.doVertical) {
        this.MakeVertical(indexTextEl);
      }
      if (this.language === "Photolang") {
        const playButton = lineDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(lineInput.value);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
        if (this.doVertical) {
          this.MakeVertical(playButton);
        }
      }
      const charDropdownButton = lineDiv.createDiv();
      const charDropdownDiv = charDropdownButton.createDiv();
      charDropdownDiv.style.height = "fit-content";
      charDropdownDiv.style.width = "fit-content";
      charDropdownDiv.style.position = "relative";
      charDropdownButton.onclick = () => {
        const selectDiv = charDropdownDiv.createDiv();
        selectDiv.className = this.doVertical ? "hbox" : "vbox";
        selectDiv.style.position = "absolute";
        selectDiv.style.top = "0%";
        selectDiv.style.left = "0%";
        for (let i2 = 0; i2 < this.characters.length; i2++) {
          const currentCharIndex = i2;
          const currentChar = this.characters[currentCharIndex];
          const currentOption = selectDiv.createDiv();
          if (this.doVertical) {
            this.MakeVertical(currentOption);
          }
          if (this.language !== "Photolang") {
            currentOption.style.backgroundColor = currentChar.backgroundColor;
            currentOption.style.color = currentChar.color;
          }
          currentOption.style.zIndex = "2";
          this.DisplayText(currentOption, 25, currentChar.name);
          currentOption.onclick = async () => {
            this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
            await this.Save(snv);
            this.LoadDialogueLinesEdit(snv, linesDiv);
          };
        }
      };
      const nameEl = this.DisplayText(charDropdownDiv, 25, this.characters[currentLine.speakerIndex].name);
      if (this.doVertical) {
        this.MakeVertical(nameEl);
      }
      if (this.language !== "Photolang") {
        nameEl.style.backgroundColor = speaker.backgroundColor;
        nameEl.style.color = speaker.color;
      }
      const lineInput = this.DisplayLineEdit(lineDiv, currentLine);
      if (this.doVertical) {
        lineInput.style.height = "100%";
        this.MakeVertical(lineInput);
      } else {
        lineInput.style.width = "100%";
      }
      lineInput.onchange = async () => {
        currentLine.content = lineInput.value;
        await this.Save(snv);
      };
    }
    const addButton = existingLinesDiv.createEl("button", { text: "+" });
    addButton.onclick = async () => {
      this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
      await this.Save(snv);
      await this.LoadDialogueLinesEdit(snv, linesDiv);
    };
  }
  // private async LoadDialogueLinesEdit(snv: SourceAndVault, linesDiv: HTMLDivElement) {
  // 	const existingLinesDiv = linesDiv.createDiv('hbox');
  // 	existingLinesDiv.style.overflowX = 'scroll';
  // 	const fontSize = '17.5px';
  // 	for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
  // 		const currentIndex = i;
  // 		const currentLine = this.pages[this.currentPageIndex].lines[i];
  // 		const speakerIndex = currentLine.speakerIndex;
  // 		const currentSpeaker = this.characters[speakerIndex];
  // 		const lineDiv = existingLinesDiv.createDiv('vbox');
  // 		const deleteButton = lineDiv.createEl('button', { text: '-' } );
  // 		deleteButton.className = 'cfe-remove-button';
  // 		deleteButton.style.writingMode = 'vertical-lr';
  // 		deleteButton.style.textOrientation = 'upright';
  // 		deleteButton.onclick = async () => {
  // 			this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
  // 			await this.Save(snv);
  // 			await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 		}
  // 		const indexElement = lineDiv.createEl('p', { text: '' +  currentIndex } );
  // 		indexElement.style.color = currentSpeaker.color;
  // 		indexElement.style.fontFamily = 'HwayuReal';
  // 		indexElement.style.writingMode = 'vertical-lr';
  // 		indexElement.style.textOrientation = 'upright';
  // 		const charDropdownDiv = lineDiv.createDiv();
  // 		charDropdownDiv.style.position = 'relative';
  // 		const charDropdown = charDropdownDiv.createEl('button');
  // 		charDropdown.style.height = 'fit-content';
  // 		charDropdown.onclick = () => {
  // 			const selectDiv = charDropdownDiv.createDiv('hbox');
  // 			selectDiv.style.position = 'absolute';
  // 			selectDiv.style.top = '0%';
  // 			selectDiv.style.left = '0%';
  // 			for (let i = 0; i < this.characters.length; i++) {
  // 				const currentCharIndex = i;
  // 				const currentChar = this.characters[currentCharIndex];
  // 				const currentOption = selectDiv.createEl('button', { text: currentChar.name, value: '' + i } );
  // 				currentOption.style.color = currentChar.color;
  // 				currentOption.style.fontFamily = 'HwayuReal';
  // 				currentOption.style.backgroundColor = currentChar.backgroundColor;
  // 				currentOption.style.writingMode = 'vertical-lr';
  // 				currentOption.style.textOrientation = 'upright';
  // 				currentOption.style.height = 'fit-content';
  // 				currentOption.style.zIndex = '2';
  // 				currentOption.onclick = async () => {
  // 					this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
  // 					const newSpeakerColor = this.characters[currentCharIndex].color;
  // 					const newBackgroundColor = this.characters[currentCharIndex].backgroundColor;
  // 					charDropdown.style.color = newSpeakerColor;
  // 					charDropdown.style.backgroundColor = newBackgroundColor;
  // 					charDropdown.textContent = this.characters[currentCharIndex].name;
  // 					lineInput.style.color = newSpeakerColor;
  // 					lineInput.style.backgroundColor = newBackgroundColor;
  // 					indexElement.style.color = newSpeakerColor;
  // 					await this.Save(snv);
  // 					selectDiv.remove();
  // 				}
  // 			}
  // 		}
  // 		charDropdown.textContent = this.characters[currentLine.speakerIndex].name;
  // 		charDropdown.style.color = currentSpeaker.color;
  // 		charDropdown.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		charDropdown.style.fontFamily = 'HwayuReal';
  // 		charDropdown.style.writingMode = 'vertical-lr';
  // 		charDropdown.style.textOrientation = 'upright';
  // 		const lineInput = lineDiv.createEl('textarea');
  // 		lineInput.spellcheck = false;
  // 		lineInput.style.overflowX = 'scroll';
  // 		lineInput.style.writingMode = 'vertical-lr';
  // 		lineInput.style.textOrientation = 'upright';
  // 		lineInput.defaultValue = currentLine.content;
  // 		lineInput.style.color = currentSpeaker.color;
  // 		lineInput.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		lineInput.style.fontFamily = 'HwayuReal';
  // 		lineInput.style.fontSize = fontSize;
  // 		lineInput.style.height = '100%';
  // 		lineInput.onchange = async () => {
  // 			this.pages[this.currentPageIndex].lines[currentIndex].content = lineInput.value;
  // 			await this.Save(snv);
  // 		}
  // 	}
  // 	const addButton = existingLinesDiv.createEl('button', { text: '+' } );
  // 	addButton.style.height = '100%';
  // 	addButton.onclick = async () => {
  // 		this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
  // 		await this.Save(snv);
  // 		await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 	}
  // }
  async LoadDialogueLinesDisplayOnly(linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv("vbox");
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      if (this.language === "Photolang") {
        const playButton = existingLinesDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(currentLine.content);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
      }
      const nameDiv = existingLinesDiv.createDiv("");
      nameDiv.className = this.doVertical ? "vbox" : "hbox";
      const lineDiv = existingLinesDiv.createDiv("");
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const nameEl = this.DisplayText(nameDiv, 25, speaker.name);
      nameEl.style.backgroundColor = speaker.backgroundColor;
      nameEl.style.color = speaker.color;
      if (this.language === "Photolang") {
        const photoLine = new PhotoLine(currentLine.content);
        photoLine.DisplayStatic(lineDiv, 25);
      } else {
        const lineEl = this.DisplayText(lineDiv, 25, currentLine.content);
        lineEl.style.backgroundColor = speaker.backgroundColor;
        lineEl.style.color = speaker.color;
      }
    }
    if (this.language === "Photolang") {
      for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
        const currentLine = this.pages[this.currentPageIndex].lines[i];
        const nameDiv = speakDiv.createDiv();
        nameDiv.style.position = "absolute";
        nameDiv.style.top = "0px";
        nameDiv.style.left = "0px";
        const photoName = new PhotoLine(this.characters[currentLine.speakerIndex].name);
        await photoName.Speak(nameDiv, 100, [100, 250, 500], [0, 500], false);
        const popup = speakDiv.createDiv();
        popup.style.position = "absolute";
        popup.style.top = "0px";
        popup.style.left = "0px";
        const photoLine = new PhotoLine(currentLine.content);
        await photoLine.Speak(popup, 200, [100, 250, 500], [0, 500], false);
      }
    }
  }
};
var Story = _Story;
Story.knownLanguages = [
  "English",
  "Hwayu",
  "Photolang"
];
var Page = class {
  constructor() {
    this.mediaFileID = -1;
    this.lines = [];
    this.mediaSizePercentage = 50;
  }
};
var DialogueLine = class {
  constructor(speakerIndex) {
    this.speakerIndex = speakerIndex;
    this.content = "";
  }
};
var Character = class {
  constructor(name = "", color = "white", backgroundColor = "white") {
    this.name = name;
    this.color = color;
    this.backgroundColor = backgroundColor;
  }
};

// classes/cfe-file-handler.ts
var CFEFileHandler = class {
  static async CreateNew(data) {
    let newFile;
    switch (data.fileType) {
      case "Folder":
      default:
        newFile = await Folder.CreateNewFileForLayer(data);
        break;
      case "Single Media File":
        newFile = await SingleMediaFile.CreateNewFileForLayer(data);
        break;
      case "Variant Media File":
        newFile = await VariantMediaFile.CreateNewFileForLayer(data);
        break;
      case "Playlist":
        newFile = await Playlist.CreateNewFileForLayer(data);
        break;
      case "Story":
        newFile = await Story.CreateNewFileForLayer(data);
        break;
      case "Source Folder Shortcut":
        newFile = await SourceFolderShortcut.CreateNewFileForLayer(data);
        break;
      case "Conlang Dictionary":
        newFile = await ConlangDictionary.CreateNewFileForLayer(data);
        break;
    }
    await newFile.Save(data.snv);
    return newFile;
  }
  static async LoadFile(snv, fileID) {
    const sourceFolder = snv.sourceFolder;
    const vault = snv.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/" + fileID + ".json");
    if (tFile === null) {
      new import_obsidian3.Notice("File could not be found at the path: " + sourceFolder.vaultPath + "/" + fileID + ".json");
      throw Error("File could not be found at the path: " + sourceFolder.vaultPath + "/" + fileID + ".json");
    }
    const jsonData = await vault.cachedRead(tFile);
    const plainObject = JSON.parse(jsonData);
    switch (plainObject.fileType) {
      case "Folder":
      default:
        return Object.assign(new Folder(), plainObject);
      case "Single Media File":
        return Object.assign(new SingleMediaFile(), plainObject);
      case "Variant Media File":
        return Object.assign(new VariantMediaFile(), plainObject);
      case "Playlist":
        return Object.assign(new Playlist(), plainObject);
      case "Hwayu Story": {
        const story = Object.assign(new Story(), plainObject);
        story.fileType = "Story";
        story.language = "Hwayu";
        for (let i = 0; i < plainObject.pages.length; i++) {
          const page = plainObject.pages[i];
          for (let j = 0; j < page.lines.length; j++) {
            page.lines[j].content = page.lines[j].line;
            console.log(page.lines[j].content);
            delete page.lines[j].line;
            console.log(page.lines[j].content);
          }
        }
        return story;
      }
      case "Photolang Story": {
        const story = Object.assign(new Story(), plainObject);
        story.fileType = "Story";
        story.language = "Photolang";
        return story;
      }
      case "Story":
        return Object.assign(new Story(), plainObject);
      case "Source Folder Shortcut":
        return Object.assign(new SourceFolderShortcut(), plainObject);
      case "Conlang Dictionary":
        return Object.assign(new ConlangDictionary(), plainObject);
    }
  }
};
/**
 * All of the known file formats
 */
CFEFileHandler.KnownFileTypes = [
  "Folder",
  "Single Media File",
  "Variant Media File",
  "Playlist",
  "Story",
  "Source Folder Shortcut",
  "Conlang Dictionary"
];

// classes/snv.ts
var SourceAndVault = class {
  constructor(sourceFolder, vault) {
    this.sourceFolder = sourceFolder;
    this.vault = vault;
  }
};

// classes/source-folder.ts
var SourceFolder = class {
  constructor() {
    this.vaultPath = "";
    this.fileCount = 0;
  }
  async Display(container, vault) {
    const snv = new SourceAndVault(this, vault);
    let rootFolder;
    try {
      rootFolder = await CFEFileHandler.LoadFile(snv, 0);
    } catch (e) {
      const newRootFolderData = new FileCreationData(snv, "Folder", 0);
      rootFolder = await CFEFileHandler.CreateNew(newRootFolderData);
    }
    await SourceFolder.Save(snv);
    await rootFolder.Save(snv);
    await rootFolder.Display(snv, container);
  }
  static async CreateOrLoadSourceFolder(vaultPath, vault) {
    vaultPath = vaultPath.endsWith("/source.json") ? vaultPath.slice(0, -12) : vaultPath;
    const exists = vault.getFileByPath(vaultPath + "/source.json") !== null;
    let newSourceFolder;
    if (exists) {
      newSourceFolder = await this.LoadExistingSource(vaultPath, vault);
    } else {
      newSourceFolder = await this.CreateNewSourceFolder(vaultPath, vault);
    }
    return newSourceFolder;
  }
  static async CreateNewSourceFolder(vaultPath, vault) {
    const newSourceFolder = new SourceFolder();
    newSourceFolder.vaultPath = vaultPath;
    newSourceFolder.fileCount = 0;
    try {
      await vault.createFolder(vaultPath);
    } finally {
      const sourcePath = (0, import_obsidian4.normalizePath)(vaultPath + "/source.json");
      await vault.adapter.write(sourcePath, "0");
    }
    return newSourceFolder;
  }
  static async LoadExistingSource(vaultPath, vault) {
    const sourceTFile = vault.getFileByPath(vaultPath + "/source.json");
    if (sourceTFile === null) {
      new import_obsidian4.Notice("Source File could not be found at the path: " + vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + vaultPath + "/source.json");
    }
    const jsonData = await vault.cachedRead(sourceTFile);
    const plainObject = await JSON.parse(jsonData);
    const newSourceFolder = Object.assign(new SourceFolder(), plainObject);
    newSourceFolder.vaultPath = vaultPath;
    await SourceFolder.Save(new SourceAndVault(newSourceFolder, vault));
    return newSourceFolder;
  }
  /**
   * Saves the new file count
   */
  static async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/source.json");
    if (tFile === null) {
      new import_obsidian4.Notice("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
    }
    const jsonData = JSON.stringify(sourceFolder);
    await vault.modify(tFile, jsonData);
  }
};

// classes/custom-explorer-view.ts
var VIEW_TYPE_CUSTOM_EXPLORER = "custom-explorer-view";
var CustomExplorerView = class extends import_obsidian5.ItemView {
  constructor(leaf, path) {
    super(leaf);
    this.defaultPath = path;
  }
  getViewType() {
    return VIEW_TYPE_CUSTOM_EXPLORER;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    const wrapper = this.containerEl.children[1];
    wrapper.empty();
    const mainContainer = wrapper.createDiv("cfe-main-display");
    const homePage = mainContainer.createDiv("cfe-home-page");
    homePage.createEl("h4", { text: "Path to Source:" });
    const existingSourcePathInput = homePage.createEl("input", { type: "text", value: this.defaultPath });
    existingSourcePathInput.style.width = "100%";
    const submitButton = homePage.createEl("button", { text: "submit" });
    const vault = this.app.vault;
    submitButton.onclick = async () => {
      const path = existingSourcePathInput.value;
      const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
      await sf.Display(mainContainer, vault);
    };
    homePage.onkeydown = async (keyPressEvent) => {
      if (keyPressEvent.key === "Enter") {
        const path = existingSourcePathInput.value;
        const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
        await sf.Display(mainContainer, vault);
      }
    };
  }
  async onClose() {
  }
};

// main.ts
var import_obsidian6 = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultPath: "source"
};
var CFE = class extends import_obsidian6.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CUSTOM_EXPLORER,
      (leaf) => new CustomExplorerView(leaf, this.settings.defaultPath)
    );
    this.addRibbonIcon("folder", "Activate view", () => {
      this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
    });
    this.addCommand({
      id: "open-cfe-view",
      name: "Open Custom File Explorer View",
      callback: () => {
        this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView(view_type) {
    const { workspace } = this.app;
    let leaf = null;
    leaf = workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian6.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    await leaf.setViewState({ type: view_type, active: true });
    workspace.revealLeaf(leaf);
  }
};
var SampleSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).setName("Default Source Path").setDesc("The vault path to automatically fill in for the source path").addText((text) => text.setPlaceholder("Default Source Path").setValue(this.plugin.settings.defaultPath).onChange(async (value) => {
      this.plugin.settings.defaultPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjbGFzc2VzL2N1c3RvbS1leHBsb3Jlci12aWV3LnRzIiwgImNsYXNzZXMvc291cmNlLWZvbGRlci50cyIsICJjbGFzc2VzL2NmZS1maWxlLWhhbmRsZXIudHMiLCAiY2xhc3Nlcy9jZmUtZmlsZS50cyIsICJjbGFzc2VzL2ZpbGUtY3JlYXRpb24tZGF0YS50cyIsICJjbGFzc2VzL3NpbmdsZS1tZWRpYS1maWxlLnRzIiwgImNsYXNzZXMvcmVhbC1maWxlLnRzIiwgImNsYXNzZXMvZm9sZGVyLnRzIiwgImNsYXNzZXMvcGxheWxpc3QudHMiLCAiY2xhc3Nlcy92YXJpYW50LW1lZGlhLWZpbGUudHMiLCAiY2xhc3Nlcy9zb3VyY2UtZm9sZGVyLXNob3J0Y3V0LnRzIiwgImNsYXNzZXMvY29ubGFuZ3MvaHdheXUtdGV4dC50cyIsICJjbGFzc2VzL2NvbmxhbmdzL3Bob3RvbGFuZy10ZXh0LnRzIiwgImNsYXNzZXMvY29ubGFuZy1kaWN0aW9uYXJ5LnRzIiwgImNsYXNzZXMvc3RvcnkudHMiLCAiY2xhc3Nlcy9zbnYudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEN1c3RvbUV4cGxvcmVyVmlldywgVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUiB9IGZyb20gJ2NsYXNzZXMvY3VzdG9tLWV4cGxvcmVyLXZpZXcnO1xyXG5pbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxyXG5cclxuaW50ZXJmYWNlIENGRUNldHRpbmdzIHtcclxuXHRkZWZhdWx0UGF0aDogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDRkVDZXR0aW5ncyA9IHtcclxuXHRkZWZhdWx0UGF0aDogJ3NvdXJjZSdcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ0ZFIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogQ0ZFQ2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlclZpZXcoXHJcblx0XHRcdFZJRVdfVFlQRV9DVVNUT01fRVhQTE9SRVIsXHJcblx0XHRcdChsZWFmKSA9PiBuZXcgQ3VzdG9tRXhwbG9yZXJWaWV3KGxlYWYsIHRoaXMuc2V0dGluZ3MuZGVmYXVsdFBhdGgpXHJcblx0XHQpO1xyXG5cclxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbignZm9sZGVyJywgJ0FjdGl2YXRlIHZpZXcnLCAoKSA9PiB7XHJcblx0XHRcdHRoaXMuYWN0aXZhdGVWaWV3KFZJRVdfVFlQRV9DVVNUT01fRVhQTE9SRVIpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2ltcGxlIGNvbW1hbmQgdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFueXdoZXJlXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ29wZW4tY2ZlLXZpZXcnLFxyXG5cdFx0XHRuYW1lOiAnT3BlbiBDdXN0b20gRmlsZSBFeHBsb3JlciBWaWV3JyxcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLmFjdGl2YXRlVmlldyhWSUVXX1RZUEVfQ1VTVE9NX0VYUExPUkVSKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHQvLyBUaGlzIGFkZHMgYW4gZWRpdG9yIGNvbW1hbmQgdGhhdCBjYW4gcGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2VcclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnc2FtcGxlLWVkaXRvci1jb21tYW5kJyxcclxuXHRcdFx0bmFtZTogJ1NhbXBsZSBlZGl0b3IgY29tbWFuZCcsXHJcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVkaXRvci5nZXRTZWxlY3Rpb24oKSk7XHJcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oJ1NhbXBsZSBFZGl0b3IgQ29tbWFuZCcpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTYW1wbGVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIHBsdWdpbiBob29rcyB1cCBhbnkgZ2xvYmFsIERPTSBldmVudHMgKG9uIHBhcnRzIG9mIHRoZSBhcHAgdGhhdCBkb2Vzbid0IGJlbG9uZyB0byB0aGlzIHBsdWdpbilcclxuXHRcdC8vIFVzaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgd2hlbiB0aGlzIHBsdWdpbiBpcyBkaXNhYmxlZC5cclxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRjb25zb2xlLmxvZygnY2xpY2snLCBldnQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXHJcblx0XHR0aGlzLnJlZ2lzdGVySW50ZXJ2YWwod2luZG93LnNldEludGVydmFsKCgpID0+IGNvbnNvbGUubG9nKCdzZXRJbnRlcnZhbCcpLCA1ICogNjAgKiAxMDAwKSk7XHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBhY3RpdmF0ZVZpZXcodmlld190eXBlOiBzdHJpbmcpIHtcclxuXHRcdGNvbnN0IHsgd29ya3NwYWNlIH0gPSB0aGlzLmFwcDtcclxuXHJcblx0XHRsZXQgbGVhZjogV29ya3NwYWNlTGVhZiB8IG51bGwgPSBudWxsO1xyXG5cclxuXHRcdGxlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XHJcblx0XHRpZiAobGVhZiA9PT0gbnVsbCkge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiRmFpbGVkIHRvIGNyZWF0ZSB2aWV3OiB3b3Jrc3BhY2UgbGVhZiB3YXMgbnVsbFwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0YXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiB2aWV3X3R5cGUsIGFjdGl2ZTogdHJ1ZSB9KTtcclxuXHJcblx0XHQvLyBcIlJldmVhbFwiIHRoZSBsZWFmIGluIGNhc2UgaXQgaXMgaW4gYSBjb2xsYXBzZWQgc2lkZWJhclxyXG5cdFx0d29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBTYW1wbGVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcblx0cGx1Z2luOiBDRkU7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IENGRSkge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0RlZmF1bHQgU291cmNlIFBhdGgnKVxyXG5cdFx0XHQuc2V0RGVzYygnVGhlIHZhdWx0IHBhdGggdG8gYXV0b21hdGljYWxseSBmaWxsIGluIGZvciB0aGUgc291cmNlIHBhdGgnKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0RlZmF1bHQgU291cmNlIFBhdGgnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0UGF0aClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0UGF0aCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFNvdXJjZUZvbGRlciB9IGZyb20gJy4vc291cmNlLWZvbGRlcic7XHJcblxyXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUiA9ICdjdXN0b20tZXhwbG9yZXItdmlldyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ3VzdG9tRXhwbG9yZXJWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xyXG5cdGRlZmF1bHRQYXRoOiBzdHJpbmc7XHJcblx0Y29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGF0aDogc3RyaW5nKSB7XHJcblx0XHRzdXBlcihsZWFmKTtcclxuXHRcdHRoaXMuZGVmYXVsdFBhdGggPSBwYXRoO1xyXG5cdH1cclxuXHJcblx0Z2V0Vmlld1R5cGUoKSB7XHJcblx0XHRyZXR1cm4gVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUjtcclxuXHR9XHJcblxyXG5cdGdldERpc3BsYXlUZXh0KCkge1xyXG5cdFx0cmV0dXJuICdFeGFtcGxlIHZpZXcnO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb25PcGVuKCkge1xyXG5cdFx0Y29uc3Qgd3JhcHBlciA9IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV07XHJcblx0XHR3cmFwcGVyLmVtcHR5KCk7XHJcblx0XHRjb25zdCBtYWluQ29udGFpbmVyID0gd3JhcHBlci5jcmVhdGVEaXYoJ2NmZS1tYWluLWRpc3BsYXknKTtcclxuXHRcdGNvbnN0IGhvbWVQYWdlID0gbWFpbkNvbnRhaW5lci5jcmVhdGVEaXYoJ2NmZS1ob21lLXBhZ2UnKTtcclxuXHRcdGhvbWVQYWdlLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ1BhdGggdG8gU291cmNlOicgfSApO1xyXG5cdFx0Y29uc3QgZXhpc3RpbmdTb3VyY2VQYXRoSW5wdXQgPSBob21lUGFnZS5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMuZGVmYXVsdFBhdGggfSApO1xyXG5cdFx0ZXhpc3RpbmdTb3VyY2VQYXRoSW5wdXQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblx0XHRjb25zdCBzdWJtaXRCdXR0b24gPSBob21lUGFnZS5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnc3VibWl0JyB9ICk7XHJcblx0XHRjb25zdCB2YXVsdCA9IHRoaXMuYXBwLnZhdWx0O1xyXG5cdFx0c3VibWl0QnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IHBhdGggPSBleGlzdGluZ1NvdXJjZVBhdGhJbnB1dC52YWx1ZTtcclxuXHRcdFx0Y29uc3Qgc2YgPSA8U291cmNlRm9sZGVyPiBhd2FpdCBTb3VyY2VGb2xkZXIuQ3JlYXRlT3JMb2FkU291cmNlRm9sZGVyKHBhdGgsIHZhdWx0KTtcclxuXHRcdFx0YXdhaXQgc2YuRGlzcGxheShtYWluQ29udGFpbmVyLCB2YXVsdCk7XHJcblx0XHR9XHJcblx0XHRob21lUGFnZS5vbmtleWRvd24gPSBhc3luYyAoa2V5UHJlc3NFdmVudCkgPT4ge1xyXG5cdFx0XHRpZiAoa2V5UHJlc3NFdmVudC5rZXkgPT09ICdFbnRlcicpIHtcclxuXHRcdFx0XHRjb25zdCBwYXRoID0gZXhpc3RpbmdTb3VyY2VQYXRoSW5wdXQudmFsdWU7XHJcblx0XHRcdFx0Y29uc3Qgc2YgPSBhd2FpdCBTb3VyY2VGb2xkZXIuQ3JlYXRlT3JMb2FkU291cmNlRm9sZGVyKHBhdGgsIHZhdWx0KTtcclxuXHRcdFx0XHRhd2FpdCBzZi5EaXNwbGF5KG1haW5Db250YWluZXIsIHZhdWx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgb25DbG9zZSgpIHtcclxuXHRcdC8vIE5vdGhpbmcgdG8gY2xlYW4gdXAuXHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBub3JtYWxpemVQYXRoLCBOb3RpY2UsIFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IENGRUZpbGVIYW5kbGVyIH0gZnJvbSBcIi4vY2ZlLWZpbGUtaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBGaWxlQ3JlYXRpb25EYXRhIH0gZnJvbSBcIi4vZmlsZS1jcmVhdGlvbi1kYXRhXCI7XHJcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU291cmNlRm9sZGVyIHtcclxuXHR2YXVsdFBhdGg6IHN0cmluZztcclxuXHRmaWxlQ291bnQ6IG51bWJlcjtcclxuXHJcblx0cHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMudmF1bHRQYXRoID0gJyc7XHJcblx0XHR0aGlzLmZpbGVDb3VudCA9IDA7XHJcblx0fVxyXG5cclxuXHRhc3luYyBEaXNwbGF5KGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIHZhdWx0OiBWYXVsdCkge1xyXG5cdFx0Y29uc3Qgc252ID0gbmV3IFNvdXJjZUFuZFZhdWx0KHRoaXMsIHZhdWx0KTtcclxuXHRcdGxldCByb290Rm9sZGVyO1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cm9vdEZvbGRlciA9IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgMCk7XHJcblx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdGNvbnN0IG5ld1Jvb3RGb2xkZXJEYXRhID0gbmV3IEZpbGVDcmVhdGlvbkRhdGEoc252LCAnRm9sZGVyJywgMCk7XHJcblx0XHRcdHJvb3RGb2xkZXIgPSBhd2FpdCBDRkVGaWxlSGFuZGxlci5DcmVhdGVOZXcobmV3Um9vdEZvbGRlckRhdGEpO1xyXG5cdFx0fVxyXG5cdFx0YXdhaXQgU291cmNlRm9sZGVyLlNhdmUoc252KTtcclxuXHRcdGF3YWl0IHJvb3RGb2xkZXIuU2F2ZShzbnYpO1xyXG5cdFx0YXdhaXQgcm9vdEZvbGRlci5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBhc3luYyBDcmVhdGVPckxvYWRTb3VyY2VGb2xkZXIodmF1bHRQYXRoOiBzdHJpbmcsIHZhdWx0OiBWYXVsdCk6IFByb21pc2U8U291cmNlRm9sZGVyPiB7XHJcblx0XHR2YXVsdFBhdGggPSB2YXVsdFBhdGguZW5kc1dpdGgoJy9zb3VyY2UuanNvbicpID8gdmF1bHRQYXRoLnNsaWNlKDAsIC0xMikgOiB2YXVsdFBhdGg7XHJcblx0XHRjb25zdCBleGlzdHMgPSB2YXVsdC5nZXRGaWxlQnlQYXRoKHZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKSAhPT0gbnVsbDtcclxuXHRcdGxldCBuZXdTb3VyY2VGb2xkZXI6IFNvdXJjZUZvbGRlcjtcclxuXHRcdGlmIChleGlzdHMpIHtcclxuXHRcdFx0bmV3U291cmNlRm9sZGVyID0gYXdhaXQgdGhpcy5Mb2FkRXhpc3RpbmdTb3VyY2UodmF1bHRQYXRoLCB2YXVsdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRuZXdTb3VyY2VGb2xkZXIgPSBhd2FpdCB0aGlzLkNyZWF0ZU5ld1NvdXJjZUZvbGRlcih2YXVsdFBhdGgsIHZhdWx0KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBuZXdTb3VyY2VGb2xkZXI7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBhc3luYyBDcmVhdGVOZXdTb3VyY2VGb2xkZXIodmF1bHRQYXRoOiBzdHJpbmcsIHZhdWx0OiBWYXVsdCk6IFByb21pc2U8U291cmNlRm9sZGVyPiB7XHJcblx0XHRjb25zdCBuZXdTb3VyY2VGb2xkZXIgPSBuZXcgU291cmNlRm9sZGVyKCk7XHJcblx0XHRuZXdTb3VyY2VGb2xkZXIudmF1bHRQYXRoID0gdmF1bHRQYXRoO1xyXG5cdFx0bmV3U291cmNlRm9sZGVyLmZpbGVDb3VudCA9IDA7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRhd2FpdCB2YXVsdC5jcmVhdGVGb2xkZXIodmF1bHRQYXRoKTtcclxuXHRcdH0gZmluYWxseSB7XHJcblx0XHRcdGNvbnN0IHNvdXJjZVBhdGggPSBub3JtYWxpemVQYXRoKHZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKTtcclxuXHRcdFx0YXdhaXQgdmF1bHQuYWRhcHRlci53cml0ZShzb3VyY2VQYXRoLCAnMCcpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ld1NvdXJjZUZvbGRlcjtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIGFzeW5jIExvYWRFeGlzdGluZ1NvdXJjZSh2YXVsdFBhdGg6IHN0cmluZywgdmF1bHQ6IFZhdWx0KTogUHJvbWlzZTxTb3VyY2VGb2xkZXI+IHtcclxuXHRcdGNvbnN0IHNvdXJjZVRGaWxlID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aCh2YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XHJcblx0XHRpZiAoc291cmNlVEZpbGUgPT09IG51bGwpIHtcclxuXHRcdFx0bmV3IE5vdGljZShcIlNvdXJjZSBGaWxlIGNvdWxkIG5vdCBiZSBmb3VuZCBhdCB0aGUgcGF0aDogXCIgKyB2YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XHJcblx0XHRcdHRocm93IEVycm9yKFwiU291cmNlIEZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGpzb25EYXRhID0gYXdhaXQgdmF1bHQuY2FjaGVkUmVhZChzb3VyY2VURmlsZSk7XHJcblxyXG5cdFx0Y29uc3QgcGxhaW5PYmplY3QgPSBhd2FpdCBKU09OLnBhcnNlKGpzb25EYXRhKTtcclxuXHRcdGNvbnN0IG5ld1NvdXJjZUZvbGRlciA9IE9iamVjdC5hc3NpZ24obmV3IFNvdXJjZUZvbGRlcigpLCBwbGFpbk9iamVjdCk7XHJcblx0XHRuZXdTb3VyY2VGb2xkZXIudmF1bHRQYXRoID0gdmF1bHRQYXRoO1xyXG5cdFx0YXdhaXQgU291cmNlRm9sZGVyLlNhdmUobmV3IFNvdXJjZUFuZFZhdWx0KG5ld1NvdXJjZUZvbGRlciwgdmF1bHQpKTtcclxuXHRcdHJldHVybiBuZXdTb3VyY2VGb2xkZXI7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTYXZlcyB0aGUgbmV3IGZpbGUgY291bnRcclxuXHQgKi9cclxuXHRzdGF0aWMgYXN5bmMgU2F2ZShzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQpIHtcclxuXHRcdGNvbnN0IHNvdXJjZUZvbGRlciA9IHNvdXJjZUFuZFZhdWx0LnNvdXJjZUZvbGRlcjtcclxuXHRcdGNvbnN0IHZhdWx0ID0gc291cmNlQW5kVmF1bHQudmF1bHQ7XHJcblxyXG5cdFx0Ly8gRmluZCB0aGUgZmlsZSBhbmQgY2hlY2sgdGhhdCBpdCBpc24ndCBudWxsXHJcblx0XHRjb25zdCB0RmlsZSA9IHZhdWx0LmdldEZpbGVCeVBhdGgoc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKTtcclxuXHRcdGlmICh0RmlsZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiU291cmNlIEZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XHJcblx0XHRcdHRocm93IEVycm9yKFwiU291cmNlIEZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QganNvbkRhdGEgPSBKU09OLnN0cmluZ2lmeShzb3VyY2VGb2xkZXIpO1xyXG5cdFx0YXdhaXQgdmF1bHQubW9kaWZ5KHRGaWxlLCBqc29uRGF0YSk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xuaW1wb3J0IHsgRmlsZUNyZWF0aW9uRGF0YSB9IGZyb20gXCIuL2ZpbGUtY3JlYXRpb24tZGF0YVwiO1xuaW1wb3J0IHsgRm9sZGVyIH0gZnJvbSBcIi4vZm9sZGVyXCI7XG5pbXBvcnQgeyBQbGF5bGlzdCB9IGZyb20gXCIuL3BsYXlsaXN0XCI7XG5pbXBvcnQgeyBTaW5nbGVNZWRpYUZpbGUgfSBmcm9tIFwiLi9zaW5nbGUtbWVkaWEtZmlsZVwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcbmltcG9ydCB7IFZhcmlhbnRNZWRpYUZpbGUgfSBmcm9tIFwiLi92YXJpYW50LW1lZGlhLWZpbGVcIjtcbmltcG9ydCB7IFNvdXJjZUZvbGRlclNob3J0Y3V0IH0gZnJvbSBcIi4vc291cmNlLWZvbGRlci1zaG9ydGN1dFwiO1xuaW1wb3J0IHsgQ29ubGFuZ0RpY3Rpb25hcnkgfSBmcm9tIFwiLi9jb25sYW5nLWRpY3Rpb25hcnlcIjtcbmltcG9ydCB7IFN0b3J5IH0gZnJvbSBcIi4vc3RvcnlcIjtcblxuZXhwb3J0IGNsYXNzIENGRUZpbGVIYW5kbGVyIHtcblxuXHQvKipcblx0ICogQWxsIG9mIHRoZSBrbm93biBmaWxlIGZvcm1hdHNcblx0ICovXG5cdHN0YXRpYyBLbm93bkZpbGVUeXBlczogc3RyaW5nW10gPSBbXG5cdFx0J0ZvbGRlcicsXG5cdFx0J1NpbmdsZSBNZWRpYSBGaWxlJyxcblx0XHQnVmFyaWFudCBNZWRpYSBGaWxlJyxcblx0XHQnUGxheWxpc3QnLFxuXHRcdCdTdG9yeScsXG5cdFx0J1NvdXJjZSBGb2xkZXIgU2hvcnRjdXQnLFxuXHRcdCdDb25sYW5nIERpY3Rpb25hcnknXG5cdF1cblxuXHRzdGF0aWMgYXN5bmMgQ3JlYXRlTmV3KGRhdGE6IEZpbGVDcmVhdGlvbkRhdGEpOiBQcm9taXNlPENGRUZpbGU+IHtcblx0XHRsZXQgbmV3RmlsZTogQ0ZFRmlsZTtcblx0XHRzd2l0Y2goZGF0YS5maWxlVHlwZSkge1xuXHRcdFx0Y2FzZSAnRm9sZGVyJzpcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBGb2xkZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1NpbmdsZSBNZWRpYSBGaWxlJzpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IFNpbmdsZU1lZGlhRmlsZS5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoZGF0YSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnVmFyaWFudCBNZWRpYSBGaWxlJzpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IFZhcmlhbnRNZWRpYUZpbGUuQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1BsYXlsaXN0Jzpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IFBsYXlsaXN0LkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdTdG9yeSc6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBTdG9yeS5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoZGF0YSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnU291cmNlIEZvbGRlciBTaG9ydGN1dCc6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBTb3VyY2VGb2xkZXJTaG9ydGN1dC5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoZGF0YSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnQ29ubGFuZyBEaWN0aW9uYXJ5Jzpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IENvbmxhbmdEaWN0aW9uYXJ5LkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGF3YWl0IG5ld0ZpbGUuU2F2ZShkYXRhLnNudik7XG5cdFx0cmV0dXJuIG5ld0ZpbGU7XG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgTG9hZEZpbGUoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZUlEOiBudW1iZXIpOiBQcm9taXNlPENGRUZpbGU+IHtcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzbnYuc291cmNlRm9sZGVyO1xuXHRcdGNvbnN0IHZhdWx0ID0gc252LnZhdWx0O1xuXG5cdFx0Y29uc3QgdEZpbGUgPSB2YXVsdC5nZXRGaWxlQnlQYXRoKHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyBmaWxlSUQgKyAnLmpzb24nKTtcblx0XHRpZiAodEZpbGUgPT09IG51bGwpIHtcblx0XHRcdG5ldyBOb3RpY2UoXCJGaWxlIGNvdWxkIG5vdCBiZSBmb3VuZCBhdCB0aGUgcGF0aDogXCIgKyBzb3VyY2VGb2xkZXIudmF1bHRQYXRoICsgJy8nICsgZmlsZUlEICsgJy5qc29uJyk7XG5cdFx0XHR0aHJvdyBFcnJvcihcIkZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyBmaWxlSUQgKyAnLmpzb24nKTtcblx0XHR9XG5cdFx0Y29uc3QganNvbkRhdGEgPSBhd2FpdCB2YXVsdC5jYWNoZWRSZWFkKHRGaWxlKTtcblx0XHRjb25zdCBwbGFpbk9iamVjdCA9IEpTT04ucGFyc2UoanNvbkRhdGEpO1xuXHRcdHN3aXRjaChwbGFpbk9iamVjdC5maWxlVHlwZSkge1xuXHRcdFx0Y2FzZSAnRm9sZGVyJzpcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBGb2xkZXIoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnU2luZ2xlIE1lZGlhIEZpbGUnOlxuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgU2luZ2xlTWVkaWFGaWxlKCksIHBsYWluT2JqZWN0KTtcblx0XHRcdGNhc2UgJ1ZhcmlhbnQgTWVkaWEgRmlsZSc6XG5cdFx0XHRcdHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBWYXJpYW50TWVkaWFGaWxlKCksIHBsYWluT2JqZWN0KTtcblx0XHRcdGNhc2UgJ1BsYXlsaXN0Jzpcblx0XHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFBsYXlsaXN0KCksIHBsYWluT2JqZWN0KTtcblx0XHRcdGNhc2UgJ0h3YXl1IFN0b3J5Jzoge1xuXHRcdFx0XHRjb25zdCBzdG9yeSA9IE9iamVjdC5hc3NpZ24obmV3IFN0b3J5KCksIHBsYWluT2JqZWN0KTtcblx0XHRcdFx0c3RvcnkuZmlsZVR5cGUgPSAnU3RvcnknO1xuXHRcdFx0XHRzdG9yeS5sYW5ndWFnZSA9ICdId2F5dSc7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcGxhaW5PYmplY3QucGFnZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb25zdCBwYWdlID0gcGxhaW5PYmplY3QucGFnZXNbaV07XG5cdFx0XHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBwYWdlLmxpbmVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRwYWdlLmxpbmVzW2pdLmNvbnRlbnQgPSBwYWdlLmxpbmVzW2pdLmxpbmU7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhwYWdlLmxpbmVzW2pdLmNvbnRlbnQpO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHBhZ2UubGluZXNbal0ubGluZTtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHBhZ2UubGluZXNbal0uY29udGVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzdG9yeTtcblx0XHRcdH1cblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyBTdG9yeSc6IHtcblx0XHRcdFx0Y29uc3Qgc3RvcnkgPSBPYmplY3QuYXNzaWduKG5ldyBTdG9yeSgpLCBwbGFpbk9iamVjdCk7XG5cdFx0XHRcdHN0b3J5LmZpbGVUeXBlID0gJ1N0b3J5Jztcblx0XHRcdFx0c3RvcnkubGFuZ3VhZ2UgPSAnUGhvdG9sYW5nJztcblx0XHRcdFx0cmV0dXJuIHN0b3J5O1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSAnU3RvcnknOlxuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgU3RvcnkoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnU291cmNlIEZvbGRlciBTaG9ydGN1dCc6XG5cdFx0XHRcdHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBTb3VyY2VGb2xkZXJTaG9ydGN1dCgpLCBwbGFpbk9iamVjdCk7XG5cdFx0XHRjYXNlICdDb25sYW5nIERpY3Rpb25hcnknOlxuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgQ29ubGFuZ0RpY3Rpb25hcnkoKSwgcGxhaW5PYmplY3QpO1xuXHRcdH1cblx0fVxufVxuIiwgImltcG9ydCB7IG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5pbXBvcnQgeyBGaWxlQ3JlYXRpb25EYXRhIH0gZnJvbSBcIi4vZmlsZS1jcmVhdGlvbi1kYXRhXCI7XG5pbXBvcnQgeyBDRkVGaWxlSGFuZGxlciB9IGZyb20gXCIuL2NmZS1maWxlLWhhbmRsZXJcIjtcbmltcG9ydCB7IFNvdXJjZUZvbGRlciB9IGZyb20gXCIuL3NvdXJjZS1mb2xkZXJcIjtcbmltcG9ydCB7IEZvbGRlciB9IGZyb20gXCIuL2ZvbGRlclwiO1xuXG4vLyNyZWdpb24gRm9ybWF0dGVkIEZpbGUgSGFuZGxlclxuLy8jZW5kcmVnaW9uXG5cbi8vI3JlZ2lvbiBGaWxlIFR5cGVzXG4vKipcbiAqIEFuIGludGVycHJldGF0aW9uIG9mIGpzb24gZmlsZXMgYXMgYSBcImZpbGVcIiBvZiBhIHNwZWNpZmljIFwiZmlsZSBmb3JtYXRcIlxuICogdGhhdCBjYW4gYmUgaW50ZXJwcmV0ZWQgYW5kIGRpc3BsYXllZCBieSB0aGUgcGx1Z2luLlxuICovXG5leHBvcnQgY2xhc3MgQ0ZFRmlsZSB7XG5cdC8qKlxuXHQgKiBBIHVuaXF1ZSAod2l0aGluIHRoZSBcInNvdXJjZVwiIG9mIHRoZSBjdXJyZW50IGV4cGxvcmVyKSBudW1lcmljYWwgaWRlbnRpZmllciBmb3IgdGhlIGZpbGVcblx0ICovXG5cdGlkOiBudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSB0eXBlIG9mIGZpbGVcblx0ICovXG5cdGZpbGVUeXBlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHdpdGhpbiB0aGUgc291cmNlXG5cdCAqL1xuXHRmaWxlTmFtZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgSUQgb2YgdGhlIHBhcmVudCBmb2xkZXJcblx0ICovXG5cdHBhcmVudEZvbGRlcklEOiBudW1iZXI7XG5cblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRklMRV9OQU1FX0lOUFVUX0lOREVYID0gMDtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUEFSRU5UX0ZPTERFUl9JRF9JTlBVVF9JTkRFWCA9IDE7XG5cblx0LyoqXG5cdCAqIFNIT1VMRCBOT1QgQkUgQ0FMTEVEIE9VVFNJREUgT0YgQ0ZFRmlsZUhhbmRsZXIuXG5cdCAqIFxuXHQgKiBVc2UgQ0ZFRmlsZUhhbmRsZXIuQ3JlYXRlTmV3KCkgaW5zdGVhZC5cblx0ICogXG5cdCAqIENISUxEIENMQVNTRVMgU0hPVUxEIE5PVCBXUklURSBUTyBBIEZJTEUuIFRISVMgSVMgRE9ORSBJTlNJREUgT0YgQ0ZFRmlsZUhhbmRsZXJcblx0ICogXG5cdCAqIENGRUZpbGUgbGF5ZXI6XG5cdCAqIFxuXHQgKiBzZXRzIHRoZSBzb3VyY2UsIGlkLCBmaWxlIHR5cGUsIGZpbGUgbmFtZSwgYW5kIHBhcmVudCBmb2xkZXIgaWQgb2YgdGhlIGZpbGUgb2JqZWN0LlxuXHQgKi9cblx0c3RhdGljIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhOiBGaWxlQ3JlYXRpb25EYXRhKTogUHJvbWlzZTxDRkVGaWxlPiB7XG5cdFx0Y29uc3Qgc291cmNlQW5kVmF1bHQgPSBkYXRhLnNudjtcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzb3VyY2VBbmRWYXVsdC5zb3VyY2VGb2xkZXI7XG5cblx0XHQvLyBTZXQgdGhlIHZhbHVlcyBvZiB0aGUgdW5maW5pc2hlZCBmaWxlXG5cdFx0Y29uc3QgdW5maW5pc2hlZEZpbGUgPSBuZXcgQ0ZFRmlsZSgpO1xuXHRcdHVuZmluaXNoZWRGaWxlLmlkID0gc291cmNlRm9sZGVyLmZpbGVDb3VudDtcblx0XHR1bmZpbmlzaGVkRmlsZS5maWxlVHlwZSA9IGRhdGEuZmlsZVR5cGU7XG5cdFx0dW5maW5pc2hlZEZpbGUuZmlsZU5hbWUgPSAnJztcblx0XHR1bmZpbmlzaGVkRmlsZS5wYXJlbnRGb2xkZXJJRCA9IGRhdGEucGFyZW50Rm9sZGVySUQ7XG5cdFx0XG5cdFx0Ly8gVXBkYXRlIHRoZSBmaWxlIGNvdW50XG5cdFx0c291cmNlRm9sZGVyLmZpbGVDb3VudCsrO1xuXHRcdGF3YWl0IFNvdXJjZUZvbGRlci5TYXZlKHNvdXJjZUFuZFZhdWx0KTtcblxuXHRcdC8vIEZpbmQgdGhlIHBhcmVudCBmb2xkZXIgYW5kIGFkZCB0aGlzIGZpbGUgdG8gaXRcblx0XHRpZiAodW5maW5pc2hlZEZpbGUuaWQgIT09IHVuZmluaXNoZWRGaWxlLnBhcmVudEZvbGRlcklEKSB7XG5cdFx0XHRjb25zdCBwYXJlbnRGb2xkZXIgPSA8Rm9sZGVyPiAoYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc291cmNlQW5kVmF1bHQsIHVuZmluaXNoZWRGaWxlLnBhcmVudEZvbGRlcklEKSk7XG5cdFx0XHRwYXJlbnRGb2xkZXIuY29udGFpbmVkRmlsZUlEcy5wdXNoKHVuZmluaXNoZWRGaWxlLmlkKTtcblx0XHRcdGF3YWl0IHBhcmVudEZvbGRlci5TYXZlKHNvdXJjZUFuZFZhdWx0KTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIHVuZmluaXNoZWQgZmlsZSBzbyB0aGUgbmV4dCBsYXllciBjYW4gYWRkIHRvIGl0XG5cdFx0cmV0dXJuIHVuZmluaXNoZWRGaWxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNIT1VMRCBOT1QgQkUgQ0FMTEVEIE9VVFNJREUgT0YgQ0ZFRmlsZUhhbmRsZXIuXG5cdCAqIFxuXHQgKiBVc2UgQ0ZFRmlsZUhhbmRsZXIuRGlzcGxheVRodW1ibmFpbCgpIGluc3RlYWQuXG5cdCAqIFxuXHQgKiBDRkVGaWxlIGxheWVyOlxuXHQgKiBcblx0ICogc2V0cyB0aGUgdGh1bWJuYWlsIGNvbnRhaW5lcidzIGNzcyBjbGFzcyB0byAnY2ZlLXRodW1ibmFpbCdcblx0ICogYW5kIGZ1bGx5IGRpc3BsYXlzIHRoZSBmaWxlIGlmIHRoZSB0aHVtYm5haWwgaXMgY2xpY2tlZC5cblx0ICovXG5cdGFzeW5jIERpc3BsYXlUaHVtYm5haWwoc291cmNlQW5kVmF1bHQ6IFNvdXJjZUFuZFZhdWx0LCB0aHVtYm5haWxEaXY6IEhUTUxEaXZFbGVtZW50LCBkaXNwbGF5RGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdHRodW1ibmFpbERpdi5jbGFzc05hbWUgPSAnY2ZlLXRodW1ibmFpbCB2Ym94Jztcblx0XHR0aHVtYm5haWxEaXYub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzb3VyY2VBbmRWYXVsdCwgZGlzcGxheURpdik7XG5cdFx0fVxuXHRcdGNvbnN0IGlkVGV4dCA9IHRodW1ibmFpbERpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRpZFRleHQudGV4dENvbnRlbnQgPSAnSUQ6ICcgKyB0aGlzLmlkO1xuXHRcdGlkVGV4dC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInO1xuXHRcdGNvbnN0IGZpbGVUZXh0ID0gdGh1bWJuYWlsRGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdGZpbGVUZXh0LnRleHRDb250ZW50ID0gJ0ZpbGUgVHlwZTogJyArIHRoaXMuZmlsZVR5cGU7XG5cdFx0ZmlsZVRleHQuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnY2VudGVyJztcblx0XHRjb25zdCBuYW1lVGV4dCA9IHRodW1ibmFpbERpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRuYW1lVGV4dC50ZXh0Q29udGVudCA9ICdGaWxlIE5hbWU6ICcgKyB0aGlzLmZpbGVOYW1lO1xuXHRcdG5hbWVUZXh0LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2NlbnRlcic7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBTSE9VTEQgTk9UIEJFIENBTExFRCBPVVRTSURFIE9GIENGRUZpbGVIYW5kbGVyLlxuXHQgKiBcblx0ICogVXNlIENGRUZpbGVIYW5kbGVyLkRpc3BsYXkoKSBpbnN0ZWFkLlxuXHQgKiBcblx0ICogQ0ZFRmlsZSBsYXllcjpcblx0ICogXG5cdCAqIGVtcHRpZXMgdGhlIGRpc3BsYXkgY29udGFpbmVyIHByb3ZpZGVkLlxuXHQgKi9cblx0YXN5bmMgRGlzcGxheShzbnY6IFNvdXJjZUFuZFZhdWx0LCBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0Y29udGFpbmVyLmVtcHR5KCk7XG5cdFx0Y29uc3QgaGVhZGVyQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdignaGJveCcpO1xuXHRcdGNvbnN0IGJhY2tCdXR0b24gPSBoZWFkZXJDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0JhY2sgdG8gcGFyZW50IGZvbGRlcicgfSApO1xuXHRcdGhlYWRlckNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0ZpbGUgSUQ6ICcgKyB0aGlzLmlkIH0gKVxuXHRcdGhlYWRlckNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0ZpbGUgTmFtZTogJyB9IClcblx0XHRjb25zdCBuYW1lSW5wdXQgPSBoZWFkZXJDb250YWluZXIuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiB0aGlzLmZpbGVOYW1lIH0gKTtcblx0XHRiYWNrQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBwYXJlbnRGb2xkZXIgPSBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMucGFyZW50Rm9sZGVySUQpO1xuXHRcdFx0aWYgKHBhcmVudEZvbGRlciAhPT0gbnVsbCkge1xuXHRcdFx0XHRhd2FpdCBwYXJlbnRGb2xkZXIuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG5hbWVJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMuZmlsZU5hbWUgPSBuYW1lSW5wdXQudmFsdWU7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU0hPVUxEIE5PVCBCRSBDQUxMRUQgT1VUU0lERSBPRiBDRkVGaWxlSGFuZGxlci5cblx0ICogXG5cdCAqIChpdCBpcyB1bmxpa2VseSB0aGlzIG1ldGhvZCB3aWxsIGV2ZXIgYmUgb3ZlcnJpZGVuIGJ5IGNoaWxkIGNsYXNzZXMsIGJ1dCBtYWtpbmcgdGhpcyAnaW5hY2Nlc3NpYmxlJyBpcyBmb3IgY29uc2lzdGVuY3kpXG5cdCAqIFxuXHQgKiBVc2UgQ0ZFRmlsZUhhbmRsZXIuU2F2ZUZpbGUoKSBpbnN0ZWFkLlxuXHQgKiBcblx0ICogRm9ybWF0dGVkIEZpbGUgbGF5ZXI6XG5cdCAqIFxuXHQgKiBEZWxldGVzIHRoaXMgZmlsZSBJRCBmcm9tIHRoZSBvcmlnaW5hbCBwYXJlbnQgZm9sZGVyLCBhZGRzIHRoaXMgZmlsZSB0byB0aGUgbmV3IHBhcmVudCBmb2xkZXIsIGFuZCBjaGFuZ2VzIHRoZSBwYXJlbnQgZm9sZGVyIElEXG5cdCAqL1xuXHRhc3luYyBNb3ZlRmlsZShzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQsIG5ld1BhcmVudEZvbGRlcklEOiBudW1iZXIpIHtcblx0XHQvLyBEZWxldGUgdGhpcyBmaWxlIGlkIGZyb20gdGhlIG9yaWdpbmFsIHBhcmVudCBmb2xkZXJcblx0XHRjb25zdCBvbGRQYXJlbnRGb2xkZXIgPSA8Rm9sZGVyPiAoYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc291cmNlQW5kVmF1bHQsIHRoaXMucGFyZW50Rm9sZGVySUQpKTtcblx0XHRjb25zdCBpbmRleE9mRmlsZSA9IG9sZFBhcmVudEZvbGRlci5jb250YWluZWRGaWxlSURzLmluZGV4T2YodGhpcy5pZCk7XG5cdFx0b2xkUGFyZW50Rm9sZGVyLmNvbnRhaW5lZEZpbGVJRHMuc3BsaWNlKGluZGV4T2ZGaWxlLCAxKTtcblx0XHRvbGRQYXJlbnRGb2xkZXIuU2F2ZShzb3VyY2VBbmRWYXVsdCk7IC8vIHRoaXMgY2FuIGJlIGRvbmUgYXN5bmNocm9ub3VzbHkgd2l0aG91dCBhZmZlY3RpbmcgdGhlIG90aGVyc1xuXG5cdFx0Ly8gQWRkIHRoaXMgZmlsZSB0byB0aGUgbmV3IHBhcmVudCBmb2xkZXJcblx0XHRjb25zdCBuZXdQYXJlbnRGb2xkZXIgPSA8Rm9sZGVyPiAoYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc291cmNlQW5kVmF1bHQsIG5ld1BhcmVudEZvbGRlcklEKSk7XG5cdFx0bmV3UGFyZW50Rm9sZGVyLmNvbnRhaW5lZEZpbGVJRHMucHVzaCh0aGlzLmlkKTtcblx0XHRuZXdQYXJlbnRGb2xkZXIuU2F2ZShzb3VyY2VBbmRWYXVsdCk7IC8vIHRoaXMgY2FuIGJlIGRvbmUgYXN5bmNocm9ub3VzbHkgd2l0aG91dCBhZmZlY3RpbmcgdGhlIG90aGVyc1xuXG5cdFx0dGhpcy5wYXJlbnRGb2xkZXJJRCA9IG5ld1BhcmVudEZvbGRlcklEO1xuXHRcdHRoaXMuU2F2ZShzb3VyY2VBbmRWYXVsdCk7IC8vIHRoaXMgY2FuIGJlIGRvbmUgYXN5bmNocm9ub3VzbHkgd2l0aG91dCBhZmZlY3RpbmcgdGhlIG90aGVyc1xuXHR9XG5cblx0YXN5bmMgU2F2ZShzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQpIHtcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzb3VyY2VBbmRWYXVsdC5zb3VyY2VGb2xkZXI7XG5cdFx0Y29uc3QgdmF1bHQgPSBzb3VyY2VBbmRWYXVsdC52YXVsdDtcblx0XHRjb25zdCBmaWxlUGF0aCA9IHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyB0aGlzLmlkICsgJy5qc29uJztcblx0XHRjb25zdCBqc29uRGF0YSA9IEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuXHRcdGNvbnN0IHRGaWxlID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG5cdFx0aWYgKHRGaWxlID09PSBudWxsKSB7XG5cdFx0XHRjb25zdCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVBhdGgoZmlsZVBhdGgpO1xuXHRcdFx0YXdhaXQgdmF1bHQuYWRhcHRlci53cml0ZShub3JtYWxpemVkUGF0aCwganNvbkRhdGEpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRhd2FpdCB2YXVsdC5tb2RpZnkodEZpbGUsIGpzb25EYXRhKTtcblx0fVxufVxuIiwgImltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsZUNyZWF0aW9uRGF0YSB7XHJcblx0c252OiBTb3VyY2VBbmRWYXVsdDtcclxuXHRmaWxlVHlwZTogc3RyaW5nO1xyXG5cdHBhcmVudEZvbGRlcklEOiBudW1iZXI7XHJcblx0Y29uc3RydWN0b3Ioc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZVR5cGU6IHN0cmluZywgcGFyZW50Rm9sZGVySUQ6IG51bWJlcikge1xyXG5cdFx0dGhpcy5zbnYgPSBzbnY7XHJcblx0XHR0aGlzLmZpbGVUeXBlID0gZmlsZVR5cGU7XHJcblx0XHR0aGlzLnBhcmVudEZvbGRlcklEID0gcGFyZW50Rm9sZGVySUQ7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBub3JtYWxpemVQYXRoLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xyXG5pbXBvcnQgeyBSZWFsRmlsZSB9IGZyb20gXCIuL3JlYWwtZmlsZVwiO1xyXG5pbXBvcnQgeyBGaWxlQ3JlYXRpb25EYXRhIH0gZnJvbSBcIi4vZmlsZS1jcmVhdGlvbi1kYXRhXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2luZ2xlTWVkaWFGaWxlIGV4dGVuZHMgUmVhbEZpbGUge1xyXG5cdGZpbGVUeXBlID0gJ1NpbmdsZSBNZWRpYSBGaWxlJztcclxuXHJcblx0cHJpdmF0ZSBleHRlbnNpb25OYW1lOiBzdHJpbmc7XHJcblx0XHJcblx0Z2V0IG1lZGlhVHlwZSgpOiBzdHJpbmcge1xyXG5cdFx0c3dpdGNoICh0aGlzLmV4dGVuc2lvbk5hbWUpIHtcclxuXHRcdFx0Y2FzZSAncG5nJzpcclxuXHRcdFx0Y2FzZSAnanBnJzpcclxuXHRcdFx0Y2FzZSAnd2VicCc6XHJcblx0XHRcdGNhc2UgJ2hlaWMnOlxyXG5cdFx0XHRjYXNlICdnaWYnOlxyXG5cdFx0XHRcdHJldHVybiAnSW1hZ2UnO1xyXG5cdFx0XHRjYXNlICdtcDQnOlxyXG5cdFx0XHRjYXNlICdNUDQnOlxyXG5cdFx0XHRjYXNlICdtb3YnOlxyXG5cdFx0XHRjYXNlICdNT1YnOlxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHJldHVybiAnVmlkZW8nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0b3ZlcnJpZGUgYXN5bmMgZ2V0U3JjKHNudjogU291cmNlQW5kVmF1bHQpOiBQcm9taXNlPHN0cmluZz4ge1xyXG5cdFx0Y29uc3QgbWVkaWFGaWxlID0gYXdhaXQgdGhpcy5nZXRURmlsZShzbnYpO1xyXG5cdFx0Y29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCBzbnYudmF1bHQucmVhZEJpbmFyeShtZWRpYUZpbGUpO1xyXG5cdFx0Y29uc3QgYmxvYiA9IG5ldyBCbG9iKFthcnJheUJ1ZmZlcl0pO1xyXG5cdFx0Y29uc3QgbWVkaWFVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cdFx0cmV0dXJuIG1lZGlhVXJsO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBnZXRURmlsZShzbnY6IFNvdXJjZUFuZFZhdWx0KTogUHJvbWlzZTxURmlsZT4ge1xyXG5cdFx0Y29uc3QgbWVkaWFQYXRoID0gYXdhaXQgdGhpcy5nZXRQYXRoKHNudik7XHJcblx0XHRsZXQgbWVkaWFGaWxlID0gc252LnZhdWx0LmdldEZpbGVCeVBhdGgobWVkaWFQYXRoKTtcclxuXHRcdGlmIChtZWRpYUZpbGUgPT09IG51bGwpIHtcclxuXHRcdFx0bWVkaWFGaWxlID0gc252LnZhdWx0LmdldEZpbGVCeVBhdGgobWVkaWFQYXRoICsgJy4nICsgdGhpcy5leHRlbnNpb25OYW1lKTtcclxuXHRcdFx0aWYgKG1lZGlhRmlsZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdHRocm93IEVycm9yKCdGaWxlIG5vdCBmb3VuZCBhdCBwYXRoOiAnICsgbWVkaWFQYXRoICsgJyBvciAnICsgbWVkaWFQYXRoICsgJy4nICsgdGhpcy5leHRlbnNpb25OYW1lKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzbnYudmF1bHQucmVuYW1lKG1lZGlhRmlsZSwgbWVkaWFQYXRoKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBtZWRpYUZpbGU7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIGdldFBhdGgoc252OiBTb3VyY2VBbmRWYXVsdCk6IFByb21pc2U8c3RyaW5nPiB7XHJcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzbnYuc291cmNlRm9sZGVyO1xyXG5cdFx0cmV0dXJuIHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyB0aGlzLmlkICsgJyBBY3R1YWwgRmlsZSc7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGE6IEZpbGVDcmVhdGlvbkRhdGEpOiBQcm9taXNlPFNpbmdsZU1lZGlhRmlsZT4ge1xyXG5cdFx0Y29uc3QgbmV3TWVkaWFGaWxlID0gPFNpbmdsZU1lZGlhRmlsZT4gKGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhKSk7XHJcblx0XHRuZXdNZWRpYUZpbGUuZXh0ZW5zaW9uTmFtZSA9ICcnO1xyXG5cdFx0cmV0dXJuIG5ld01lZGlhRmlsZTtcclxuXHR9XHJcblxyXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0YXdhaXQgc3VwZXIuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XHJcblxyXG5cdFx0Y29uc3QgaW1hZ2VEaXNwbGF5Q29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xyXG5cdFx0aW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ2hhbmdlIGZpbGUnIH0gKTtcclxuXHRcdGNvbnN0IG5ld0ZpbGVJbnB1dCA9IGltYWdlRGlzcGxheUNvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdmaWxlJyB9ICk7XHJcblxyXG5cdFx0YXdhaXQgdGhpcy5EaXNwbGF5TWVkaWFPbmx5KGltYWdlRGlzcGxheUNvbnRhaW5lciwgc252KTtcclxuXHRcdFxyXG5cdFx0bmV3RmlsZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGNvbnN0IG9sZEZpbGUgPSBhd2FpdCB0aGlzLmdldFRGaWxlKHNudik7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGF3YWl0IHNudi52YXVsdC5kZWxldGUob2xkRmlsZSk7XHJcblx0XHRcdFx0fSBmaW5hbGx5IHtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZU5ld0ZpbGUoc252LCBuZXdGaWxlSW5wdXQpO1xyXG5cdFx0XHRcdFx0dGhpcy5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gY2F0Y2gge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgU2F2ZU5ld0ZpbGUoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcblx0XHRjb25zdCBmaWxlQXJyYXkgPSBmaWxlSW5wdXQuZmlsZXM7XHJcblx0XHRpZiAoZmlsZUFycmF5ID09PSBudWxsKSB7XHJcblx0XHRcdHRocm93IEVycm9yKFwibm8gZmlsZSB3YXMgc2VsZWN0ZWRcIik7XHJcblx0XHR9XHJcblx0XHRjb25zdCBtZWRpYUZpbGUgPSBmaWxlQXJyYXlbMF07XHJcblx0XHRhd2FpdCB0aGlzLlNldEZpbGVUbyhzbnYsIG1lZGlhRmlsZSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBTZXRGaWxlVG8oc252OiBTb3VyY2VBbmRWYXVsdCwgbWVkaWFGaWxlOiBGaWxlKSB7XHJcblx0XHRjb25zdCBwYXJ0c09mUGF0aCA9IG1lZGlhRmlsZS5uYW1lLnNwbGl0KCcuJyk7XHJcblx0XHRjb25zdCBleHRlbnNpb24gPSBwYXJ0c09mUGF0aFtwYXJ0c09mUGF0aC5sZW5ndGggLSAxXTtcclxuXHRcdHRoaXMuZmlsZU5hbWUgPSBwYXJ0c09mUGF0aFswXTtcclxuXHRcdHRoaXMuZXh0ZW5zaW9uTmFtZSA9IGV4dGVuc2lvbjtcclxuXHRcdGNvbnN0IHBhdGggPSBzbnYuc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvJyArIHRoaXMuaWQgKyAnIEFjdHVhbCBGaWxlJztcclxuXHRcdGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoKTtcclxuXHRcdGF3YWl0IHNudi52YXVsdC5hZGFwdGVyLndyaXRlQmluYXJ5KG5vcm1hbGl6ZWRQYXRoLCBhd2FpdCBtZWRpYUZpbGUuYXJyYXlCdWZmZXIoKSk7XHJcblx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIERpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXY6IEhUTUxEaXZFbGVtZW50LCBzbnY6IFNvdXJjZUFuZFZhdWx0KSB7XHJcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xyXG5cdFx0aWYgKHRoaXMubWVkaWFUeXBlID09PSAnSW1hZ2UnKSB7XHJcblx0XHRcdGNvbnN0IGltYWdlRWxlbWVudCA9IG1lZGlhRGl2LmNyZWF0ZUVsKCdpbWcnKTtcclxuXHRcdFx0aW1hZ2VFbGVtZW50LnNyYyA9IGF3YWl0IHRoaXMuZ2V0U3JjKHNudik7XHJcblx0XHRcdGltYWdlRWxlbWVudC5zdHlsZS5vYmplY3RGaXQgPSAnY29udGFpbic7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zdCB2aWRlb0VsZW1lbnQgPSBtZWRpYURpdi5jcmVhdGVFbCgndmlkZW8nKTtcclxuXHRcdFx0dmlkZW9FbGVtZW50LnNyYyA9IGF3YWl0IHRoaXMuZ2V0U3JjKHNudik7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5jb250cm9scyA9IHRydWU7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5sb29wID0gdHJ1ZTtcclxuXHRcdFx0dmlkZW9FbGVtZW50LmF1dG9wbGF5ID0gdHJ1ZTtcclxuXHRcdFx0dmlkZW9FbGVtZW50LnN0eWxlLm9iamVjdEZpdCA9ICdjb250YWluJztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlYWxGaWxlIGV4dGVuZHMgQ0ZFRmlsZSB7XG5cdGZpbGVUeXBlID0gJ1JlYWwgRmlsZSc7XG5cblx0YWJzdHJhY3QgZ2V0U3JjKHNvdXJjZUFuZFZhdWx0OiBTb3VyY2VBbmRWYXVsdCk6IFByb21pc2U8c3RyaW5nPjtcblx0YXN5bmMgRGlzcGxheU1lZGlhT25seShtZWRpYURpdjogSFRNTERpdkVsZW1lbnQsIHNudjogU291cmNlQW5kVmF1bHQpIHtcblx0XHRtZWRpYURpdi5lbXB0eSgpO1xuXHR9XG59XG4iLCAiaW1wb3J0IHsgQ0ZFRmlsZSB9IGZyb20gXCIuL2NmZS1maWxlXCI7XG5pbXBvcnQgeyBDRkVGaWxlSGFuZGxlciB9IGZyb20gXCIuL2NmZS1maWxlLWhhbmRsZXJcIjtcbmltcG9ydCB7IEZpbGVDcmVhdGlvbkRhdGEgfSBmcm9tIFwiLi9maWxlLWNyZWF0aW9uLWRhdGFcIjtcbmltcG9ydCB7IFNpbmdsZU1lZGlhRmlsZSB9IGZyb20gXCIuL3NpbmdsZS1tZWRpYS1maWxlXCI7XG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xuXG4vKipcbiAqIEEgY2hpbGQgY2xhc3Mgb2YgdGhlIENGRUZpbGUgY2xhc3MuIFJlcHJlc2VudHMgYSBmb2xkZXIgd2l0aGluIHRoZSBTb3VyY2VGb2xkZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBGb2xkZXIgZXh0ZW5kcyBDRkVGaWxlIHtcblx0LyoqXG5cdCAqIFRoZSBJRHMgb2YgZmlsZXMgY29udGFpbmVkIGluIHRoaXMgZm9sZGVyXG5cdCAqL1xuXHRjb250YWluZWRGaWxlSURzOiBudW1iZXJbXTtcblxuXHQvKipcblx0ICogQG92ZXJyaWRlIEZvbGRlciBsYXllcjpcblx0ICogXG5cdCAqIGluaXRpYWxpemVzIHRoZSBjb250YWluZWQgZmlsZSBpZHMgYXJyYXkgZm9yIHRoZSBmb2xkZXIgb2JqZWN0XG5cdCAqL1xuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGE6IEZpbGVDcmVhdGlvbkRhdGEpOiBQcm9taXNlPEZvbGRlcj4ge1xuXHRcdGNvbnN0IHVuZmluaXNoZWRGb2xkZXIgPSA8Rm9sZGVyPiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGEpKTtcblx0XHR1bmZpbmlzaGVkRm9sZGVyLmNvbnRhaW5lZEZpbGVJRHMgPSBbXTtcblx0XHRyZXR1cm4gdW5maW5pc2hlZEZvbGRlcjtcblx0fVxuXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgbWFpbkRpdik7XG5cdFx0Y29uc3QgY3JlYXRlQnV0dG9uc0RpdiA9IG1haW5EaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0Y29uc3QgbmV3RmlsZUJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0NyZWF0ZSBOZXcgRmlsZScgfSApO1xuXHRcdG5ld0ZpbGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdHRoaXMuTG9hZENyZWF0ZUZpbGVVSShzbnYsIG1haW5EaXYpO1xuXHRcdH1cblx0XHRjb25zdCBtZWRpYUZpbGVzQnV0dG9uID0gY3JlYXRlQnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnVXBsb2FkIE11bHRpcGxlIEltYWdlcyAvIFZpZGVvcycgfSApO1xuXHRcdG1lZGlhRmlsZXNCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdHRoaXMuTG9hZEZpbGVTZWxlY3Rpb25VSShzbnYsIG1haW5EaXYpO1xuXHRcdH1cblx0XHRjb25zdCBmb2xkZXJEaXNwbGF5Q29udGFpbmVyID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2NmZS1ncmlkJyk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRhaW5lZEZpbGVJRHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGNvbnRhaW5lZEZpbGUgPSBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMuY29udGFpbmVkRmlsZUlEc1tpXSk7XG5cdFx0XHRpZiAoY29udGFpbmVkRmlsZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRhd2FpdCBjb250YWluZWRGaWxlLkRpc3BsYXlUaHVtYm5haWwoc252LCBmb2xkZXJEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZURpdigpLCBtYWluRGl2KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHByaXZhdGUgTG9hZENyZWF0ZUZpbGVVSShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGNvbnN0IGRhdGEgPSBuZXcgRmlsZUNyZWF0aW9uRGF0YShzbnYsICdGb2xkZXInLCAwKTtcblx0XHRjb25zdCBwb3BVcENvbnRhaW5lciA9IG1haW5EaXYuY3JlYXRlRGl2KCd2Ym94IGNmZS1wb3B1cCcpO1xuXHRcdHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ2hvb3NlIGEgRmlsZSBUeXBlIHRvIGNyZWF0ZTogJyB9ICk7XG5cdFx0Y29uc3QgZmlsZVR5cGVEcm9wZG93biA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdzZWxlY3QnKTtcblx0XHRwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1BhcmVudCBGb2xkZXIgSUQ6ICcgfSApO1xuXHRcdGNvbnN0IHBhcmVudEZvbGRlcklESW5wdXQgPSBwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICcnICsgdGhpcy5pZCB9ICk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBDRkVGaWxlSGFuZGxlci5Lbm93bkZpbGVUeXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3Qgb3B0aW9uID0gZmlsZVR5cGVEcm9wZG93bi5jcmVhdGVFbCgnb3B0aW9uJyk7XG5cdFx0XHRvcHRpb24udmFsdWUgPSBDRkVGaWxlSGFuZGxlci5Lbm93bkZpbGVUeXBlc1tpXTtcblx0XHRcdG9wdGlvbi50ZXh0ID0gQ0ZFRmlsZUhhbmRsZXIuS25vd25GaWxlVHlwZXNbaV07XG5cdFx0XHRmaWxlVHlwZURyb3Bkb3duLm9wdGlvbnMuYWRkKG9wdGlvbik7XG5cdFx0fVxuXHRcdGNvbnN0IGV4aXRCdXR0b24gPSBwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnWCcsIGNsczogJ2NmZS1leGl0LWJ1dHRvbicgfSApO1xuXHRcdGV4aXRCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdHBvcFVwQ29udGFpbmVyLnJlbW92ZSgpO1xuXHRcdH1cblx0XHRjb25zdCBzdWJtaXRCdXR0b24gPSBwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQ3JlYXRlJyB9ICk7XG5cdFx0c3VibWl0QnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRkYXRhLmZpbGVUeXBlID0gZmlsZVR5cGVEcm9wZG93bi52YWx1ZTtcblx0XHRcdGRhdGEucGFyZW50Rm9sZGVySUQgPSBwYXJzZUludChwYXJlbnRGb2xkZXJJRElucHV0LnZhbHVlKTtcblx0XHRcdGF3YWl0IENGRUZpbGVIYW5kbGVyLkNyZWF0ZU5ldyhkYXRhKTtcblx0XHRcdGV4aXRCdXR0b24uY2xpY2soKTtcblx0XHRcdGNvbnN0IHJlc2V0dGVkRm9sZGVyID0gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCB0aGlzLmlkKTtcblx0XHRcdGF3YWl0IHJlc2V0dGVkRm9sZGVyLkRpc3BsYXkoc252LCBtYWluRGl2KTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIExvYWRGaWxlU2VsZWN0aW9uVUkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRjb25zdCBwb3BVcENvbnRhaW5lciA9IG1haW5EaXYuY3JlYXRlRGl2KCd2Ym94IGNmZS1wb3B1cCcpO1xuXHRcdHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ2hvb3NlIHlvdXIgZmlsZXMnIH0gKTtcblx0XHRjb25zdCBmaWxlSW5wdXQgPSBwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdmaWxlJyB9ICk7XG5cdFx0ZmlsZUlucHV0Lm11bHRpcGxlID0gdHJ1ZTtcblx0XHRwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1BhcmVudCBGb2xkZXIgSUQ6ICcgfSApO1xuXHRcdGNvbnN0IHBhcmVudEZvbGRlcklESW5wdXQgPSBwb3BVcENvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICcnICsgdGhpcy5pZCB9ICk7XG5cdFx0Y29uc3QgZXhpdEJ1dHRvbiA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdYJywgY2xzOiAnY2ZlLWV4aXQtYnV0dG9uJyB9ICk7XG5cdFx0ZXhpdEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0cG9wVXBDb250YWluZXIucmVtb3ZlKCk7XG5cdFx0fVxuXHRcdGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDcmVhdGUnIH0gKTtcblx0XHRzdWJtaXRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGNvbnN0IGZpbGVBcnJheSA9IGZpbGVJbnB1dC5maWxlcztcblx0XHRcdGNvbnN0IHBhcmVudEZvbGRlcklEID0gcGFyc2VJbnQocGFyZW50Rm9sZGVySURJbnB1dC52YWx1ZSk7XG5cdFx0XHRpZiAoZmlsZUFycmF5ICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgZGF0YSA9IG5ldyBGaWxlQ3JlYXRpb25EYXRhKHNudiwgJ1NpbmdsZSBNZWRpYSBGaWxlJywgcGFyZW50Rm9sZGVySUQpO1xuXHRcdFx0XHRcdGNvbnN0IGNmZUZpbGUgPSBhd2FpdCBDRkVGaWxlSGFuZGxlci5DcmVhdGVOZXcoZGF0YSk7XG5cdFx0XHRcdFx0Y29uc3QgbWVkaWFGaWxlID0gT2JqZWN0LmFzc2lnbihuZXcgU2luZ2xlTWVkaWFGaWxlKCksIGNmZUZpbGUpO1xuXHRcdFx0XHRcdGF3YWl0IG1lZGlhRmlsZS5TZXRGaWxlVG8oc252LCBmaWxlQXJyYXlbaV0pO1xuXHRcdFx0XHRcdGF3YWl0IG1lZGlhRmlsZS5TYXZlKHNudik7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZXhpdEJ1dHRvbi5jbGljaygpO1xuXHRcdFx0XHRjb25zdCByZXNldHRlZEZvbGRlciA9IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgdGhpcy5pZCk7XG5cdFx0XHRcdGF3YWl0IHJlc2V0dGVkRm9sZGVyLkRpc3BsYXkoc252LCBtYWluRGl2KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBDRkVGaWxlIH0gZnJvbSBcIi4vY2ZlLWZpbGVcIjtcbmltcG9ydCB7IENGRUZpbGVIYW5kbGVyIH0gZnJvbSBcIi4vY2ZlLWZpbGUtaGFuZGxlclwiO1xuaW1wb3J0IHsgRmlsZUNyZWF0aW9uRGF0YSB9IGZyb20gXCIuL2ZpbGUtY3JlYXRpb24tZGF0YVwiO1xuaW1wb3J0IHsgUmVhbEZpbGUgfSBmcm9tIFwiLi9yZWFsLWZpbGVcIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5cbmV4cG9ydCBjbGFzcyBQbGF5bGlzdCBleHRlbmRzIENGRUZpbGUge1xuXHRwcml2YXRlIGN1cnJlbnRWaWRlb0luZGV4OiBudW1iZXI7XG5cdHZpZGVvSURzOiBudW1iZXJbXTtcblxuXHRwcml2YXRlIHZpZGVvT3JkZXI6IHN0cmluZztcblxuXHRwcml2YXRlIHN0YXRpYyBnZXROZXh0VmlkZW9JREluT3JkZXIocGxheWxpc3Q6IFBsYXlsaXN0KSB7XG5cdFx0bGV0IG5leHRWaWRlb0luZGV4ID0gcGxheWxpc3QuY3VycmVudFZpZGVvSW5kZXggKyAxO1xuXHRcdGlmIChuZXh0VmlkZW9JbmRleCA+PSBwbGF5bGlzdC52aWRlb0lEcy5sZW5ndGgpIHtcblx0XHRcdG5leHRWaWRlb0luZGV4ID0gMDtcblx0XHR9XG5cdFx0cmV0dXJuIG5leHRWaWRlb0luZGV4O1xuXHR9XG5cdHByaXZhdGUgc3RhdGljIGdldE5leHRWaWRlb0lEU2h1ZmZsZWQocGxheWxpc3Q6IFBsYXlsaXN0KSB7XG5cdFx0bGV0IG5leHRWaWRlb0luZGV4ID0gTWF0aC5yYW5kb20oKSAqIHBsYXlsaXN0LnZpZGVvSURzLmxlbmd0aDtcblx0XHRuZXh0VmlkZW9JbmRleCA9IE1hdGguZmxvb3IobmV4dFZpZGVvSW5kZXgpO1xuXHRcdHJldHVybiBuZXh0VmlkZW9JbmRleDtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGFzeW5jIGxvYWROZXh0VmlkZW8oc291cmNlQW5kVmF1bHQ6IFNvdXJjZUFuZFZhdWx0LCBwbGF5bGlzdDogUGxheWxpc3QsIHZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudCkge1xuXHRcdGlmIChwbGF5bGlzdC52aWRlb09yZGVyID09PSAnc2h1ZmZsZWQnKSB7XG5cdFx0XHRwbGF5bGlzdC5jdXJyZW50VmlkZW9JbmRleCA9IFBsYXlsaXN0LmdldE5leHRWaWRlb0lEU2h1ZmZsZWQocGxheWxpc3QpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwbGF5bGlzdC5jdXJyZW50VmlkZW9JbmRleCA9IFBsYXlsaXN0LmdldE5leHRWaWRlb0lESW5PcmRlcihwbGF5bGlzdCk7XG5cdFx0fVxuXHRcdGNvbnN0IG5leHRWaWRlbyA9IDxSZWFsRmlsZT4gKGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNvdXJjZUFuZFZhdWx0LCBwbGF5bGlzdC52aWRlb0lEc1twbGF5bGlzdC5jdXJyZW50VmlkZW9JbmRleF0pKTtcblxuXHRcdHZpZGVvRWxlbWVudC5zcmMgPSBhd2FpdCBuZXh0VmlkZW8uZ2V0U3JjKHNvdXJjZUFuZFZhdWx0KTtcblx0fVxuXG5cdHN0YXRpYyBvdmVycmlkZSBhc3luYyBDcmVhdGVOZXdGaWxlRm9yTGF5ZXIoZGF0YTogRmlsZUNyZWF0aW9uRGF0YSk6IFByb21pc2U8UGxheWxpc3Q+IHtcblx0XHRjb25zdCBuZXdQbGF5bGlzdEZpbGUgPSA8UGxheWxpc3Q+IChhd2FpdCBzdXBlci5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoZGF0YSkpO1xuXHRcdG5ld1BsYXlsaXN0RmlsZS52aWRlb0lEcyA9IFtdO1xuXHRcdHJldHVybiBuZXdQbGF5bGlzdEZpbGU7XG5cdH1cblxuXHRvdmVycmlkZSBhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcblx0XHR0aGlzLmN1cnJlbnRWaWRlb0luZGV4ID0gMDtcblx0XHRjb25zdCB2aWRlb0Rpc3BsYXlDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCdjZmUtZGlzcGxheS12aWRlbycpO1xuXHRcdGNvbnN0IHZpZGVvRWxlbWVudCA9IHZpZGVvRGlzcGxheUNvbnRhaW5lci5jcmVhdGVFbCgndmlkZW8nKTtcblx0XHRjb25zdCBidXR0b25zQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdignaGJveCcpO1xuXHRcdGNvbnN0IGhpZGVCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdoaWRlIHZpZGVvJyB9ICk7XG5cdFx0aGlkZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0aWYgKGhpZGVCdXR0b24udGV4dENvbnRlbnQgPT09ICdoaWRlIHZpZGVvJykge1xuXHRcdFx0XHRoaWRlQnV0dG9uLnRleHRDb250ZW50ID0gJ3Nob3cgdmlkZW8nO1xuXHRcdFx0XHR2aWRlb0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhpZGVCdXR0b24udGV4dENvbnRlbnQgPSAnaGlkZSB2aWRlbyc7XG5cdFx0XHRcdHZpZGVvRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBzaHVmZmxlQnV0dG9uID0gYnV0dG9uc0NvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnc2h1ZmZsZScgfSApO1xuXHRcdHRoaXMudmlkZW9PcmRlciA9ICdpbiBvcmRlcic7XG5cdFx0c2h1ZmZsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0aWYgKHNodWZmbGVCdXR0b24udGV4dENvbnRlbnQgPT09ICdzaHVmZmxlJykge1xuXHRcdFx0XHRzaHVmZmxlQnV0dG9uLnRleHRDb250ZW50ID0gJ2dvIGluIG9yZGVyJztcblx0XHRcdFx0dGhpcy52aWRlb09yZGVyID0gJ3NodWZmbGVkJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNodWZmbGVCdXR0b24udGV4dENvbnRlbnQgPSAnc2h1ZmZsZSc7XG5cdFx0XHRcdHRoaXMudmlkZW9PcmRlciA9ICdpbiBvcmRlcic7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvbnN0IG5leHRCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICduZXh0IHZpZGVvJyB9ICk7XG5cdFx0bmV4dEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgUGxheWxpc3QubG9hZE5leHRWaWRlbyhzbnYsIHRoaXMsIHZpZGVvRWxlbWVudCk7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGZpcnN0VmlkZW8gPSA8UmVhbEZpbGU+IChhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMudmlkZW9JRHNbdGhpcy5jdXJyZW50VmlkZW9JbmRleF0pKTtcblx0XHRcdHZpZGVvRWxlbWVudC5zcmMgPSBhd2FpdCBmaXJzdFZpZGVvLmdldFNyYyhzbnYpO1xuXHRcdFx0dmlkZW9FbGVtZW50LmF1dG9wbGF5ID0gdHJ1ZTtcblx0XHRcdHZpZGVvRWxlbWVudC5jb250cm9scyA9IHRydWU7XG5cdFx0XHR2aWRlb0VsZW1lbnQub250aW1ldXBkYXRlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRpZiAodmlkZW9FbGVtZW50LmVuZGVkKSB7XG5cdFx0XHRcdFx0YXdhaXQgUGxheWxpc3QubG9hZE5leHRWaWRlbyhzbnYsIHRoaXMsIHZpZGVvRWxlbWVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0Y29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ2hhbmdlIGZpbGVzJyB9ICk7XG5cdFx0XHRsZXQgY291bnQgPSAwO1xuXHRcdFx0Y29uc3QgbWVkaWFJRElucHV0RGl2ID0gY29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xuXHRcdFx0Y29uc3QgbmV3RmlsZUJ1dHRvbiA9IGNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQWRkIEZpbGUnIH0gKTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52aWRlb0lEcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBjdXJyZW50SW5kZXggPSBjb3VudDtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0Y29uc3QgbWVkaWFJRERpdiA9IG1lZGlhSURJbnB1dERpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRcdFx0Y29uc3QgaWRJbnB1dCA9IG1lZGlhSUREaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyArIHRoaXMudmlkZW9JRHNbY3VycmVudEluZGV4XSB9ICk7XG5cdFx0XHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IG1lZGlhSUREaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ2RlbGV0ZScgfSApO1xuXHRcdFx0XHRkZWxldGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdFx0XHRtZWRpYUlERGl2LnJlbW92ZSgpO1xuXHRcdFx0XHRcdHRoaXMudmlkZW9JRHMuc3BsaWNlKGN1cnJlbnRJbmRleCwgMSk7XG5cdFx0XHRcdFx0dGhpcy5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZElucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMudmlkZW9JRHNbY3VycmVudEluZGV4XSA9IHBhcnNlSW50KGlkSW5wdXQudmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRuZXdGaWxlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGNvdW50O1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHRjb25zdCBtZWRpYUlERGl2ID0gbWVkaWFJRElucHV0RGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdFx0XHRjb25zdCBpZElucHV0ID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyB9ICk7XG5cdFx0XHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IG1lZGlhSUREaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ2RlbGV0ZScgfSApO1xuXHRcdFx0XHRkZWxldGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdFx0XHRtZWRpYUlERGl2LnJlbW92ZSgpO1xuXHRcdFx0XHRcdHRoaXMudmlkZW9JRHMuc3BsaWNlKGN1cnJlbnRJbmRleCwgMSk7XG5cdFx0XHRcdFx0dGhpcy5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZElucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMudmlkZW9JRHNbY3VycmVudEluZGV4XSA9IHBhcnNlSW50KGlkSW5wdXQudmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iLCAiaW1wb3J0IHsgQ0ZFRmlsZUhhbmRsZXIgfSBmcm9tIFwiLi9jZmUtZmlsZS1oYW5kbGVyXCI7XG5pbXBvcnQgeyBGaWxlQ3JlYXRpb25EYXRhIH0gZnJvbSBcIi4vZmlsZS1jcmVhdGlvbi1kYXRhXCI7XG5pbXBvcnQgeyBSZWFsRmlsZSB9IGZyb20gXCIuL3JlYWwtZmlsZVwiO1xuaW1wb3J0IHsgU2luZ2xlTWVkaWFGaWxlIH0gZnJvbSBcIi4vc2luZ2xlLW1lZGlhLWZpbGVcIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5cbmV4cG9ydCBjbGFzcyBWYXJpYW50TWVkaWFGaWxlIGV4dGVuZHMgUmVhbEZpbGUge1xuXHRmaWxlVHlwZSA9ICdWYXJpYW50IE1lZGlhIEZpbGUnO1xuXG5cdHByaXZhdGUgdmFyaWFudElEczogbnVtYmVyW107XG5cblx0YXN5bmMgZ2V0U3JjKHNudjogU291cmNlQW5kVmF1bHQsIGluZGV4OiBudW1iZXIgfCBudWxsID0gbnVsbCk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0aWYgKGluZGV4ID09PSBudWxsKSB7XG5cdFx0XHRpbmRleCA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkpICogdGhpcy52YXJpYW50SURzLmxlbmd0aCk7XG5cdFx0fVxuXHRcdGNvbnN0IGNvbnRhaW5lZE1lZGlhID0gPFNpbmdsZU1lZGlhRmlsZT4gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCB0aGlzLnZhcmlhbnRJRHNbaW5kZXhdKTtcblx0XHRyZXR1cm4gYXdhaXQgY29udGFpbmVkTWVkaWEuZ2V0U3JjKHNudik7XG5cdH1cblxuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGE6IEZpbGVDcmVhdGlvbkRhdGEpOiBQcm9taXNlPFZhcmlhbnRNZWRpYUZpbGU+IHtcblx0XHRjb25zdCBuZXdNZWRpYUZpbGUgPSA8VmFyaWFudE1lZGlhRmlsZT4gKGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhKSk7XG5cdFx0bmV3TWVkaWFGaWxlLnZhcmlhbnRJRHMgPSBbXTtcblx0XHRyZXR1cm4gbmV3TWVkaWFGaWxlO1xuXHR9XG5cblx0b3ZlcnJpZGUgYXN5bmMgRGlzcGxheShzbnY6IFNvdXJjZUFuZFZhdWx0LCBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0YXdhaXQgc3VwZXIuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XG5cblx0XHRjb25zdCBpbWFnZURpc3BsYXlDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0aW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ2hhbmdlIGZpbGVzJyB9ICk7XG5cdFx0Y29uc3QgbWVkaWFJRElucHV0RGl2ID0gaW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xuXHRcdGNvbnN0IG5ld0ZpbGVCdXR0b24gPSBpbWFnZURpc3BsYXlDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0FkZCBGaWxlJyB9ICk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhcmlhbnRJRHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGk7XG5cdFx0XHRjb25zdCBtZWRpYUlERGl2ID0gbWVkaWFJRElucHV0RGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdFx0Y29uc3QgaWRJbnB1dCA9IG1lZGlhSUREaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyArIHRoaXMudmFyaWFudElEc1tjdXJyZW50SW5kZXhdIH0gKTtcblx0XHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IG1lZGlhSUREaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ2RlbGV0ZScgfSApO1xuXHRcdFx0ZGVsZXRlQnV0dG9uLmNsYXNzTmFtZSA9ICdjZmUtcmVtb3ZlLWJ1dHRvbic7XG5cdFx0XHRkZWxldGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdFx0bWVkaWFJRERpdi5yZW1vdmUoKTtcblx0XHRcdFx0dGhpcy52YXJpYW50SURzLnNwbGljZShjdXJyZW50SW5kZXgsIDEpO1xuXHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcblx0XHRcdH1cblx0XHRcdGlkSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdHRoaXMudmFyaWFudElEc1tjdXJyZW50SW5kZXhdID0gcGFyc2VJbnQoaWRJbnB1dC52YWx1ZSk7XG5cdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0XHRhd2FpdCB0aGlzLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRuZXdGaWxlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLnZhcmlhbnRJRHMucHVzaCgtMSk7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XG5cdFx0fVxuXHRcdGNvbnN0IG1lZGlhRGl2ID0gaW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xuXHRcdFxuXHRcdGF3YWl0IHRoaXMuRGlzcGxheU1lZGlhT25seShtZWRpYURpdiwgc252KTtcblx0fVxuXHRhc3luYyBEaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2OiBIVE1MRGl2RWxlbWVudCwgc252OiBTb3VyY2VBbmRWYXVsdCwgaW5kZXggPSAtMSkge1xuXHRcdC8vIFRoaXMgY2FsbCBpcyBub3QgbmVlZGVkIGJlY2F1c2UgY29udGFpbmVkTWVkaWEuRGlzcGxheU1lZGlhT25seSgpIGNhbGxzIGl0IGFueXdheVxuXHRcdC8vIGF3YWl0IHN1cGVyLkRpc3BsYXlNZWRpYU9ubHlcblx0XHRpZiAoaW5kZXggPT09IC0xKSB7XG5cdFx0XHRpbmRleCA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkpICogdGhpcy52YXJpYW50SURzLmxlbmd0aCk7XG5cdFx0fVxuXHRcdGNvbnN0IGNvbnRhaW5lZE1lZGlhID0gPFNpbmdsZU1lZGlhRmlsZT4gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCB0aGlzLnZhcmlhbnRJRHNbaW5kZXhdKTtcblx0XHRhd2FpdCBjb250YWluZWRNZWRpYS5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xuXHR9XG59XG4iLCAiaW1wb3J0IHsgQ0ZFRmlsZSB9IGZyb20gXCIuL2NmZS1maWxlXCI7XG5pbXBvcnQgeyBGaWxlQ3JlYXRpb25EYXRhIH0gZnJvbSBcIi4vZmlsZS1jcmVhdGlvbi1kYXRhXCI7XG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xuaW1wb3J0IHsgU291cmNlRm9sZGVyIH0gZnJvbSBcIi4vc291cmNlLWZvbGRlclwiO1xuXG4vKipcbiAqIEEgY2hpbGQgY2xhc3Mgb2YgdGhlIENGRUZpbGUgY2xhc3MuIFJlcHJlc2VudHMgYSBmb2xkZXIgd2l0aGluIHRoZSBTb3VyY2VGb2xkZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBTb3VyY2VGb2xkZXJTaG9ydGN1dCBleHRlbmRzIENGRUZpbGUge1xuXHQvKipcblx0ICogVGhlIElEcyBvZiBmaWxlcyBjb250YWluZWQgaW4gdGhpcyBmb2xkZXJcblx0ICovXG5cdHBhdGhUb090aGVyU291cmNlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIEBvdmVycmlkZSBGb2xkZXIgbGF5ZXI6XG5cdCAqIFxuXHQgKiBpbml0aWFsaXplcyB0aGUgY29udGFpbmVkIGZpbGUgaWRzIGFycmF5IGZvciB0aGUgZm9sZGVyIG9iamVjdFxuXHQgKi9cblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhOiBGaWxlQ3JlYXRpb25EYXRhKTogUHJvbWlzZTxTb3VyY2VGb2xkZXJTaG9ydGN1dD4ge1xuXHRcdGNvbnN0IHVuZmluaXNoZWRGb2xkZXIgPSA8U291cmNlRm9sZGVyU2hvcnRjdXQ+IChhd2FpdCBzdXBlci5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoZGF0YSkpO1xuXHRcdHVuZmluaXNoZWRGb2xkZXIucGF0aFRvT3RoZXJTb3VyY2UgPSAnJztcblx0XHRyZXR1cm4gdW5maW5pc2hlZEZvbGRlcjtcblx0fVxuXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgbWFpbkRpdik7XG5cdFx0Y29uc3QgaW5wdXREaXYgPSBtYWluRGl2LmNyZWF0ZURpdigndmJveCcpO1xuXHRcdGlucHV0RGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnUGF0aCB0byBPdGhlciBTb3VyY2UgRm9sZGVyJyB9ICk7XG5cdFx0Y29uc3QgcGF0aElucHV0ID0gaW5wdXREaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcgfSApO1xuXHRcdGNvbnN0IGdvQnV0dG9uID0gaW5wdXREaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0dvJyB9ICk7XG5cdFx0cGF0aElucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dGhpcy5wYXRoVG9PdGhlclNvdXJjZSA9IHBhdGhJbnB1dC52YWx1ZTtcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdH1cblx0XHRnb0J1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0Y29uc3Qgb3RoZXJTb3VyY2UgPSBhd2FpdCBTb3VyY2VGb2xkZXIuQ3JlYXRlT3JMb2FkU291cmNlRm9sZGVyKHRoaXMucGF0aFRvT3RoZXJTb3VyY2UsIHNudi52YXVsdCk7XG5cdFx0XHRvdGhlclNvdXJjZS5EaXNwbGF5KG1haW5EaXYsIHNudi52YXVsdCk7XG5cdFx0fVxuXHR9XG5cdH1cbiIsICJleHBvcnQgY2xhc3MgSHdheXUge1xyXG5cdHN0YXRpYyBEaXNwbGF5KGRpdjogSFRNTERpdkVsZW1lbnQsIHRleHQgPSAnJywgZm9udFNpemUgPSAyMCwgaXNWZXJ0aWNhbCA9IHRydWUpOiBIVE1MRWxlbWVudCB7XHJcblx0XHRjb25zdCB0ZXh0RWxlbWVudCA9IGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogdGV4dCB9ICk7XHJcblx0XHR0ZXh0RWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gaXNWZXJ0aWNhbCA/ICdId2F5dVJlYWwnIDogJ0h3YXl1SG9yaXpvbnRhbCc7XHJcblx0XHR0ZXh0RWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICsgJ3B4JztcclxuXHRcdGlmIChpc1ZlcnRpY2FsKSB7XHJcblx0XHRcdHRleHRFbGVtZW50LnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHRcdFx0dGV4dEVsZW1lbnQuc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRleHRFbGVtZW50O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIENyZWF0ZVRleHRBcmVhKGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nVGV4dCA9ICcnLCBmb250U2l6ZSA9IDIwLCBpc1ZlcnRpY2FsID0gdHJ1ZSk6IEhUTUxUZXh0QXJlYUVsZW1lbnQge1xyXG5cdFx0Y29uc3QgdGV4dEFyZWEgPSBkaXYuY3JlYXRlRWwoJ3RleHRhcmVhJywgeyB0ZXh0OiBleGlzdGluZ1RleHQgfSApO1xyXG5cdFx0dGV4dEFyZWEuc3R5bGUuZm9udEZhbWlseSA9IGlzVmVydGljYWwgPyAnSHdheXVSZWFsJyA6ICdId2F5dUhvcml6b250YWwnO1xyXG5cdFx0dGV4dEFyZWEuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZSArICdweCc7XHJcblx0XHRpZiAoaXNWZXJ0aWNhbCkge1xyXG5cdFx0XHR0ZXh0QXJlYS5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XHJcblx0XHRcdHRleHRBcmVhLnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0JztcclxuXHRcdH1cclxuXHRcdHRleHRBcmVhLnNwZWxsY2hlY2sgPSBmYWxzZTtcclxuXHRcdHJldHVybiB0ZXh0QXJlYTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBDcmVhdGVUZXh0SW5wdXQoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdUZXh0ID0gJycsIGZvbnRTaXplID0gMjAsIGlzVmVydGljYWwgPSB0cnVlKTogSFRNTElucHV0RWxlbWVudCB7XHJcblx0XHRjb25zdCB0ZXh0SW5wdXQgPSBkaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiBleGlzdGluZ1RleHQgfSApO1xyXG5cdFx0dGV4dElucHV0LnN0eWxlLmZvbnRGYW1pbHkgPSBpc1ZlcnRpY2FsID8gJ0h3YXl1UmVhbCcgOiAnSHdheXVIb3Jpem9udGFsJztcclxuXHRcdHRleHRJbnB1dC5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICsgJ3B4JztcclxuXHRcdGlmIChpc1ZlcnRpY2FsKSB7XHJcblx0XHRcdHRleHRJbnB1dC5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XHJcblx0XHRcdHRleHRJbnB1dC5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XHJcblx0XHR9XHJcblx0XHR0ZXh0SW5wdXQuc3BlbGxjaGVjayA9IGZhbHNlO1xyXG5cdFx0cmV0dXJuIHRleHRJbnB1dDtcclxuXHR9XHJcbn1cclxuIiwgImV4cG9ydCBjbGFzcyBQaG90b0xhbmcge1xuXHRzdGF0aWMgRGlzcGxheShkaXY6IEhUTUxEaXZFbGVtZW50LCB0ZXh0ID0gJycsIGZvbnRTaXplID0gMTAsIG1vdmVTcGVlZHM6IG51bWJlcltdIHwgbnVsbCA9IG51bGwsIGR1cmF0aW9uczogbnVtYmVyW10gfCBudWxsID0gbnVsbCwgZG9Mb29wID0gZmFsc2UpOiBIVE1MRWxlbWVudCB7XG5cdFx0Y29uc3QgbGluZSA9IG5ldyBQaG90b0xpbmUodGV4dCk7XG5cdFx0aWYgKCFtb3ZlU3BlZWRzKSB7XG5cdFx0XHRtb3ZlU3BlZWRzID0gWzEwMCwgMjUwLCA1MDBdO1xuXHRcdH1cblx0XHRpZiAoIWR1cmF0aW9ucykge1xuXHRcdFx0ZHVyYXRpb25zID0gWzAsIDUwMF07XG5cdFx0fVxuXHRcdGNvbnN0IGRpc3BsYXlEaXYgPSBkaXYuY3JlYXRlRGl2KCk7XG5cdFx0bGluZS5TcGVhayhkaXNwbGF5RGl2LCBmb250U2l6ZSwgbW92ZVNwZWVkcywgZHVyYXRpb25zLCBkb0xvb3ApO1xuXHRcdHJldHVybiBkaXNwbGF5RGl2O1xuXHR9XG5cdHN0YXRpYyBDcmVhdGVUZXh0QXJlYShkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1RleHQgPSAnJywgZm9udFNpemUgPSAxNy41KTogSFRNTFRleHRBcmVhRWxlbWVudCB7XG5cdFx0Y29uc3QgdGV4dEFyZWEgPSBkaXYuY3JlYXRlRWwoJ3RleHRhcmVhJywgeyB0ZXh0OiBleGlzdGluZ1RleHQgfSApO1xuXHRcdHRleHRBcmVhLnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgKyAncHgnO1xuXHRcdHRleHRBcmVhLnNwZWxsY2hlY2sgPSBmYWxzZTtcblx0XHRyZXR1cm4gdGV4dEFyZWE7XG5cdH1cblx0c3RhdGljIENyZWF0ZVRleHRJbnB1dChkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1RleHQgPSAnJywgZm9udFNpemUgPSAxNy41KTogSFRNTElucHV0RWxlbWVudCB7XG5cdFx0Y29uc3QgdGV4dElucHV0ID0gZGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogZXhpc3RpbmdUZXh0IH0gKTtcblx0XHR0ZXh0SW5wdXQuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZSArICdweCc7XG5cdFx0dGV4dElucHV0LnNwZWxsY2hlY2sgPSBmYWxzZTtcblx0XHRyZXR1cm4gdGV4dElucHV0O1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBQaG90b0xpbmUge1xuXHRnbHlwaHM6IFBob3RvR2x5cGhbXTtcblx0Y29uc3RydWN0b3IodGV4dENvbnRlbnQgPSAnJykge1xuXHRcdHRoaXMuZ2x5cGhzID0gW107XG5cblx0XHRjb25zdCB0ZXh0QXJyYXkgPSB0ZXh0Q29udGVudC5zcGxpdChcIiAgIFwiKS5maWx0ZXIoKGM6IHN0cmluZykgPT4gYyAhPT0gXCJcIik7XG5cblx0XHRsZXQgZG9TcGFjZSA9IGZhbHNlO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0QXJyYXkubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IG5ld0dseXBoID0gbmV3IFBob3RvR2x5cGgoKTtcblx0XHRcdGNvbnN0IGdseXBoVGV4dCA9IHRleHRBcnJheVtpXTtcblxuXHRcdFx0aWYgKGdseXBoVGV4dCA9PT0gJ3x8fCcpIHtcblx0XHRcdFx0bmV3R2x5cGguaHVlID0gMDtcblx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDA7XG5cdFx0XHRcdG5ld0dseXBoLnZhbHVlID0gMDtcblx0XHRcdFx0bmV3R2x5cGgub3BhY2l0eSA9IDA7XG5cdFx0XHRcdG5ld0dseXBoLm1vdmVTcGVlZCA9IDA7XG5cdFx0XHRcdG5ld0dseXBoLmR1cmF0aW9uID0gMDtcblx0XHRcdFx0bmV3R2x5cGgueCA9IHRoaXMuZ2x5cGhzW3RoaXMuZ2x5cGhzLmxlbmd0aCAtIDFdLng7XG5cdFx0XHRcdG5ld0dseXBoLnkgPSB0aGlzLmdseXBoc1t0aGlzLmdseXBocy5sZW5ndGggLSAxXS55O1xuXHRcdFx0XHRkb1NwYWNlID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBqID0gMDtcblx0XHRcdFx0bGV0IHNraXBOZXh0ID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gbW92ZSBzcGVlZFxuXHRcdFx0XHRzd2l0Y2ggKGdseXBoVGV4dFtqXSkge1xuXHRcdFx0XHRcdGNhc2UgJy4nOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGgubW92ZVNwZWVkID0gMDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJy0nOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGgubW92ZVNwZWVkID0gMTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJz0nOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGgubW92ZVNwZWVkID0gMjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGorKztcblxuXHRcdFx0XHQvLyBkdXJhdGlvblxuXHRcdFx0XHRzd2l0Y2ggKGdseXBoVGV4dFtqXSkge1xuXHRcdFx0XHRcdGNhc2UgJy4nOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGguZHVyYXRpb24gPSAwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnLSc6XG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5kdXJhdGlvbiA9IDE7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRqKys7XG5cblx0XHRcdFx0Ly8gc2hhcGVcblx0XHRcdFx0bmV3R2x5cGguc2hhcGUgPSBnbHlwaFRleHRbal07XG5cdFx0XHRcdGorKztcblxuXHRcdFx0XHQvLyBodWVcblx0XHRcdFx0bGV0IGh1ZTEgPSAwO1xuXHRcdFx0XHRzd2l0Y2ggKGdseXBoVGV4dFtqXSkge1xuXHRcdFx0XHRcdGNhc2UgJ3InOlxuXHRcdFx0XHRcdFx0aHVlMSA9IDA7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdvJzpcblx0XHRcdFx0XHRcdGh1ZTEgPSA0MDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3knOlxuXHRcdFx0XHRcdFx0aHVlMSA9IDYwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZyc6XG5cdFx0XHRcdFx0XHRodWUxID0gMTIwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYyc6XG5cdFx0XHRcdFx0XHRodWUxID0gMTgwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRodWUxID0gMjQwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncCc6XG5cdFx0XHRcdFx0XHRodWUxID0gMjcwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnLic6XG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5odWUgPSAwO1xuXHRcdFx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDA7XG5cdFx0XHRcdFx0XHRza2lwTmV4dCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRqKys7XG5cdFx0XHRcdGlmICghc2tpcE5leHQpIHtcblx0XHRcdFx0XHRsZXQgaHVlMiA9IDA7XG5cdFx0XHRcdFx0c3dpdGNoIChnbHlwaFRleHRbal0pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ3InOlxuXHRcdFx0XHRcdFx0XHRodWUyID0gMDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdvJzpcblx0XHRcdFx0XHRcdFx0aHVlMiA9IDQwO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ3knOlxuXHRcdFx0XHRcdFx0XHRodWUyID0gNjA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnZyc6XG5cdFx0XHRcdFx0XHRcdGh1ZTIgPSAxMjA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnYyc6XG5cdFx0XHRcdFx0XHRcdGh1ZTIgPSAxODA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRcdGh1ZTIgPSAyNDA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAncCc6XG5cdFx0XHRcdFx0XHRcdGh1ZTIgPSAyNzA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0bmV3R2x5cGguaHVlID0gaHVlMTtcblx0XHRcdFx0XHRcdFx0c2tpcE5leHQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFza2lwTmV4dCkge1xuXHRcdFx0XHRcdFx0aWYgKGh1ZTEgPT09IDAgJiYgaHVlMiA9PT0gMjcwIHx8IGh1ZTEgPT09IDI3MCAmJiBodWUyID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdG5ld0dseXBoLmh1ZSA9IDMxNTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG5ld0dseXBoLmh1ZSA9IChodWUxICsgaHVlMikgLyAyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aisrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRza2lwTmV4dCA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHNhdHVyYXRpb25cblx0XHRcdFx0Y29uc3Qgc2F0dXJhdGlvblRleHQgPSBnbHlwaFRleHRbal07XG5cdFx0XHRcdHN3aXRjaCAoc2F0dXJhdGlvblRleHQpIHtcblx0XHRcdFx0XHRjYXNlICcwJzpcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnMSc6XG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5zYXR1cmF0aW9uID0gMC4yNTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJzInOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDAuNTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJzMnOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDAuNzU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICc0Jzpcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAxO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aisrO1xuXG5cdFx0XHRcdC8vIHZhbHVlXG5cdFx0XHRcdGNvbnN0IHZhbHVlVGV4dCA9IGdseXBoVGV4dFtqXTtcblx0XHRcdFx0c3dpdGNoICh2YWx1ZVRleHQpIHtcblx0XHRcdFx0XHRjYXNlICcwJzpcblx0XHRcdFx0XHRcdG5ld0dseXBoLnZhbHVlID0gMDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJzEnOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGgudmFsdWUgPSAwLjE7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICcyJzpcblx0XHRcdFx0XHRcdG5ld0dseXBoLnZhbHVlID0gMC4yO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnMyc6XG5cdFx0XHRcdFx0XHRuZXdHbHlwaC52YWx1ZSA9IDAuNTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJzQnOlxuXHRcdFx0XHRcdFx0bmV3R2x5cGgudmFsdWUgPSAxO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aisrO1xuXG5cdFx0XHRcdC8vIG9wYWNpdHlcblx0XHRcdFx0Y29uc3Qgb3BhY2l0eVRleHQgPSBnbHlwaFRleHRbal07XG5cdFx0XHRcdHN3aXRjaCAob3BhY2l0eVRleHQpIHtcblx0XHRcdFx0XHRjYXNlICcuJzpcblx0XHRcdFx0XHRcdG5ld0dseXBoLm9wYWNpdHkgPSAwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnLSc6XG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5vcGFjaXR5ID0gMC41O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnPSc6XG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5vcGFjaXR5ID0gMTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGorKztcblxuXHRcdFx0XHRjb25zdCBsb2NhdGlvbkluZm8gPSBnbHlwaFRleHQuc3Vic3RyaW5nKGopO1xuXG5cdFx0XHRcdC8vIGxvY2F0aW9uXG5cdFx0XHRcdC8vIHhcblx0XHRcdFx0aWYgKGxvY2F0aW9uSW5mby5jb250YWlucygnPCcpKSB7XG5cdFx0XHRcdFx0bmV3R2x5cGgueCA9IDA7XG5cdFx0XHRcdH0gZWxzZSBpZiAobG9jYXRpb25JbmZvLmNvbnRhaW5zKCc+JykpIHtcblx0XHRcdFx0XHRuZXdHbHlwaC54ID0gMjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRuZXdHbHlwaC54ID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyB5XG5cdFx0XHRcdGlmIChsb2NhdGlvbkluZm8uY29udGFpbnMoJ3YnKSkge1xuXHRcdFx0XHRcdG5ld0dseXBoLnkgPSAwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGxvY2F0aW9uSW5mby5jb250YWlucygnXicpKSB7XG5cdFx0XHRcdFx0bmV3R2x5cGgueSA9IDI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV3R2x5cGgueSA9IDE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZG9TcGFjZSkge1xuXHRcdFx0XHRcdGNvbnN0IGVtcHR5R2x5cGggPSBuZXcgUGhvdG9HbHlwaCgpO1xuXHRcdFx0XHRcdGVtcHR5R2x5cGguaHVlID0gMDtcblx0XHRcdFx0XHRlbXB0eUdseXBoLnNhdHVyYXRpb24gPSAwO1xuXHRcdFx0XHRcdGVtcHR5R2x5cGgudmFsdWUgPSAwO1xuXHRcdFx0XHRcdGVtcHR5R2x5cGgub3BhY2l0eSA9IDA7XG5cdFx0XHRcdFx0ZW1wdHlHbHlwaC5tb3ZlU3BlZWQgPSAwO1xuXHRcdFx0XHRcdGVtcHR5R2x5cGguZHVyYXRpb24gPSAwO1xuXHRcdFx0XHRcdGVtcHR5R2x5cGgueCA9IG5ld0dseXBoLng7XG5cdFx0XHRcdFx0ZW1wdHlHbHlwaC55ID0gbmV3R2x5cGgueTtcblx0XHRcdFx0XHRkb1NwYWNlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGhpcy5nbHlwaHMucHVzaChlbXB0eUdseXBoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmdseXBocy5wdXNoKG5ld0dseXBoKTtcblx0XHR9XG5cdFx0aWYgKGRvU3BhY2UpIHtcblx0XHRcdGNvbnN0IGVtcHR5R2x5cGggPSBuZXcgUGhvdG9HbHlwaCgpO1xuXHRcdFx0ZW1wdHlHbHlwaC5odWUgPSAwO1xuXHRcdFx0ZW1wdHlHbHlwaC5zYXR1cmF0aW9uID0gMDtcblx0XHRcdGVtcHR5R2x5cGgudmFsdWUgPSAwO1xuXHRcdFx0ZW1wdHlHbHlwaC5vcGFjaXR5ID0gMDtcblx0XHRcdGVtcHR5R2x5cGgubW92ZVNwZWVkID0gMDtcblx0XHRcdGVtcHR5R2x5cGguZHVyYXRpb24gPSAwO1xuXHRcdFx0ZW1wdHlHbHlwaC54ID0gdGhpcy5nbHlwaHNbMF0ueDtcblx0XHRcdGVtcHR5R2x5cGgueSA9IHRoaXMuZ2x5cGhzWzBdLnk7XG5cdFx0XHRkb1NwYWNlID0gZmFsc2U7XG5cdFx0XHR0aGlzLmdseXBocy5wdXNoKGVtcHR5R2x5cGgpO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIFNwZWFrKGRpdjogSFRNTERpdkVsZW1lbnQsIHRleHRTaXplOiBudW1iZXIsIG1vdmVTcGVlZHM6IG51bWJlcltdLCBkdXJhdGlvbnM6IG51bWJlcltdLCBkb0xvb3AgPSBmYWxzZSkge1xuXHRcdGRpdi5zdHlsZS5mb250U2l6ZSA9IHRleHRTaXplICsgJ3B4Jztcblx0XHRkaXYuc3R5bGUuZm9udEZhbWlseSA9ICdQaG90b2xhbmcnO1xuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cdFx0ZGl2LnN0eWxlLmhlaWdodCA9ICh0ZXh0U2l6ZSAqIDMuMjUpICsgJ3B4Jztcblx0XHRkaXYuc3R5bGUud2lkdGggPSAodGV4dFNpemUgKiAzLjI1KSArICdweCc7XG5cdFx0Y29uc3QgdGV4dERpdiA9IGRpdi5jcmVhdGVEaXYoKTtcblx0XHR0ZXh0RGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHR0ZXh0RGl2LnN0eWxlLmJvdHRvbSA9IHRleHRTaXplICsgJ3B4Jztcblx0XHR0ZXh0RGl2LnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9ICdib3R0b20sIGxlZnQsIGNvbG9yJztcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2x5cGhzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBwaG90b0dseXBoID0gdGhpcy5nbHlwaHNbaV07XG5cblx0XHRcdHRleHREaXYudGV4dENvbnRlbnQgPSBwaG90b0dseXBoLnNoYXBlO1xuXHRcdFx0dGV4dERpdi5zdHlsZS5sZWZ0ID0gKHBob3RvR2x5cGgueCAqIHRleHRTaXplKSArICdweCc7XG5cdFx0XHR0ZXh0RGl2LnN0eWxlLmJvdHRvbSA9IChwaG90b0dseXBoLnkgKiB0ZXh0U2l6ZSkgKyAncHgnO1xuXHRcdFx0dGV4dERpdi5zdHlsZS5jb2xvciA9IHBob3RvR2x5cGguY29sb3I7XG5cblx0XHRcdGlmIChkb0xvb3AgJiYgaSA9PT0gdGhpcy5nbHlwaHMubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRpID0gLTE7XG5cdFx0XHR9XG5cdFx0XHR0ZXh0RGl2LnN0eWxlLnRyYW5zaXRpb24gPSBtb3ZlU3BlZWRzW3Bob3RvR2x5cGgubW92ZVNwZWVkXSArICdtcyc7XG5cdFx0XHRhd2FpdCBzbGVlcChtb3ZlU3BlZWRzW3Bob3RvR2x5cGgubW92ZVNwZWVkXSArIGR1cmF0aW9uc1twaG90b0dseXBoLmR1cmF0aW9uXSk7XG5cdFx0fVxuXHRcdGRpdi5yZW1vdmUoKTtcblx0fVxuXG5cdGFzeW5jIERpc3BsYXlTdGF0aWMoZGl2OiBIVE1MRGl2RWxlbWVudCwgdGV4dFNpemU6IG51bWJlcikge1xuXHRcdGNvbnN0IGxpbmVEaXYgPSBkaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdFx0bGluZURpdi5zdHlsZS5nYXAgPSAnJyArICh0ZXh0U2l6ZSAqIDMuMjUpICsgJ3B4KSc7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdseXBocy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5nbHlwaHNbaV0gPSBPYmplY3QuYXNzaWduKG5ldyBQaG90b0dseXBoKCksIHRoaXMuZ2x5cGhzW2ldKTtcblx0XHRcdHRoaXMuZ2x5cGhzW2ldLkRpc3BsYXlTdGF0aWMobGluZURpdi5jcmVhdGVEaXYoKSwgdGV4dFNpemUpO1xuXHRcdH1cblx0fVxuXG59XG5cbmV4cG9ydCBjbGFzcyBQaG90b0dseXBoIHtcblx0c2hhcGU6IHN0cmluZztcblx0eDogbnVtYmVyO1xuXHR5OiBudW1iZXI7XG5cdGh1ZTogbnVtYmVyO1xuXHRzYXR1cmF0aW9uOiBudW1iZXI7XG5cdHZhbHVlOiBudW1iZXI7XG5cdG9wYWNpdHk6IG51bWJlcjtcblx0bW92ZVNwZWVkOiBudW1iZXI7XG5cdGR1cmF0aW9uOiBudW1iZXI7XG5cblx0Z2V0IGNvbG9yKCkge1xuXHRcdC8vIGhzdiB2YWx1ZXMgYXJlIGluIFswLCAxXVxuXHRcdGxldCBsaWdodG5lc3MgPSAoMiAtIHRoaXMuc2F0dXJhdGlvbikgKiB0aGlzLnZhbHVlIC8gMjtcblx0XHRsZXQgbmV3UyA9IHRoaXMuc2F0dXJhdGlvbiAqIHRoaXMudmFsdWUgLyAobGlnaHRuZXNzIDwgMSA/IGxpZ2h0bmVzcyAqIDIgOiAyIC0gbGlnaHRuZXNzICogMik7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgbGlnaHRuZXNzIGlzIDAgb3IgMSwgd2hpY2ggcmVzdWx0cyBpbiBzYXR1cmF0aW9uIGJlaW5nIDBcblx0XHRpZiAobGlnaHRuZXNzID09PSAwIHx8IGxpZ2h0bmVzcyA9PT0gMSkge1xuXHRcdFx0bmV3UyA9IDA7XG5cdFx0fVxuXG5cdFx0bGlnaHRuZXNzICo9IDEwMDtcblx0XHRuZXdTICo9IDEwMDtcblxuXHRcdHJldHVybiAnaHNsYSgnICsgdGhpcy5odWUgKyAnLCcgKyBuZXdTICsgJyUsJyArIGxpZ2h0bmVzcyArICclLCcgKyB0aGlzLm9wYWNpdHkgKyAnKSc7XG5cdH1cblxuXHREaXNwbGF5U3RhdGljKGRpdjogSFRNTERpdkVsZW1lbnQsIHRleHRTaXplOiBudW1iZXIpIHtcblx0XHRjb25zdCBvdXRlckRpdiA9IGRpdi5jcmVhdGVEaXYoKTtcblx0XHRvdXRlckRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cdFx0b3V0ZXJEaXYuc3R5bGUud2lkdGggPSAodGV4dFNpemUgKiAzLjI1KSArICdweCc7XG5cdFx0b3V0ZXJEaXYuc3R5bGUuaGVpZ2h0ID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xuXHRcdG91dGVyRGl2LmNsYXNzTmFtZSA9ICdjZmUtcGhvdG9nbHlwaCc7XG5cdFx0Y29uc3QgZ2x5cGhEaXYgPSBvdXRlckRpdi5jcmVhdGVEaXYoKTtcblx0XHRnbHlwaERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0Z2x5cGhEaXYudGV4dENvbnRlbnQgPSB0aGlzLnNoYXBlO1xuXHRcdGdseXBoRGl2LnN0eWxlLmxlZnQgPSAodGhpcy54ICogdGV4dFNpemUpICsgJ3B4Jztcblx0XHRnbHlwaERpdi5zdHlsZS5ib3R0b20gPSAodGhpcy55ICogdGV4dFNpemUpICsgJ3B4Jztcblx0XHRnbHlwaERpdi5zdHlsZS5jb2xvciA9IHRoaXMuY29sb3I7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBDRkVGaWxlIH0gZnJvbSBcIi4vY2ZlLWZpbGVcIjtcclxuaW1wb3J0IHsgSHdheXUgfSBmcm9tIFwiLi9jb25sYW5ncy9od2F5dS10ZXh0XCI7XHJcbmltcG9ydCB7IFBob3RvTGFuZyB9IGZyb20gXCIuL2NvbmxhbmdzL3Bob3RvbGFuZy10ZXh0XCI7XHJcbmltcG9ydCB7IEZpbGVDcmVhdGlvbkRhdGEgfSBmcm9tIFwiLi9maWxlLWNyZWF0aW9uLWRhdGFcIjtcclxuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25sYW5nRGljdGlvbmFyeSBleHRlbmRzIENGRUZpbGUge1xyXG5cclxuXHRsYW5ndWFnZTogc3RyaW5nO1xyXG5cdHdvcmRzOiBbc3RyaW5nLCBzdHJpbmddW107XHJcblx0c2VhcmNoVGVybTogc3RyaW5nO1xyXG5cdHNlYXJjaEluQ29ubGFuZzogYm9vbGVhbjtcclxuXHJcblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhOiBGaWxlQ3JlYXRpb25EYXRhKTogUHJvbWlzZTxDb25sYW5nRGljdGlvbmFyeT4ge1xyXG5cdFx0Y29uc3QgdW5maW5pc2hlZERpY3Rpb25hcnkgPSA8Q29ubGFuZ0RpY3Rpb25hcnk+IGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihkYXRhKTtcclxuXHRcdHVuZmluaXNoZWREaWN0aW9uYXJ5Lmxhbmd1YWdlID0gJ0h3YXl1JztcclxuXHRcdHVuZmluaXNoZWREaWN0aW9uYXJ5LndvcmRzID0gW107XHJcblx0XHR1bmZpbmlzaGVkRGljdGlvbmFyeS5zZWFyY2hUZXJtID0gJyc7XHJcblx0XHR1bmZpbmlzaGVkRGljdGlvbmFyeS5zZWFyY2hJbkNvbmxhbmcgPSBmYWxzZTtcclxuXHRcdHJldHVybiB1bmZpbmlzaGVkRGljdGlvbmFyeTtcclxuXHR9XHJcblxyXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBtYWluRGl2KTtcclxuXHJcblx0XHRjb25zdCBsYW5ndWFnZURyb3Bkb3duID0gbWFpbkRpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcblx0XHRsYW5ndWFnZURyb3Bkb3duLmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICdId2F5dScsIHZhbHVlOiAnSHdheXUnIH0gKTtcclxuXHRcdGxhbmd1YWdlRHJvcGRvd24uY3JlYXRlRWwoJ29wdGlvbicsIHsgdGV4dDogJ1Bob3RvbGFuZycsIHZhbHVlOiAnUGhvdG9sYW5nJyB9ICk7XHJcblx0XHRsYW5ndWFnZURyb3Bkb3duLnZhbHVlID0gdGhpcy5sYW5ndWFnZTtcclxuXHJcblx0XHRjb25zdCBhZGRXb3JkRGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcclxuXHRcdGF3YWl0IHRoaXMuQ3JlYXRlTmV3V29yZEVkaXRvcihzbnYsIG1haW5EaXYsIGFkZFdvcmREaXYpO1xyXG5cclxuXHRcdGxhbmd1YWdlRHJvcGRvd24ub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZURyb3Bkb3duLnZhbHVlO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNudiwgbWFpbkRpdik7XHJcblx0XHR9XHJcblxyXG5cdFx0YXdhaXQgdGhpcy5EaXNwbGF5TGlzdChzbnYsIG1haW5EaXYpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBEaXNwbGF5V29yZChzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCwgZGl2OiBIVE1MRGl2RWxlbWVudCwgaW5kZXg6IG51bWJlcikge1xyXG5cdFx0ZGl2LmVtcHR5KCk7XHJcblxyXG5cdFx0Y29uc3QgbW9kZUJ1dHRvbiA9IGRpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnRWRpdCcgfSApO1xyXG5cdFx0bW9kZUJ1dHRvbi5zdHlsZS50b3AgPSAnMCc7XHJcblx0XHRtb2RlQnV0dG9uLnN0eWxlLnJpZ2h0ID0gJzAnO1xyXG5cdFx0bW9kZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRhd2FpdCB0aGlzLkVkaXRXb3JkKHNudiwgbWFpbkRpdiwgZGl2LCBpbmRleCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgd29yZERpdiA9IGRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdHdvcmREaXYuc3R5bGUuZ2FwID0gJzElJztcclxuXHRcdHdvcmREaXYuc3R5bGUuZm9udFNpemUgPSAnMjVweCc7XHJcblx0XHRjb25zdCBjb25sYW5nV29yZCA9IHRoaXMud29yZHNbaW5kZXhdWzBdO1xyXG5cdFx0Y29uc3QgZGVmaW5pdGlvbiA9IHRoaXMud29yZHNbaW5kZXhdWzFdO1xyXG5cdFx0Y29uc3QgY29ubGFuZ1dvcmREaXYgPSB0aGlzLkRpc3BsYXlDb25sYW5nVGV4dCh3b3JkRGl2LCBjb25sYW5nV29yZCk7XHJcblx0XHRjb25sYW5nV29yZERpdi5jbGFzc0xpc3QuYWRkKCdjZmUtcG9pbnRlci1ob3ZlcicpO1xyXG5cdFx0d29yZERpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJzonIH0gKTtcclxuXHRcdHdvcmREaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IGRlZmluaXRpb24gfSApO1xyXG5cclxuXHRcdGNvbmxhbmdXb3JkRGl2Lm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0YXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY29ubGFuZ1dvcmQpO1xyXG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29weSB0ZXh0OiAnLCBlcnIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIEVkaXRXb3JkKHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50LCBkaXY6IEhUTUxEaXZFbGVtZW50LCBpbmRleDogbnVtYmVyKSB7XHJcblx0XHRkaXYuZW1wdHkoKTtcclxuXHRcdGNvbnN0IGJ1dHRvbnNEaXYgPSBkaXYuY3JlYXRlRGl2KCdoYm94Jyk7XHJcblxyXG5cdFx0Y29uc3QgbW9kZUJ1dHRvbiA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1ZpZXcnIH0gKTtcclxuXHRcdG1vZGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5V29yZChzbnYsIG1haW5EaXYsIGRpdiwgaW5kZXgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0RlbGV0ZScgfSApO1xyXG5cdFx0ZGVsZXRlQnV0dG9uLmNsYXNzTGlzdCA9ICdjZmUtcmVtb3ZlLWJ1dHRvbic7XHJcblx0XHRkZWxldGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy53b3Jkcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNudiwgbWFpbkRpdik7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgd29yZERpdiA9IGRpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcclxuXHRcdHdvcmREaXYuc3R5bGUuZm9udFNpemUgPSAnMjVweCc7XHJcblx0XHR3b3JkRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnV29yZCBpbiAnICsgdGhpcy5sYW5ndWFnZSB9ICk7XHJcblx0XHRjb25zdCBjb25sYW5nV29yZCA9IHRoaXMud29yZHNbaW5kZXhdWzBdO1xyXG5cdFx0Y29uc3QgZGVmaW5pdGlvbiA9IHRoaXMud29yZHNbaW5kZXhdWzFdO1xyXG5cdFx0Y29uc3QgbmV3V29yZElucHV0ID0gdGhpcy5EaXNwbGF5Q29ubGFuZ0VkaXRvcih3b3JkRGl2LCBjb25sYW5nV29yZCk7XHJcblxyXG5cdFx0d29yZERpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0RlZmluaXRpb24nIH0gKTtcclxuXHRcdGNvbnN0IGRlZmluaXRpb25JbnB1dCA9IHdvcmREaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiBkZWZpbml0aW9uIH0gKTtcclxuXHRcdGRlZmluaXRpb25JbnB1dC5zdHlsZS5mb250U2l6ZSA9ICcyNXB4JztcclxuXHJcblx0XHRjb25zdCBvblN1Ym1pdCA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy53b3Jkc1tpbmRleF0gPSBbbmV3V29yZElucHV0LnZhbHVlLCBkZWZpbml0aW9uSW5wdXQudmFsdWVdO1xyXG5cdFx0XHR0aGlzLlJlU29ydChpbmRleCk7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLkRpc3BsYXkoc252LCBtYWluRGl2KTtcclxuXHRcdH1cclxuXHJcblx0XHRkaXYub25rZXlkb3duID0gYXN5bmMgKGV2ZW50KSA9PiB7XHJcblx0XHRcdGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcclxuXHRcdFx0XHRhd2FpdCBvblN1Ym1pdCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIENyZWF0ZU5ld1dvcmRFZGl0b3Ioc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQsIGRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0FkZCBOZXcgV29yZDonIH0gKTtcclxuXHRcdGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1dvcmQgaW4gJyArIHRoaXMubGFuZ3VhZ2UgfSApO1xyXG5cdFx0Y29uc3QgbmV3V29yZElucHV0ID0gdGhpcy5EaXNwbGF5Q29ubGFuZ0VkaXRvcihkaXYpO1xyXG5cclxuXHRcdGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0RlZmluaXRpb24nIH0gKTtcclxuXHRcdGNvbnN0IGRlZmluaXRpb25JbnB1dCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICcnIH0gKTtcclxuXHRcdGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnc3VibWl0JyB9ICk7XHJcblxyXG5cdFx0Y29uc3Qgb25TdWJtaXQgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMud29yZHMucHVzaChbbmV3V29yZElucHV0LnZhbHVlLCBkZWZpbml0aW9uSW5wdXQudmFsdWVdKTtcclxuXHRcdFx0dGhpcy5SZVNvcnQodGhpcy53b3Jkcy5sZW5ndGggLSAxKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHN1Ym1pdEJ1dHRvbi5vbmNsaWNrID0gb25TdWJtaXQ7XHJcblx0XHRkaXYub25rZXlkb3duID0gYXN5bmMgKGV2ZW50KSA9PiB7XHJcblx0XHRcdGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcclxuXHRcdFx0XHRhd2FpdCBvblN1Ym1pdCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIERpc3BsYXlDb25sYW5nRWRpdG9yKGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nV29yZCA9ICcnKSB7XHJcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xyXG5cdFx0XHRjYXNlICdId2F5dSc6XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIEh3YXl1LkNyZWF0ZVRleHRJbnB1dChkaXYsIGV4aXN0aW5nV29yZCwgMjUsIGZhbHNlKTtcclxuXHRcdFx0Y2FzZSAnUGhvdG9sYW5nJzpcclxuXHRcdFx0XHRyZXR1cm4gUGhvdG9MYW5nLkNyZWF0ZVRleHRJbnB1dChkaXYsIGV4aXN0aW5nV29yZCwgMjUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBEaXNwbGF5Q29ubGFuZ1RleHQoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdXb3JkID0gJycpIHtcclxuXHRcdHN3aXRjaCh0aGlzLmxhbmd1YWdlKSB7XHJcblx0XHRcdGNhc2UgJ0h3YXl1JzpcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRyZXR1cm4gSHdheXUuRGlzcGxheShkaXYsIGV4aXN0aW5nV29yZCwgMjUsIGZhbHNlKTtcclxuXHRcdFx0Y2FzZSAnUGhvdG9sYW5nJzpcclxuXHRcdFx0XHRyZXR1cm4gUGhvdG9MYW5nLkRpc3BsYXkoZGl2LCBleGlzdGluZ1dvcmQsIDI1LCBudWxsLCBudWxsLCB0cnVlKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgRGlzcGxheUxpc3Qoc252OiBTb3VyY2VBbmRWYXVsdCwgZGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0ZGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnU2VhcmNoIGluICcgKyB0aGlzLmxhbmd1YWdlICsgJz8nIH0gKTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgY2hlY2tib3ggPSBkaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnY2hlY2tib3gnIH0gKTtcclxuXHRcdGNoZWNrYm94LmNoZWNrZWQgPSB0aGlzLnNlYXJjaEluQ29ubGFuZztcclxuXHJcblx0XHRkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdTZWFyY2ggdGVybScgfSApO1xyXG5cdFx0XHJcblx0XHRjb25zdCBjb25sYW5nU2VhcmNoID0gdGhpcy5EaXNwbGF5Q29ubGFuZ0VkaXRvcihkaXYsIHRoaXMuc2VhcmNoVGVybSk7XHJcblx0XHRjb25zdCBlbmdsaXNoU2VhcmNoID0gZGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogdGhpcy5zZWFyY2hUZXJtIH0gKTtcclxuXHRcdFxyXG5cdFx0bGV0IHByZXZFbGVtZW50ID0gY2hlY2tib3guY2hlY2tlZCA/IGVuZ2xpc2hTZWFyY2ggOiBjb25sYW5nU2VhcmNoO1xyXG5cdFx0bGV0IGN1cnJlbnRFbGVtZW50ID0gY2hlY2tib3guY2hlY2tlZCA/IGNvbmxhbmdTZWFyY2ggOiBlbmdsaXNoU2VhcmNoO1xyXG5cdFx0cHJldkVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblx0XHRjdXJyZW50RWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuXHJcblx0XHR0aGlzLnNlYXJjaFRlcm0gPSBwcmV2RWxlbWVudC52YWx1ZTtcclxuXHJcblx0XHRwcmV2RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0Y3VycmVudEVsZW1lbnQudmFsdWUgPSB0aGlzLnNlYXJjaFRlcm07XHJcblx0XHRjdXJyZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcblx0XHRcclxuXHRcdGNvbnN0IHJlc3VsdHNEaXYgPSBkaXYuY3JlYXRlRGl2KCdjZmUtZGljdGlvbmFyeS1ncmlkJyk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHJlZnJlc2hSZXN1bHRzID0gKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNlYXJjaFRlcm0gPSBjdXJyZW50RWxlbWVudC52YWx1ZTtcclxuXHRcdFx0dGhpcy5zZWFyY2hJbkNvbmxhbmcgPSBjaGVja2JveC5jaGVja2VkO1xyXG5cdFx0XHRyZXN1bHRzRGl2LmVtcHR5KCk7XHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53b3Jkcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGlmICh0aGlzLndvcmRzW2ldW2NoZWNrYm94LmNoZWNrZWQgPyAwIDogMV0uY29udGFpbnMoY3VycmVudEVsZW1lbnQudmFsdWUpKSB7XHJcblx0XHRcdFx0XHRjb25zdCB3b3JkRGl2ID0gcmVzdWx0c0Rpdi5jcmVhdGVEaXYoJ2NmZS1kaWN0aW9uYXJ5LXdvcmQnKTtcclxuXHRcdFx0XHRcdHRoaXMuRGlzcGxheVdvcmQoc252LCBkaXYsIHdvcmREaXYsIGkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJlZnJlc2hSZXN1bHRzKCk7XHJcblxyXG5cdFx0Y29ubGFuZ1NlYXJjaC5vbmlucHV0ID0gcmVmcmVzaFJlc3VsdHM7XHJcblxyXG5cdFx0ZW5nbGlzaFNlYXJjaC5vbmlucHV0ID0gcmVmcmVzaFJlc3VsdHM7XHJcblxyXG5cdFx0Y2hlY2tib3gub25jaGFuZ2UgPSAoKSA9PiB7XHJcblx0XHRcdHJlc3VsdHNEaXYuZW1wdHkoKTtcclxuXHJcblx0XHRcdHByZXZFbGVtZW50ID0gY2hlY2tib3guY2hlY2tlZCA/IGVuZ2xpc2hTZWFyY2ggOiBjb25sYW5nU2VhcmNoO1xyXG5cdFx0XHRjdXJyZW50RWxlbWVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyBjb25sYW5nU2VhcmNoIDogZW5nbGlzaFNlYXJjaDtcclxuXHRcdFx0dGhpcy5zZWFyY2hUZXJtID0gcHJldkVsZW1lbnQudmFsdWU7XHJcblxyXG5cdFx0XHRwcmV2RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0XHRjdXJyZW50RWxlbWVudC52YWx1ZSA9IHRoaXMuc2VhcmNoVGVybTtcclxuXHRcdFx0Y3VycmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG5cdFx0XHRcclxuXHRcdFx0cmVmcmVzaFJlc3VsdHMoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgUmVTb3J0KGluZGV4T2ZDaGFuZ2VkV29yZDogbnVtYmVyKSB7XHJcblx0XHRjb25zdCBjaGFuZ2VkV29yZCA9IHRoaXMud29yZHMuc3BsaWNlKGluZGV4T2ZDaGFuZ2VkV29yZCwgMSlbMF07XHJcblx0XHRsZXQgaSA9IDA7XHJcblx0XHRsZXQgbGVmdCA9IDA7XHJcblx0XHRsZXQgcmlnaHQgPSB0aGlzLndvcmRzLmxlbmd0aCAtIDE7XHJcblx0XHRcclxuXHRcdHdoaWxlIChsZWZ0IDw9IHJpZ2h0KSB7XHJcblx0XHRcdGNvbnN0IG1pZCA9IE1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKTtcclxuXHRcdFx0aWYgKHRoaXMud29yZHNbbWlkXVswXSA8IGNoYW5nZWRXb3JkWzBdKSB7XHJcblx0XHRcdFx0bGVmdCA9IG1pZCArIDE7XHJcblx0XHRcdFx0aSA9IGxlZnQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmlnaHQgPSBtaWQgLSAxO1xyXG5cdFx0XHRcdGkgPSBtaWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLndvcmRzLnNwbGljZShpLCAwLCBjaGFuZ2VkV29yZCk7XHJcblx0fVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHsgQ0ZFRmlsZSB9IGZyb20gXCIuL2NmZS1maWxlXCI7XG5pbXBvcnQgeyBDRkVGaWxlSGFuZGxlciB9IGZyb20gXCIuL2NmZS1maWxlLWhhbmRsZXJcIjtcbmltcG9ydCB7IEZpbGVDcmVhdGlvbkRhdGEgfSBmcm9tIFwiLi9maWxlLWNyZWF0aW9uLWRhdGFcIjtcbmltcG9ydCB7IFNpbmdsZU1lZGlhRmlsZSB9IGZyb20gXCIuL3NpbmdsZS1tZWRpYS1maWxlXCI7XG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xuaW1wb3J0IHsgUGhvdG9MYW5nLCBQaG90b0xpbmUgfSBmcm9tIFwiLi9jb25sYW5ncy9waG90b2xhbmctdGV4dFwiO1xuaW1wb3J0IHsgSHdheXUgfSBmcm9tIFwiLi9jb25sYW5ncy9od2F5dS10ZXh0XCI7XG5cbmV4cG9ydCBjbGFzcyBTdG9yeSBleHRlbmRzIENGRUZpbGUge1xuXHRwcml2YXRlIGN1cnJlbnRQYWdlSW5kZXg6IG51bWJlcjtcblx0cHJpdmF0ZSBwYWdlczogUGFnZVtdO1xuXHRwcml2YXRlIGNoYXJhY3RlcnM6IENoYXJhY3RlcltdO1xuXHRwcml2YXRlIGxhbmd1YWdlOiBzdHJpbmc7XG5cdHByaXZhdGUgZG9WZXJ0aWNhbDogYm9vbGVhbjtcblxuXHRwcml2YXRlIHN0YXRpYyBrbm93bkxhbmd1YWdlcyA9IFtcblx0XHQnRW5nbGlzaCcsXG5cdFx0J0h3YXl1Jyxcblx0XHQnUGhvdG9sYW5nJ1xuXHRdXG5cblx0cHJpdmF0ZSBNYWtlVmVydGljYWwoZWw6IEhUTUxFbGVtZW50KSB7XG5cdFx0ZWwuc3R5bGUud3JpdGluZ01vZGUgPSAndmVydGljYWwtbHInO1xuXHRcdGVsLnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0Jztcblx0fVxuXG5cdHByaXZhdGUgQ3JlYXRlVGV4dElucHV0KGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nV29yZCA9ICcnKSB7XG5cdFx0bGV0IGlucHV0O1xuXHRcdHN3aXRjaCh0aGlzLmxhbmd1YWdlKSB7XG5cdFx0XHRjYXNlICdId2F5dSc6XG5cdFx0XHRcdHJldHVybiBId2F5dS5DcmVhdGVUZXh0SW5wdXQoZGl2LCBleGlzdGluZ1dvcmQsIDI1LCB0aGlzLmRvVmVydGljYWwpO1xuXHRcdFx0Y2FzZSAnUGhvdG9sYW5nJzpcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5DcmVhdGVUZXh0SW5wdXQoZGl2LCBleGlzdGluZ1dvcmQsIDI1KTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlucHV0ID0gZGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogZXhpc3RpbmdXb3JkIH0gKTtcblx0XHRcdFx0aW5wdXQuc3R5bGUuZm9udFNpemUgPSAnMjVweCc7XG5cdFx0XHRcdHJldHVybiBpbnB1dDtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIERpc3BsYXlMaW5lRWRpdChkaXY6IEhUTUxEaXZFbGVtZW50LCBsaW5lOiBEaWFsb2d1ZUxpbmUpIHtcblx0XHRjb25zdCBpbnB1dCA9IHRoaXMuQ3JlYXRlVGV4dEFyZWEoZGl2LCBsaW5lLmNvbnRlbnQpO1xuXHRcdGlmICh0aGlzLmxhbmd1YWdlICE9PSAnUGhvdG9sYW5nJykge1xuXHRcdFx0Y29uc3Qgc3BlYWtlciA9IHRoaXMuY2hhcmFjdGVyc1tsaW5lLnNwZWFrZXJJbmRleF07XG5cdFx0XHRpbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzcGVha2VyLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdGlucHV0LnN0eWxlLmNvbG9yID0gc3BlYWtlci5jb2xvcjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xuXHRcdFx0dGhpcy5NYWtlVmVydGljYWwoaW5wdXQpO1xuXHRcdH1cblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblxuXHRwcml2YXRlIENyZWF0ZVRleHRBcmVhKGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nV29yZCA9ICcnKSB7XG5cdFx0bGV0IGlucHV0O1xuXHRcdHN3aXRjaCh0aGlzLmxhbmd1YWdlKSB7XG5cdFx0XHRjYXNlICdId2F5dSc6XG5cdFx0XHRcdHJldHVybiBId2F5dS5DcmVhdGVUZXh0QXJlYShkaXYsIGV4aXN0aW5nV29yZCwgMjUsIHRoaXMuZG9WZXJ0aWNhbCk7XG5cdFx0XHRjYXNlICdQaG90b2xhbmcnOlxuXHRcdFx0XHRyZXR1cm4gUGhvdG9MYW5nLkNyZWF0ZVRleHRBcmVhKGRpdiwgZXhpc3RpbmdXb3JkLCAyNSk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpbnB1dCA9IGRpdi5jcmVhdGVFbCgndGV4dGFyZWEnLCB7IHRleHQ6IGV4aXN0aW5nV29yZCB9ICk7XG5cdFx0XHRcdGlucHV0LnN0eWxlLmZvbnRTaXplID0gJzI1cHgnO1xuXHRcdFx0XHRyZXR1cm4gaW5wdXQ7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBEaXNwbGF5VGV4dChkaXY6IEhUTUxEaXZFbGVtZW50LCBmb250U2l6ZSA9IDI1LCBleGlzdGluZ1dvcmQgPSAnJykge1xuXHRcdHN3aXRjaCh0aGlzLmxhbmd1YWdlKSB7XG5cdFx0XHRjYXNlICdId2F5dSc6XG5cdFx0XHRcdHJldHVybiBId2F5dS5EaXNwbGF5KGRpdiwgZXhpc3RpbmdXb3JkLCBmb250U2l6ZSwgdGhpcy5kb1ZlcnRpY2FsKTtcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XG5cdFx0XHRcdHJldHVybiBQaG90b0xhbmcuRGlzcGxheShkaXYsIGV4aXN0aW5nV29yZCwgZm9udFNpemUsIG51bGwsIG51bGwsIHRydWUpO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogZXhpc3RpbmdXb3JkIH0gKTtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGE6IEZpbGVDcmVhdGlvbkRhdGEpOiBQcm9taXNlPFN0b3J5PiB7XG5cdFx0Y29uc3QgbmV3U3RvcnlGaWxlID0gPFN0b3J5PiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKGRhdGEpKTtcblx0XHRuZXdTdG9yeUZpbGUuY3VycmVudFBhZ2VJbmRleCA9IDA7XG5cdFx0bmV3U3RvcnlGaWxlLnBhZ2VzID0gW107XG5cdFx0bmV3U3RvcnlGaWxlLmNoYXJhY3RlcnMgPSBbXTtcblx0XHRuZXdTdG9yeUZpbGUubGFuZ3VhZ2UgPSAnRW5nbGlzaCc7XG5cdFx0bmV3U3RvcnlGaWxlLmRvVmVydGljYWwgPSBmYWxzZTtcblx0XHRyZXR1cm4gbmV3U3RvcnlGaWxlO1xuXHR9XG5cblx0b3ZlcnJpZGUgYXN5bmMgRGlzcGxheShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBtYWluRGl2KTtcblx0XHR0aGlzLkxvYWRTdG9yeVVJKHNudiwgbWFpbkRpdi5jcmVhdGVEaXYoJ3Zib3gnKSk7XG5cdH1cblxuXHRwcml2YXRlIExvYWRTdG9yeVVJKHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0bWFpbkRpdi5lbXB0eSgpO1xuXHRcdG1haW5EaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdHbyB0byBwYWdlIG51bWJlcjonIH0gKTtcblx0XHRjb25zdCBwYWdlU2VsZWN0RGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRjb25zdCBwYWdlTnVtYmVySW5wdXQgPSBwYWdlU2VsZWN0RGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogJycgKyAodGhpcy5jdXJyZW50UGFnZUluZGV4ICsgMSkgfSApO1xuXHRcdHBhZ2VTZWxlY3REaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICcnICsgJy8nICsgdGhpcy5wYWdlcy5sZW5ndGggfSApO1xuXHRcdGNvbnN0IGdvQnV0dG9uID0gcGFnZVNlbGVjdERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnR28nIH0gKTtcblx0XHRnb0J1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5jdXJyZW50UGFnZUluZGV4ID0gcGFyc2VJbnQocGFnZU51bWJlcklucHV0LnZhbHVlKSAtIDE7XG5cdFx0XHR0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LCBtYWluRGl2KTtcblx0XHR9XG5cblx0XHRjb25zdCBsYW5ndWFnZUlucHV0ID0gbWFpbkRpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBTdG9yeS5rbm93bkxhbmd1YWdlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGFuZ3VhZ2VJbnB1dC5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiBTdG9yeS5rbm93bkxhbmd1YWdlc1tpXSwgdmFsdWU6IFN0b3J5Lmtub3duTGFuZ3VhZ2VzW2ldIH0gKTtcblx0XHR9XG5cdFx0bGFuZ3VhZ2VJbnB1dC52YWx1ZSA9IHRoaXMubGFuZ3VhZ2U7XG5cdFx0bGFuZ3VhZ2VJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZUlucHV0LnZhbHVlO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHR0aGlzLkxvYWRTdG9yeVVJKHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXG5cdFx0bWFpbkRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1ZlcnRpY2FsIFRleHQnIH0gKTtcblx0XHRjb25zdCBkb1ZlcnRpY2FsQm94ID0gbWFpbkRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdjaGVja2JveCcgfSApO1xuXHRcdGRvVmVydGljYWxCb3guY2hlY2tlZCA9IHRoaXMuZG9WZXJ0aWNhbDtcblx0XHRkb1ZlcnRpY2FsQm94Lm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLmRvVmVydGljYWwgPSBkb1ZlcnRpY2FsQm94LmNoZWNrZWQ7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdHRoaXMuTG9hZFN0b3J5VUkoc252LCBtYWluRGl2KTtcblx0XHR9XG5cblx0XHR0aGlzLkxvYWRDaGFyYWN0ZXJFZGl0b3JVSShzbnYsIG1haW5EaXYpO1xuXHR9XG5cblx0cHJpdmF0ZSBMb2FkQ2hhcmFjdGVyRWRpdG9yVUkoc252OiBTb3VyY2VBbmRWYXVsdCwgZGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGNvbnN0IGNoYXJFZGl0b3JEaXYgPSBkaXYuY3JlYXRlRGl2KCk7XG5cdFx0Y2hhckVkaXRvckRpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAnaGJveCcgOiAndmJveCc7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYXJhY3RlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGk7XG5cdFx0XHRjb25zdCBjaGFyRGl2ID0gY2hhckVkaXRvckRpdi5jcmVhdGVEaXYoKTtcblx0XHRcdGNoYXJEaXYuY2xhc3NOYW1lID0gdGhpcy5kb1ZlcnRpY2FsID8gJ3Zib3gnIDogJ2hib3gnO1xuXG5cdFx0XHRjaGFyRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnTmFtZTogJyB9ICk7XG5cdFx0XHRjb25zdCBuYW1lSW5wdXQgPSB0aGlzLkNyZWF0ZVRleHRJbnB1dChjaGFyRGl2LCB0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5uYW1lKTtcblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlICE9PSAnUGhvdG9sYW5nJykge1xuXHRcdFx0XHRuYW1lSW5wdXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRuYW1lSW5wdXQuc3R5bGUuY29sb3IgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5jb2xvcjtcblx0XHRcdH1cblx0XHRcdG5hbWVJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0ubmFtZSA9IG5hbWVJbnB1dC52YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRcdHRoaXMuTG9hZFN0b3J5VUkoc252LCBkaXYpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xuXHRcdFx0XHRuYW1lSW5wdXQuc3R5bGUuaGVpZ2h0ID0gJ2ZpdC1jb250ZW50Jztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5hbWVJbnB1dC5zdHlsZS53aWR0aCA9ICdmaXQtY29udGVudCc7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5sYW5ndWFnZSAhPT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdFx0dGhpcy5Mb2FkQ2hhcmFjdGVyQ29sb3JTZWxlY3Rpb25VSShzbnYsIGRpdiwgY2hhckVkaXRvckRpdiwgY3VycmVudEluZGV4KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuRGlzcGxheVRleHQoY2hhckRpdiwgMjUsIHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50SW5kZXhdLm5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBhZGRDaGFyQnV0dG9uID0gY2hhckVkaXRvckRpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQWRkIENoYXJhY3RlcicgfSApO1xuXHRcdGFkZENoYXJCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMuY2hhcmFjdGVycy5wdXNoKG5ldyBDaGFyYWN0ZXIoKSk7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdGNoYXJFZGl0b3JEaXYucmVtb3ZlKCk7XG5cdFx0XHR0aGlzLkxvYWRDaGFyYWN0ZXJFZGl0b3JVSShzbnYsIGRpdik7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBMb2FkQ2hhcmFjdGVyQ29sb3JTZWxlY3Rpb25VSShzbnY6IFNvdXJjZUFuZFZhdWx0LCBkaXY6IEhUTUxEaXZFbGVtZW50LCBjaGFyRWRpdG9yRGl2OiBIVE1MRGl2RWxlbWVudCwgY3VycmVudEluZGV4OiBudW1iZXIpIHtcblx0XHRjb25zdCBjb2xvckRpdiA9IGNoYXJFZGl0b3JEaXYuY3JlYXRlRGl2KCk7XG5cdFx0Y29sb3JEaXYuY2xhc3NOYW1lID0gdGhpcy5kb1ZlcnRpY2FsID8gJ3Zib3gnIDogJ2hib3gnO1xuXHRcdGNvbG9yRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnVGV4dCBDb2xvcjonIH0gKTtcblx0XHRjb25zdCBjb2xvcklucHV0ID0gY29sb3JEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnY29sb3InLCB2YWx1ZTogdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3IgfSApO1xuXHRcdGNvbG9yRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQmFja2dyb3VuZCBDb2xvcjonIH0gKTtcblx0XHRjb25zdCBiYWNrZ3JvdW5kSW5wdXQgPSBjb2xvckRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdjb2xvcicsIHZhbHVlOiB0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5iYWNrZ3JvdW5kQ29sb3IgfSApO1xuXHRcdGNvbnN0IHN3YXBCdXR0b24gPSBjb2xvckRpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnU3dhcCcgfSApO1xuXHRcdGNvbG9ySW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5jb2xvciA9IGNvbG9ySW5wdXQudmFsdWU7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHR9XG5cdFx0YmFja2dyb3VuZElucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uYmFja2dyb3VuZENvbG9yID0gYmFja2dyb3VuZElucHV0LnZhbHVlO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0fVxuXHRcdHN3YXBCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50SW5kZXhdLmJhY2tncm91bmRDb2xvciA9IGNvbG9ySW5wdXQudmFsdWU7XG5cdFx0XHR0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5jb2xvciA9IGJhY2tncm91bmRJbnB1dC52YWx1ZTtcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHRcdFx0Y2hhckVkaXRvckRpdi5yZW1vdmUoKTtcblx0XHRcdHRoaXMuTG9hZENoYXJhY3RlckVkaXRvclVJKHNudiwgZGl2KTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIExvYWRQYWdlU2VsZWN0b3Ioc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRjb25zdCBidXR0b25zRGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRjb25zdCBiYWNrQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnLScgfSApO1xuXHRcdGNvbnN0IHBhZ2VOdW1iZXJJbnB1dCA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyArICh0aGlzLmN1cnJlbnRQYWdlSW5kZXggKyAxKSB9ICk7XG5cdFx0YnV0dG9uc0Rpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJycgKyAnLycgKyB0aGlzLnBhZ2VzLmxlbmd0aCB9ICk7XG5cdFx0Y29uc3QgbmV4dEJ1dHRvbiA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJysnIH0gKTtcblx0XHRjb25zdCBkZWxldGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdEZWxldGUgUGFnZScgfSApO1xuXHRcdGRlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSAnY2ZlLXJlbW92ZS1idXR0b24nO1xuXHRcdGNvbnN0IGFkZEJ1dHRvbiA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0FkZCBQYWdlJyB9ICk7XG5cdFx0Y29uc3QgZWRpdE1vZGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdFZGl0IE1vZGUnIH0gKTtcblx0XHRjb25zdCB2aWV3TW9kZUJ1dHRvbiA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1ZpZXcgTW9kZScgfSApO1xuXHRcdGNvbnN0IGhvbWVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdSZXR1cm4gdG8gU3RvcnknIH0gKTtcblx0XHRob21lQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRhd2FpdCB0aGlzLkxvYWRTdG9yeVVJKHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXHRcdGVkaXRNb2RlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRhd2FpdCB0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LCBtYWluRGl2KTtcblx0XHR9XG5cdFx0dmlld01vZGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRGlzcGxheU9ubHkoc252LCBtYWluRGl2KTtcblx0XHR9XG5cdFx0YmFja0J1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0aWYgKHRoaXMuY3VycmVudFBhZ2VJbmRleCA+IDApIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50UGFnZUluZGV4LS07XG5cdFx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsIG1haW5EaXYpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRuZXh0QnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5jdXJyZW50UGFnZUluZGV4IDwgdGhpcy5wYWdlcy5sZW5ndGgpIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50UGFnZUluZGV4Kys7XG5cdFx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsIG1haW5EaXYpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRwYWdlTnVtYmVySW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0aGlzLmN1cnJlbnRQYWdlSW5kZXggPSBwYXJzZUludChwYWdlTnVtYmVySW5wdXQudmFsdWUpIC0gMTtcblx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsIG1haW5EaXYpO1xuXHRcdH1cblx0XHRkZWxldGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdHRoaXMucGFnZXMuc3BsaWNlKHRoaXMuY3VycmVudFBhZ2VJbmRleCwgMSk7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdGlmICh0aGlzLmN1cnJlbnRQYWdlSW5kZXggIT09IDApIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50UGFnZUluZGV4LS07XG5cdFx0XHR9XG5cdFx0XHRhd2FpdCB0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LG1haW5EaXYpO1xuXHRcdH1cblx0XHRhZGRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGNvbnN0IGRlZmF1bHRQYWdlID0gbmV3IFBhZ2UoKTtcblx0XHRcdGNvbnN0IHRoaXNQYWdlRmlsZUlEID0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLm1lZGlhRmlsZUlEO1xuXHRcdFx0aWYgKHRoaXNQYWdlRmlsZUlEICE9PSAtMSAmJiB0aGlzUGFnZUZpbGVJRCA8IHNudi5zb3VyY2VGb2xkZXIuZmlsZUNvdW50KSB7XG5cdFx0XHRcdGRlZmF1bHRQYWdlLm1lZGlhRmlsZUlEID0gdGhpc1BhZ2VGaWxlSUQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBhZ2VzLnNwbGljZSh0aGlzLmN1cnJlbnRQYWdlSW5kZXggKyAxLCAwLCBkZWZhdWx0UGFnZSk7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleCsrO1xuXHRcdFx0YXdhaXQgdGhpcy5Mb2FkQ3VycmVudFBhZ2VFZGl0KHNudixtYWluRGl2KTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIExvYWRDdXJyZW50UGFnZUVkaXQoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcblx0XHRtYWluRGl2LmVtcHR5KCk7XG5cdFx0dGhpcy5Mb2FkUGFnZVNlbGVjdG9yKHNudiwgbWFpbkRpdik7XG5cblx0XHRtYWluRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnTWVkaWEgRmlsZSBJRDonIH0gKTtcblx0XHRjb25zdCBtZWRpYUZpbGVJRElucHV0ID0gbWFpbkRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyB9ICk7XG5cdFx0XG5cdFx0Y29uc3QgcGFuZWxEaXYgPSBtYWluRGl2LmNyZWF0ZURpdignaGJveCcpO1xuXHRcdGNvbnN0IG91dGVyTWVkaWFEaXYgPSBwYW5lbERpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcblx0XHRjb25zdCBsaW5lc0RpdiA9IHBhbmVsRGl2LmNyZWF0ZURpdigndmJveCcpO1xuXHRcdGNvbnN0IG1lZGlhV2lkdGhJbnB1dCA9IG91dGVyTWVkaWFEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcgfSApO1xuXHRcdG1lZGlhV2lkdGhJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcblx0XHRcdG91dGVyTWVkaWFEaXYuc3R5bGUud2lkdGggPSBtZWRpYVdpZHRoSW5wdXQudmFsdWUgKyAnJSc7XG5cdFx0XHRsaW5lc0Rpdi5zdHlsZS53aWR0aCA9IDEwMCAtIHBhcnNlSW50KG1lZGlhV2lkdGhJbnB1dC52YWx1ZSkgKyAnJSc7XG5cdFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubWVkaWFTaXplUGVyY2VudGFnZSA9IHBhcnNlSW50KG1lZGlhV2lkdGhJbnB1dC52YWx1ZSk7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHR9XG5cblx0XHRjb25zdCBtZWRpYURpdiA9IG91dGVyTWVkaWFEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0b3V0ZXJNZWRpYURpdi5zdHlsZS53aWR0aCA9ICc1MCUnO1xuXHRcdG1lZGlhRGl2LnN0eWxlLm9iamVjdEZpdCA9ICdjb250YWluJztcblx0XHRsaW5lc0Rpdi5zdHlsZS53aWR0aCA9ICc1MCUnO1xuXHRcdGxpbmVzRGl2LnN0eWxlLm1heEhlaWdodCA9ICc4MHZoJztcblx0XHRsaW5lc0Rpdi5zdHlsZS5wb3NpdGlvbiA9ICdzdGlja3knO1xuXHRcdGxpbmVzRGl2LnN0eWxlLnRvcCA9ICcwJSc7XG5cblx0XHRpZiAodGhpcy5jdXJyZW50UGFnZUluZGV4IDwgdGhpcy5wYWdlcy5sZW5ndGgpIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRQYWdlID0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdO1xuXHRcdFx0Y29uc3QgbWVkaWFGaWxlSUQgPSBjdXJyZW50UGFnZS5tZWRpYUZpbGVJRDtcblx0XHRcdG1lZGlhRmlsZUlESW5wdXQudmFsdWUgPSAnJyArIGN1cnJlbnRQYWdlLm1lZGlhRmlsZUlEO1xuXHRcdFx0aWYgKG1lZGlhRmlsZUlEID4gMCkge1xuXHRcdFx0XHRjb25zdCBtZWRpYUZpbGUgPSA8U2luZ2xlTWVkaWFGaWxlPiBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIG1lZGlhRmlsZUlEKTtcblx0XHRcdFx0YXdhaXQgbWVkaWFGaWxlLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLm1lZGlhU2l6ZVBlcmNlbnRhZ2UpIHtcblx0XHRcdFx0bWVkaWFXaWR0aElucHV0LnZhbHVlID0gJycgKyB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubWVkaWFTaXplUGVyY2VudGFnZTtcblx0XHRcdFx0b3V0ZXJNZWRpYURpdi5zdHlsZS53aWR0aCA9IG1lZGlhV2lkdGhJbnB1dC52YWx1ZSArICclJztcblx0XHRcdFx0bGluZXNEaXYuc3R5bGUud2lkdGggPSAxMDAgLSBwYXJzZUludChtZWRpYVdpZHRoSW5wdXQudmFsdWUpICsgJyUnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWVkaWFXaWR0aElucHV0LnZhbHVlID0gJzUwJztcblx0XHRcdFx0dGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLm1lZGlhU2l6ZVBlcmNlbnRhZ2UgPSA1MDtcblx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGRlZmF1bHRQYWdlID0gbmV3IFBhZ2UoKTtcblx0XHRcdGNvbnN0IGxhc3RQYWdlID0gdGhpcy5jdXJyZW50UGFnZUluZGV4IC0gMTtcblx0XHRcdGlmIChsYXN0UGFnZSA+PSAwICYmIHRoaXMuY3VycmVudFBhZ2VJbmRleCAhPT0gMCkge1xuXHRcdFx0XHRjb25zdCBsYXN0UGFnZUZpbGVJRCA9IHRoaXMucGFnZXNbbGFzdFBhZ2VdLm1lZGlhRmlsZUlEO1xuXHRcdFx0XHRjb25zdCBsYXN0UGFnZVNpemUgPSB0aGlzLnBhZ2VzW2xhc3RQYWdlXS5tZWRpYVNpemVQZXJjZW50YWdlO1xuXHRcdFx0XHRkZWZhdWx0UGFnZS5tZWRpYVNpemVQZXJjZW50YWdlID0gbGFzdFBhZ2VTaXplO1xuXHRcdFx0XHRtZWRpYVdpZHRoSW5wdXQudmFsdWUgPSAnJyArIGxhc3RQYWdlU2l6ZTtcblx0XHRcdFx0b3V0ZXJNZWRpYURpdi5zdHlsZS53aWR0aCA9IG1lZGlhV2lkdGhJbnB1dC52YWx1ZSArICclJztcblx0XHRcdFx0bGluZXNEaXYuc3R5bGUud2lkdGggPSAxMDAgLSBwYXJzZUludChtZWRpYVdpZHRoSW5wdXQudmFsdWUpICsgJyUnO1xuXHRcdFx0XHRpZiAobGFzdFBhZ2VGaWxlSUQgIT09IC0xICYmIGxhc3RQYWdlRmlsZUlEIDwgc252LnNvdXJjZUZvbGRlci5maWxlQ291bnQpIHtcblx0XHRcdFx0XHRjb25zdCBtZWRpYUZpbGVJRCA9IGxhc3RQYWdlRmlsZUlEICsgMTtcblx0XHRcdFx0XHRkZWZhdWx0UGFnZS5tZWRpYUZpbGVJRCA9IG1lZGlhRmlsZUlEO1xuXHRcdFx0XHRcdG1lZGlhRmlsZUlESW5wdXQudmFsdWUgPSAnJyArIG1lZGlhRmlsZUlEO1xuXHRcdFx0XHRcdGlmIChtZWRpYUZpbGVJRCA+IDApIHtcblx0XHRcdFx0XHRcdGNvbnN0IG1lZGlhRmlsZSA9IDxTaW5nbGVNZWRpYUZpbGU+IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgbWVkaWFGaWxlSUQpO1xuXHRcdFx0XHRcdFx0YXdhaXQgbWVkaWFGaWxlLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBhZ2VzLnB1c2goZGVmYXVsdFBhZ2UpO1xuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0fVxuXHRcdGF3YWl0IHRoaXMuTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudiwgbGluZXNEaXYpO1xuXHRcdG1lZGlhRmlsZUlESW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XTtcblx0XHRcdGN1cnJlbnRQYWdlLm1lZGlhRmlsZUlEID0gcGFyc2VJbnQobWVkaWFGaWxlSURJbnB1dC52YWx1ZSk7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdGNvbnN0IG1lZGlhRmlsZSA9IDxTaW5nbGVNZWRpYUZpbGU+IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgY3VycmVudFBhZ2UubWVkaWFGaWxlSUQpO1xuXHRcdFx0YXdhaXQgbWVkaWFGaWxlLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBMb2FkQ3VycmVudFBhZ2VEaXNwbGF5T25seShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdG1haW5EaXYuZW1wdHkoKTtcblxuXHRcdHRoaXMuTG9hZFBhZ2VTZWxlY3RvcihzbnYsIG1haW5EaXYpO1xuXHRcdFxuXHRcdGNvbnN0IHBhbmVsRGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRjb25zdCBvdXRlck1lZGlhRGl2ID0gcGFuZWxEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XG5cdFx0Y29uc3QgbGluZXNEaXYgPSBwYW5lbERpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcblxuXHRcdGNvbnN0IG1lZGlhRGl2ID0gb3V0ZXJNZWRpYURpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcblx0XHRvdXRlck1lZGlhRGl2LnN0eWxlLndpZHRoID0gJzUwJSc7XG5cdFx0bWVkaWFEaXYuc3R5bGUub2JqZWN0Rml0ID0gJ2NvbnRhaW4nO1xuXHRcdGxpbmVzRGl2LnN0eWxlLndpZHRoID0gJzUwJSc7XG5cdFx0bGluZXNEaXYuc3R5bGUubWF4SGVpZ2h0ID0gJzgwdmgnO1xuXHRcdGxpbmVzRGl2LnN0eWxlLnBvc2l0aW9uID0gJ3N0aWNreSc7XG5cdFx0bGluZXNEaXYuc3R5bGUudG9wID0gJzAlJztcblxuXHRcdGNvbnN0IGN1cnJlbnRQYWdlID0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdO1xuXHRcdGNvbnN0IG1lZGlhRmlsZUlEID0gY3VycmVudFBhZ2UubWVkaWFGaWxlSUQ7XG5cdFx0aWYgKG1lZGlhRmlsZUlEID4gMCkge1xuXHRcdFx0Y29uc3QgbWVkaWFGaWxlID0gPFNpbmdsZU1lZGlhRmlsZT4gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCBtZWRpYUZpbGVJRCk7XG5cdFx0XHRhd2FpdCBtZWRpYUZpbGUuRGlzcGxheU1lZGlhT25seShtZWRpYURpdiwgc252KTtcblx0XHR9XG5cdFx0aWYgKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYVNpemVQZXJjZW50YWdlKSB7XG5cdFx0XHRjb25zdCB3aWR0aCA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYVNpemVQZXJjZW50YWdlO1xuXHRcdFx0b3V0ZXJNZWRpYURpdi5zdHlsZS53aWR0aCA9IHdpZHRoICsgJyUnO1xuXHRcdFx0bGluZXNEaXYuc3R5bGUud2lkdGggPSAxMDAgLSB3aWR0aCArICclJztcblx0XHR9XG5cdFx0YXdhaXQgdGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0Rpc3BsYXlPbmx5KGxpbmVzRGl2KTtcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudjogU291cmNlQW5kVmF1bHQsIGxpbmVzRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGxpbmVzRGl2LmVtcHR5KCk7XG5cblx0XHRjb25zdCBzcGVha0RpdiA9IGxpbmVzRGl2LmNyZWF0ZURpdigpO1xuXHRcdHNwZWFrRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRzcGVha0Rpdi5zdHlsZS50b3AgPSAnMHB4Jztcblx0XHRzcGVha0Rpdi5zdHlsZS5sZWZ0ID0gJzBweCc7XG5cblx0XHRjb25zdCBleGlzdGluZ0xpbmVzRGl2ID0gbGluZXNEaXYuY3JlYXRlRGl2KCk7XG5cdFx0ZXhpc3RpbmdMaW5lc0Rpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAnaGJveCcgOiAndmJveCc7XG5cdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xuXHRcdFx0ZXhpc3RpbmdMaW5lc0Rpdi5zdHlsZS5vdmVyZmxvd1ggPSAnc2Nyb2xsJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhpc3RpbmdMaW5lc0Rpdi5zdHlsZS5vdmVyZmxvd1kgPSAnc2Nyb2xsJztcblx0XHR9XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGk7XG5cdFx0XHRjb25zdCBjdXJyZW50TGluZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lc1tpXTtcblx0XHRcdGNvbnN0IHNwZWFrZXIgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudExpbmUuc3BlYWtlckluZGV4XTtcblxuXHRcdFx0Y29uc3QgbGluZURpdiA9IGV4aXN0aW5nTGluZXNEaXYuY3JlYXRlRGl2KCk7XG5cdFx0XHRsaW5lRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICd2Ym94JyA6ICdoYm94JztcblxuXHRcdFx0Y29uc3QgZGVsZXRlQnV0dG9uID0gbGluZURpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnLScgfSApO1xuXHRcdFx0ZGVsZXRlQnV0dG9uLmNsYXNzTmFtZSA9ICdjZmUtcmVtb3ZlLWJ1dHRvbic7XG5cdFx0XHRkZWxldGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdFx0dGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzLnNwbGljZShjdXJyZW50SW5kZXgsIDEpO1xuXHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdFx0YXdhaXQgdGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0VkaXQoc252LCBsaW5lc0Rpdik7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5kb1ZlcnRpY2FsKSB7XG5cdFx0XHRcdHRoaXMuTWFrZVZlcnRpY2FsKGRlbGV0ZUJ1dHRvbik7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGluZGV4VGV4dEVsID0gdGhpcy5EaXNwbGF5VGV4dChsaW5lRGl2LCAyNSwgJycgKyBjdXJyZW50SW5kZXgpO1xuXHRcdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xuXHRcdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChpbmRleFRleHRFbCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlID09PSAnUGhvdG9sYW5nJykge1xuXHRcdFx0XHRjb25zdCBwbGF5QnV0dG9uID0gbGluZURpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHUyNUI3JyB9ICk7XG5cdFx0XHRcdHBsYXlCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdFx0XHRjb25zdCBwb3B1cCA9IHNwZWFrRGl2LmNyZWF0ZURpdigpO1xuXHRcdFx0XHRcdHBvcHVwLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS50b3AgPSAnMHB4Jztcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS5sZWZ0ID0gJzBweCc7XG5cdFx0XHRcdFx0Y29uc3QgcGhvdG9saW5lID0gbmV3IFBob3RvTGluZShsaW5lSW5wdXQudmFsdWUpO1xuXHRcdFx0XHRcdHBob3RvbGluZS5TcGVhayhwb3B1cCwgMjAwLCBbMTAwLCAyNTAsIDUwMF0sIFswLCA1MDBdLCBmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xuXHRcdFx0XHRcdHRoaXMuTWFrZVZlcnRpY2FsKHBsYXlCdXR0b24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNoYXJEcm9wZG93bkJ1dHRvbiA9IGxpbmVEaXYuY3JlYXRlRGl2KCk7XG5cdFx0XHRjb25zdCBjaGFyRHJvcGRvd25EaXYgPSBjaGFyRHJvcGRvd25CdXR0b24uY3JlYXRlRGl2KCk7XG5cdFx0XHRjaGFyRHJvcGRvd25EaXYuc3R5bGUuaGVpZ2h0ID0gJ2ZpdC1jb250ZW50Jztcblx0XHRcdGNoYXJEcm9wZG93bkRpdi5zdHlsZS53aWR0aCA9ICdmaXQtY29udGVudCc7XG5cdFx0XHRjaGFyRHJvcGRvd25EaXYuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuXHRcdFx0Y2hhckRyb3Bkb3duQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHNlbGVjdERpdiA9IGNoYXJEcm9wZG93bkRpdi5jcmVhdGVEaXYoKTtcblx0XHRcdFx0c2VsZWN0RGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICdoYm94JyA6ICd2Ym94Jztcblx0XHRcdFx0c2VsZWN0RGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRcdFx0c2VsZWN0RGl2LnN0eWxlLnRvcCA9ICcwJSc7XG5cdFx0XHRcdHNlbGVjdERpdi5zdHlsZS5sZWZ0ID0gJzAlJztcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYXJhY3RlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb25zdCBjdXJyZW50Q2hhckluZGV4ID0gaTtcblx0XHRcdFx0XHRjb25zdCBjdXJyZW50Q2hhciA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50Q2hhckluZGV4XTtcblx0XHRcdFx0XHRjb25zdCBjdXJyZW50T3B0aW9uID0gc2VsZWN0RGl2LmNyZWF0ZURpdigpO1xuXHRcdFx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdFx0XHRcdHRoaXMuTWFrZVZlcnRpY2FsKGN1cnJlbnRPcHRpb24pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5sYW5ndWFnZSAhPT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY3VycmVudENoYXIuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS5jb2xvciA9IGN1cnJlbnRDaGFyLmNvbG9yO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdXJyZW50T3B0aW9uLnN0eWxlLnpJbmRleCA9ICcyJztcblx0XHRcdFx0XHR0aGlzLkRpc3BsYXlUZXh0KGN1cnJlbnRPcHRpb24sIDI1LCBjdXJyZW50Q2hhci5uYW1lKTtcblx0XHRcdFx0XHRjdXJyZW50T3B0aW9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbY3VycmVudEluZGV4XS5zcGVha2VySW5kZXggPSBjdXJyZW50Q2hhckluZGV4O1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdFx0XHRcdFx0XHR0aGlzLkxvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnYsIGxpbmVzRGl2KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbmFtZUVsID0gdGhpcy5EaXNwbGF5VGV4dChjaGFyRHJvcGRvd25EaXYsIDI1LCB0aGlzLmNoYXJhY3RlcnNbY3VycmVudExpbmUuc3BlYWtlckluZGV4XS5uYW1lKTtcblx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdFx0dGhpcy5NYWtlVmVydGljYWwobmFtZUVsKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlICE9PSAnUGhvdG9sYW5nJykge1xuXHRcdFx0XHRuYW1lRWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gc3BlYWtlci5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHRcdG5hbWVFbC5zdHlsZS5jb2xvciA9IHNwZWFrZXIuY29sb3I7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxpbmVJbnB1dCA9IHRoaXMuRGlzcGxheUxpbmVFZGl0KGxpbmVEaXYsIGN1cnJlbnRMaW5lKTtcblx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcblx0XHRcdFx0bGluZUlucHV0LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcblx0XHRcdFx0dGhpcy5NYWtlVmVydGljYWwobGluZUlucHV0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxpbmVJbnB1dC5zdHlsZS53aWR0aCA9ICcxMDAlJztcblx0XHRcdH1cblxuXHRcdFx0bGluZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjdXJyZW50TGluZS5jb250ZW50ID0gbGluZUlucHV0LnZhbHVlO1xuXHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgYWRkQnV0dG9uID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnKycgfSApO1xuXHRcdGFkZEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0dGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzLnB1c2gobmV3IERpYWxvZ3VlTGluZSgwKSk7XG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0XHRcdGF3YWl0IHRoaXMuTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudiwgbGluZXNEaXYpO1xuXHRcdH1cblx0fVxuXG5cdC8vIHByaXZhdGUgYXN5bmMgTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudjogU291cmNlQW5kVmF1bHQsIGxpbmVzRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHQvLyBcdGNvbnN0IGV4aXN0aW5nTGluZXNEaXYgPSBsaW5lc0Rpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0Ly8gXHRleGlzdGluZ0xpbmVzRGl2LnN0eWxlLm92ZXJmbG93WCA9ICdzY3JvbGwnO1xuXHQvLyBcdGNvbnN0IGZvbnRTaXplID0gJzE3LjVweCc7XG5cdC8vIFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXMubGVuZ3RoOyBpKyspIHtcblx0Ly8gXHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGk7XG5cdC8vIFx0XHRjb25zdCBjdXJyZW50TGluZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lc1tpXTtcblx0Ly8gXHRcdGNvbnN0IHNwZWFrZXJJbmRleCA9IGN1cnJlbnRMaW5lLnNwZWFrZXJJbmRleDtcblx0Ly8gXHRcdGNvbnN0IGN1cnJlbnRTcGVha2VyID0gdGhpcy5jaGFyYWN0ZXJzW3NwZWFrZXJJbmRleF07XG5cdC8vIFx0XHRjb25zdCBsaW5lRGl2ID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcblx0Ly8gXHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGxpbmVEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJy0nIH0gKTtcblx0Ly8gXHRcdGRlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSAnY2ZlLXJlbW92ZS1idXR0b24nO1xuXHQvLyBcdFx0ZGVsZXRlQnV0dG9uLnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcblx0Ly8gXHRcdGRlbGV0ZUJ1dHRvbi5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XG5cdC8vIFx0XHRkZWxldGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0Ly8gXHRcdFx0dGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzLnNwbGljZShjdXJyZW50SW5kZXgsIDEpO1xuXHQvLyBcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcblx0Ly8gXHRcdFx0YXdhaXQgdGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0VkaXQoc252LCBsaW5lc0Rpdik7XG5cdC8vIFx0XHR9XG5cdC8vIFx0XHRjb25zdCBpbmRleEVsZW1lbnQgPSBsaW5lRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnJyArICBjdXJyZW50SW5kZXggfSApO1xuXHQvLyBcdFx0aW5kZXhFbGVtZW50LnN0eWxlLmNvbG9yID0gY3VycmVudFNwZWFrZXIuY29sb3I7XG5cdC8vIFx0XHRpbmRleEVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdId2F5dVJlYWwnO1xuXHQvLyBcdFx0aW5kZXhFbGVtZW50LnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcblx0Ly8gXHRcdGluZGV4RWxlbWVudC5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XG5cdC8vIFx0XHRjb25zdCBjaGFyRHJvcGRvd25EaXYgPSBsaW5lRGl2LmNyZWF0ZURpdigpO1xuXHQvLyBcdFx0Y2hhckRyb3Bkb3duRGl2LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblx0Ly8gXHRcdGNvbnN0IGNoYXJEcm9wZG93biA9IGNoYXJEcm9wZG93bkRpdi5jcmVhdGVFbCgnYnV0dG9uJyk7XG5cdC8vIFx0XHRjaGFyRHJvcGRvd24uc3R5bGUuaGVpZ2h0ID0gJ2ZpdC1jb250ZW50Jztcblx0Ly8gXHRcdGNoYXJEcm9wZG93bi5vbmNsaWNrID0gKCkgPT4ge1xuXHQvLyBcdFx0XHRjb25zdCBzZWxlY3REaXYgPSBjaGFyRHJvcGRvd25EaXYuY3JlYXRlRGl2KCdoYm94Jyk7XG5cdC8vIFx0XHRcdHNlbGVjdERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdC8vIFx0XHRcdHNlbGVjdERpdi5zdHlsZS50b3AgPSAnMCUnO1xuXHQvLyBcdFx0XHRzZWxlY3REaXYuc3R5bGUubGVmdCA9ICcwJSc7XG5cdC8vIFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XG5cdC8vIFx0XHRcdFx0Y29uc3QgY3VycmVudENoYXJJbmRleCA9IGk7XG5cdC8vIFx0XHRcdFx0Y29uc3QgY3VycmVudENoYXIgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudENoYXJJbmRleF07XG5cdC8vIFx0XHRcdFx0Y29uc3QgY3VycmVudE9wdGlvbiA9IHNlbGVjdERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiBjdXJyZW50Q2hhci5uYW1lLCB2YWx1ZTogJycgKyBpIH0gKTtcblx0Ly8gXHRcdFx0XHRjdXJyZW50T3B0aW9uLnN0eWxlLmNvbG9yID0gY3VycmVudENoYXIuY29sb3I7XG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS5mb250RmFtaWx5ID0gJ0h3YXl1UmVhbCc7XG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjdXJyZW50Q2hhci5iYWNrZ3JvdW5kQ29sb3I7XG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS5oZWlnaHQgPSAnZml0LWNvbnRlbnQnO1xuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuekluZGV4ID0gJzInO1xuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0Ly8gXHRcdFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lc1tjdXJyZW50SW5kZXhdLnNwZWFrZXJJbmRleCA9IGN1cnJlbnRDaGFySW5kZXg7XG5cdC8vIFx0XHRcdFx0XHRjb25zdCBuZXdTcGVha2VyQ29sb3IgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudENoYXJJbmRleF0uY29sb3I7XG5cdC8vIFx0XHRcdFx0XHRjb25zdCBuZXdCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudENoYXJJbmRleF0uYmFja2dyb3VuZENvbG9yO1xuXHQvLyBcdFx0XHRcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmNvbG9yID0gbmV3U3BlYWtlckNvbG9yO1xuXHQvLyBcdFx0XHRcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG5ld0JhY2tncm91bmRDb2xvcjtcblx0Ly8gXHRcdFx0XHRcdGNoYXJEcm9wZG93bi50ZXh0Q29udGVudCA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50Q2hhckluZGV4XS5uYW1lO1xuXHQvLyBcdFx0XHRcdFx0bGluZUlucHV0LnN0eWxlLmNvbG9yID0gbmV3U3BlYWtlckNvbG9yO1xuXHQvLyBcdFx0XHRcdFx0bGluZUlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG5ld0JhY2tncm91bmRDb2xvcjtcblx0Ly8gXHRcdFx0XHRcdGluZGV4RWxlbWVudC5zdHlsZS5jb2xvciA9IG5ld1NwZWFrZXJDb2xvcjtcblx0Ly8gXHRcdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHQvLyBcdFx0XHRcdFx0c2VsZWN0RGl2LnJlbW92ZSgpO1xuXHQvLyBcdFx0XHRcdH1cblx0Ly8gXHRcdFx0fVxuXHQvLyBcdFx0fVxuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnRleHRDb250ZW50ID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRMaW5lLnNwZWFrZXJJbmRleF0ubmFtZTtcblx0Ly8gXHRcdGNoYXJEcm9wZG93bi5zdHlsZS5jb2xvciA9IGN1cnJlbnRTcGVha2VyLmNvbG9yO1xuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGN1cnJlbnRTcGVha2VyLmJhY2tncm91bmRDb2xvcjtcblx0Ly8gXHRcdGNoYXJEcm9wZG93bi5zdHlsZS5mb250RmFtaWx5ID0gJ0h3YXl1UmVhbCc7XG5cdC8vIFx0XHRjaGFyRHJvcGRvd24uc3R5bGUud3JpdGluZ01vZGUgPSAndmVydGljYWwtbHInO1xuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0Jztcblx0Ly8gXHRcdGNvbnN0IGxpbmVJbnB1dCA9IGxpbmVEaXYuY3JlYXRlRWwoJ3RleHRhcmVhJyk7XG5cdC8vIFx0XHRsaW5lSW5wdXQuc3BlbGxjaGVjayA9IGZhbHNlO1xuXHQvLyBcdFx0bGluZUlucHV0LnN0eWxlLm92ZXJmbG93WCA9ICdzY3JvbGwnO1xuXHQvLyBcdFx0bGluZUlucHV0LnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XG5cdC8vIFx0XHRsaW5lSW5wdXQuZGVmYXVsdFZhbHVlID0gY3VycmVudExpbmUuY29udGVudDtcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5jb2xvciA9IGN1cnJlbnRTcGVha2VyLmNvbG9yO1xuXHQvLyBcdFx0bGluZUlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGN1cnJlbnRTcGVha2VyLmJhY2tncm91bmRDb2xvcjtcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5mb250RmFtaWx5ID0gJ0h3YXl1UmVhbCc7XG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZTtcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cdC8vIFx0XHRsaW5lSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG5cdC8vIFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lc1tjdXJyZW50SW5kZXhdLmNvbnRlbnQgPSBsaW5lSW5wdXQudmFsdWU7XG5cdC8vIFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xuXHQvLyBcdFx0fVxuXHQvLyBcdH1cblx0Ly8gXHRjb25zdCBhZGRCdXR0b24gPSBleGlzdGluZ0xpbmVzRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICcrJyB9ICk7XG5cdC8vIFx0YWRkQnV0dG9uLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcblx0Ly8gXHRhZGRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0Ly8gXHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5wdXNoKG5ldyBEaWFsb2d1ZUxpbmUoMCkpO1xuXHQvLyBcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XG5cdC8vIFx0XHRhd2FpdCB0aGlzLkxvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnYsIGxpbmVzRGl2KTtcblx0Ly8gXHR9XG5cdC8vIH1cblxuXHRwcml2YXRlIGFzeW5jIExvYWREaWFsb2d1ZUxpbmVzRGlzcGxheU9ubHkobGluZXNEaXY6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0bGluZXNEaXYuZW1wdHkoKTtcblxuXHRcdGNvbnN0IHNwZWFrRGl2ID0gbGluZXNEaXYuY3JlYXRlRGl2KCk7XG5cdFx0c3BlYWtEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdHNwZWFrRGl2LnN0eWxlLnRvcCA9ICcwcHgnO1xuXHRcdHNwZWFrRGl2LnN0eWxlLmxlZnQgPSAnMHB4JztcblxuXHRcdGNvbnN0IGV4aXN0aW5nTGluZXNEaXYgPSBsaW5lc0Rpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcblx0XHRleGlzdGluZ0xpbmVzRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICdoYm94JyA6ICd2Ym94JyA7XG5cdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xuXHRcdFx0ZXhpc3RpbmdMaW5lc0Rpdi5zdHlsZS5vdmVyZmxvd1ggPSAnc2Nyb2xsJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhpc3RpbmdMaW5lc0Rpdi5zdHlsZS5vdmVyZmxvd1kgPSAnc2Nyb2xsJztcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY3VycmVudExpbmUgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbaV07XG5cdFx0XHRjb25zdCBzcGVha2VyID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRMaW5lLnNwZWFrZXJJbmRleF07XG5cdFx0XHRcblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlID09PSAnUGhvdG9sYW5nJykge1xuXHRcdFx0XHRjb25zdCBwbGF5QnV0dG9uID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHUyNUI3JyB9ICk7XG5cdFx0XHRcdHBsYXlCdXR0b24ub25jbGljayA9ICgpID0+IHtcblx0XHRcdFx0XHRjb25zdCBwb3B1cCA9IHNwZWFrRGl2LmNyZWF0ZURpdigpO1xuXHRcdFx0XHRcdHBvcHVwLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS50b3AgPSAnMHB4Jztcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS5sZWZ0ID0gJzBweCc7XG5cdFx0XHRcdFx0Y29uc3QgcGhvdG9saW5lID0gbmV3IFBob3RvTGluZShjdXJyZW50TGluZS5jb250ZW50KTtcblx0XHRcdFx0XHRwaG90b2xpbmUuU3BlYWsocG9wdXAsIDIwMCwgWzEwMCwgMjUwLCA1MDBdLCBbMCwgNTAwXSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG5hbWVEaXYgPSBleGlzdGluZ0xpbmVzRGl2LmNyZWF0ZURpdignJyk7XG5cdFx0XHRuYW1lRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICd2Ym94JyA6ICdoYm94Jztcblx0XHRcdGNvbnN0IGxpbmVEaXYgPSBleGlzdGluZ0xpbmVzRGl2LmNyZWF0ZURpdignJyk7XG5cdFx0XHRsaW5lRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICd2Ym94JyA6ICdoYm94JztcblxuXHRcdFx0Y29uc3QgbmFtZUVsID0gdGhpcy5EaXNwbGF5VGV4dChuYW1lRGl2LCAyNSwgc3BlYWtlci5uYW1lKTtcblx0XHRcdG5hbWVFbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzcGVha2VyLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdG5hbWVFbC5zdHlsZS5jb2xvciA9IHNwZWFrZXIuY29sb3I7XG5cdFx0XHRcblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlID09PSAnUGhvdG9sYW5nJykge1xuXHRcdFx0XHRjb25zdCBwaG90b0xpbmUgPSBuZXcgUGhvdG9MaW5lKGN1cnJlbnRMaW5lLmNvbnRlbnQpO1xuXHRcdFx0XHRwaG90b0xpbmUuRGlzcGxheVN0YXRpYyhsaW5lRGl2LCAyNSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCBsaW5lRWwgPSB0aGlzLkRpc3BsYXlUZXh0KGxpbmVEaXYsIDI1LCBjdXJyZW50TGluZS5jb250ZW50KTtcblx0XHRcdFx0bGluZUVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHNwZWFrZXIuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRsaW5lRWwuc3R5bGUuY29sb3IgPSBzcGVha2VyLmNvbG9yO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodGhpcy5sYW5ndWFnZSA9PT0gJ1Bob3RvbGFuZycpIHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRMaW5lID0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzW2ldO1xuXG5cdFx0XHRcdGNvbnN0IG5hbWVEaXYgPSBzcGVha0Rpdi5jcmVhdGVEaXYoKTtcblx0XHRcdFx0bmFtZURpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0XHRcdG5hbWVEaXYuc3R5bGUudG9wID0gJzBweCc7XG5cdFx0XHRcdG5hbWVEaXYuc3R5bGUubGVmdCA9ICcwcHgnO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29uc3QgcGhvdG9OYW1lID0gbmV3IFBob3RvTGluZSh0aGlzLmNoYXJhY3RlcnNbY3VycmVudExpbmUuc3BlYWtlckluZGV4XS5uYW1lKTtcblx0XHRcdFx0YXdhaXQgcGhvdG9OYW1lLlNwZWFrKG5hbWVEaXYsIDEwMCwgWzEwMCwgMjUwLCA1MDBdLCBbMCwgNTAwXSwgZmFsc2UpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29uc3QgcG9wdXAgPSBzcGVha0Rpdi5jcmVhdGVEaXYoKTtcblx0XHRcdFx0cG9wdXAuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdFx0XHRwb3B1cC5zdHlsZS50b3AgPSAnMHB4Jztcblx0XHRcdFx0cG9wdXAuc3R5bGUubGVmdCA9ICcwcHgnO1xuXG5cdFx0XHRcdGNvbnN0IHBob3RvTGluZSA9IG5ldyBQaG90b0xpbmUoY3VycmVudExpbmUuY29udGVudCk7XG5cdFx0XHRcdGF3YWl0IHBob3RvTGluZS5TcGVhayhwb3B1cCwgMjAwLCBbMTAwLCAyNTAsIDUwMF0sIFswLCA1MDBdLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cbn1cblxuY2xhc3MgUGFnZSB7XG5cdG1lZGlhRmlsZUlEOiBudW1iZXI7XG5cdGxpbmVzOiBEaWFsb2d1ZUxpbmVbXTtcblx0bWVkaWFTaXplUGVyY2VudGFnZTogbnVtYmVyO1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLm1lZGlhRmlsZUlEID0gLTE7XG5cdFx0dGhpcy5saW5lcyA9IFtdO1xuXHRcdHRoaXMubWVkaWFTaXplUGVyY2VudGFnZSA9IDUwO1xuXHR9XG59XG5cbmNsYXNzIERpYWxvZ3VlTGluZSB7XG5cdHNwZWFrZXJJbmRleDogbnVtYmVyO1xuXHRjb250ZW50OiBzdHJpbmc7XG5cdGNvbnN0cnVjdG9yKHNwZWFrZXJJbmRleDogbnVtYmVyKSB7XG5cdFx0dGhpcy5zcGVha2VySW5kZXggPSBzcGVha2VySW5kZXg7XG5cdFx0dGhpcy5jb250ZW50ID0gJyc7XG5cdH1cbn1cblxuY2xhc3MgQ2hhcmFjdGVyIHtcblx0bmFtZTogc3RyaW5nO1xuXHRjb2xvcjogc3RyaW5nO1xuXHRiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcblx0Y29uc3RydWN0b3IobmFtZSA9ICcnLCBjb2xvciA9ICd3aGl0ZScsIGJhY2tncm91bmRDb2xvciA9ICd3aGl0ZScpIHtcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblx0XHR0aGlzLmJhY2tncm91bmRDb2xvciA9IGJhY2tncm91bmRDb2xvcjtcblx0fVxufVxuIiwgImltcG9ydCB7IFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IFNvdXJjZUZvbGRlciB9IGZyb20gXCIuL3NvdXJjZS1mb2xkZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTb3VyY2VBbmRWYXVsdCB7XHJcblx0c291cmNlRm9sZGVyOiBTb3VyY2VGb2xkZXI7XHJcblx0dmF1bHQ6IFZhdWx0O1xyXG5cdGNvbnN0cnVjdG9yKHNvdXJjZUZvbGRlcjogU291cmNlRm9sZGVyLCB2YXVsdDogVmF1bHQpIHtcclxuXHRcdHRoaXMuc291cmNlRm9sZGVyID0gc291cmNlRm9sZGVyO1xyXG5cdFx0dGhpcy52YXVsdCA9IHZhdWx0O1xyXG5cdH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7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QUFBQSxJQUNEO0FBQ0EsVUFBTSxLQUFLLGFBQWEsRUFBRSxNQUFNLFdBQVcsUUFBUSxLQUFLLENBQUM7QUFHekQsY0FBVSxXQUFXLElBQUk7QUFBQSxFQUMxQjtBQUNEO0FBRUEsSUFBTSxtQkFBTixjQUErQixrQ0FBaUI7QUFBQSxFQUcvQyxZQUFZLEtBQVUsUUFBYTtBQUNsQyxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNmO0FBQUEsRUFFQSxVQUFnQjtBQUNmLFVBQU0sRUFBQyxZQUFXLElBQUk7QUFFdEIsZ0JBQVksTUFBTTtBQUVsQixRQUFJLHlCQUFRLFdBQVcsRUFDckIsUUFBUSxxQkFBcUIsRUFDN0IsUUFBUSw2REFBNkQsRUFDckUsUUFBUSxVQUFRLEtBQ2YsZUFBZSxxQkFBcUIsRUFDcEMsU0FBUyxLQUFLLE9BQU8sU0FBUyxXQUFXLEVBQ3pDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLFdBQUssT0FBTyxTQUFTLGNBQWM7QUFDbkMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2hDLENBQUMsQ0FBQztBQUFBLEVBQ0w7QUFDRDsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImkiLCAiaW1wb3J0X29ic2lkaWFuIl0KfQo=
