/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CFE
});
module.exports = __toCommonJS(main_exports);

// classes/custom-explorer-view.ts
var import_obsidian4 = require("obsidian");

// classes/source-folder.ts
var import_obsidian3 = require("obsidian");

// classes/cfe-file.ts
var import_obsidian = require("obsidian");
var _CFEFile = class {
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.CreateNew() instead.
   * 
   * CHILD CLASSES SHOULD NOT WRITE TO A FILE. THIS IS DONE INSIDE OF CFEFileHandler
   * 
   * CFEFile layer:
   * 
   * sets the source, id, file type, file name, and parent folder id of the file object.
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const sourceFolder = snv.sourceFolder;
    const unfinishedFile = new _CFEFile();
    unfinishedFile.id = sourceFolder.fileCount;
    unfinishedFile.fileType = fileType;
    unfinishedFile.fileName = "";
    unfinishedFile.parentFolderID = parentFolderID;
    sourceFolder.fileCount++;
    await SourceFolder.Save(snv);
    if (unfinishedFile.id !== unfinishedFile.parentFolderID) {
      const parentFolder = await CFEFileHandler.LoadFile(snv, unfinishedFile.parentFolderID);
      parentFolder.containedFileIDs.push(unfinishedFile.id);
      await parentFolder.Save(snv);
    }
    return unfinishedFile;
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.DisplayThumbnail() instead.
   * 
   * CFEFile layer:
   * 
   * sets the thumbnail container's css class to 'cfe-thumbnail'
   * and fully displays the file if the thumbnail is clicked.
   */
  async DisplayThumbnail(sourceAndVault, thumbnailDiv, displayDiv) {
    thumbnailDiv.className = "cfe-thumbnail vbox";
    thumbnailDiv.onclick = async () => {
      await this.Display(sourceAndVault, displayDiv);
    };
    const idText = thumbnailDiv.createDiv("hbox");
    idText.textContent = "ID: " + this.id;
    idText.style.justifyContent = "center";
    const fileText = thumbnailDiv.createDiv("hbox");
    fileText.textContent = "File Type: " + this.fileType;
    fileText.style.justifyContent = "center";
    const nameText = thumbnailDiv.createDiv("hbox");
    nameText.textContent = "File Name: " + this.fileName;
    nameText.style.justifyContent = "center";
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * Use CFEFileHandler.Display() instead.
   * 
   * CFEFile layer:
   * 
   * empties the display container provided.
   */
  async Display(snv, container) {
    container.empty();
    const headerContainer = container.createDiv("hbox");
    const backButton = headerContainer.createEl("button", { text: "Back to parent folder" });
    headerContainer.createEl("p", { text: "File ID: " + this.id });
    headerContainer.createEl("p", { text: "File Name: " });
    const nameInput = headerContainer.createEl("input", { type: "text", value: this.fileName });
    backButton.onclick = async () => {
      const parentFolder = await CFEFileHandler.LoadFile(snv, this.parentFolderID);
      if (parentFolder !== null) {
        await parentFolder.Display(snv, container);
      }
    };
    nameInput.onchange = async () => {
      this.fileName = nameInput.value;
      await this.Save(snv);
    };
  }
  /**
   * SHOULD NOT BE CALLED OUTSIDE OF CFEFileHandler.
   * 
   * (it is unlikely this method will ever be overriden by child classes, but making this 'inaccessible' is for consistency)
   * 
   * Use CFEFileHandler.SaveFile() instead.
   * 
   * Formatted File layer:
   * 
   * Deletes this file ID from the original parent folder, adds this file to the new parent folder, and changes the parent folder ID
   */
  async MoveFile(sourceAndVault, newParentFolderID) {
    const oldParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, this.parentFolderID);
    const indexOfFile = oldParentFolder.containedFileIDs.indexOf(this.id);
    oldParentFolder.containedFileIDs.splice(indexOfFile, 1);
    oldParentFolder.Save(sourceAndVault);
    const newParentFolder = await CFEFileHandler.LoadFile(sourceAndVault, newParentFolderID);
    newParentFolder.containedFileIDs.push(this.id);
    newParentFolder.Save(sourceAndVault);
    this.parentFolderID = newParentFolderID;
    this.Save(sourceAndVault);
  }
  async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const filePath = sourceFolder.vaultPath + "/" + this.id + ".json";
    const jsonData = JSON.stringify(this);
    const tFile = vault.getFileByPath(filePath);
    if (tFile === null) {
      const normalizedPath = (0, import_obsidian.normalizePath)(filePath);
      await vault.adapter.write(normalizedPath, jsonData);
      return;
    }
    await vault.modify(tFile, jsonData);
  }
};
var CFEFile = _CFEFile;
CFEFile.FILE_NAME_INPUT_INDEX = 0;
CFEFile.PARENT_FOLDER_ID_INPUT_INDEX = 1;

// classes/single-media-file.ts
var import_obsidian2 = require("obsidian");

// classes/real-file.ts
var RealFile = class extends CFEFile {
  async DisplayMediaOnly(mediaDiv, snv) {
    mediaDiv.empty();
  }
};

// classes/single-media-file.ts
var SingleMediaFile = class extends RealFile {
  get mediaType() {
    switch (this.extensionName) {
      case "png":
      case "jpg":
      case "webp":
      case "heic":
      case "gif":
        return "Image";
      case "mp4":
      case "MP4":
      case "mov":
      case "MOV":
      default:
        return "Video";
    }
  }
  async getSrc(snv) {
    const mediaFile = await this.getTFile(snv);
    const arrayBuffer = await snv.vault.readBinary(mediaFile);
    const blob = new Blob([arrayBuffer]);
    const mediaUrl = URL.createObjectURL(blob);
    return mediaUrl;
  }
  async getTFile(snv) {
    const mediaPath = await this.getPath(snv);
    let mediaFile = snv.vault.getFileByPath(mediaPath);
    if (mediaFile === null) {
      mediaFile = snv.vault.getFileByPath(mediaPath + "." + this.extensionName);
      if (mediaFile === null) {
        throw Error("File not found at path: " + mediaPath + " or " + mediaPath + "." + this.extensionName);
      }
      snv.vault.rename(mediaFile, mediaPath);
    }
    return mediaFile;
  }
  async getPath(snv) {
    const sourceFolder = snv.sourceFolder;
    return sourceFolder.vaultPath + "/" + this.id + " Actual File";
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    newMediaFile.extensionName = "";
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change file" });
    const newFileInput = imageDisplayContainer.createEl("input", { type: "file" });
    await this.DisplayMediaOnly(imageDisplayContainer, snv);
    newFileInput.onchange = async () => {
      try {
        const oldFile = await this.getTFile(snv);
        try {
          await snv.vault.delete(oldFile);
        } finally {
          await this.SaveNewFile(snv, newFileInput);
          this.Display(snv, container);
        }
      } catch (e) {
        console.log();
      }
    };
  }
  async SaveNewFile(snv, fileInput) {
    const fileArray = fileInput.files;
    if (fileArray === null) {
      throw Error("no file was selected");
    }
    const mediaFile = fileArray[0];
    await this.SetFileTo(snv, mediaFile);
  }
  async SetFileTo(snv, mediaFile) {
    const partsOfPath = mediaFile.name.split(".");
    const extension = partsOfPath[partsOfPath.length - 1];
    this.fileName = partsOfPath[0];
    this.extensionName = extension;
    const path = snv.sourceFolder.vaultPath + "/" + this.id + " Actual File";
    const normalizedPath = (0, import_obsidian2.normalizePath)(path);
    await snv.vault.adapter.writeBinary(normalizedPath, await mediaFile.arrayBuffer());
    await this.Save(snv);
  }
  async DisplayMediaOnly(mediaDiv, snv) {
    await super.DisplayMediaOnly(mediaDiv, snv);
    if (this.mediaType === "Image") {
      const imageElement = mediaDiv.createEl("img");
      imageElement.src = await this.getSrc(snv);
      imageElement.style.objectFit = "contain";
    } else {
      const videoElement = mediaDiv.createEl("video");
      videoElement.src = await this.getSrc(snv);
      videoElement.controls = true;
      videoElement.loop = true;
      videoElement.autoplay = true;
      videoElement.style.objectFit = "contain";
    }
  }
};

// classes/folder.ts
var Folder = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    unfinishedFolder.containedFileIDs = [];
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const createButtonsDiv = mainDiv.createDiv("hbox");
    const newFileButton = createButtonsDiv.createEl("button", { text: "Create New File" });
    newFileButton.onclick = () => {
      this.LoadCreateFileUI(snv, mainDiv);
    };
    const mediaFilesButton = createButtonsDiv.createEl("button", { text: "Upload Multiple Images / Videos" });
    mediaFilesButton.onclick = () => {
      this.LoadFileSelectionUI(snv, mainDiv);
    };
    const folderDisplayContainer = mainDiv.createDiv("cfe-grid");
    for (let i = 0; i < this.containedFileIDs.length; i++) {
      const containedFile = await CFEFileHandler.LoadFile(snv, this.containedFileIDs[i]);
      if (containedFile !== null) {
        await containedFile.DisplayThumbnail(snv, folderDisplayContainer.createDiv(), mainDiv);
      }
    }
  }
  LoadCreateFileUI(snv, mainDiv) {
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    const wrapperDiv = popUpContainer.createDiv();
    wrapperDiv.style.position = "relative";
    const exitButton = wrapperDiv.createEl("button", { text: "X", cls: "cfe-remove-button" });
    exitButton.style.position = "absolute";
    exitButton.style.top = "0%";
    exitButton.style.right = "0%";
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    popUpContainer.createEl("p", { text: "Choose a File Type to create: " });
    const fileTypeDropdown = popUpContainer.createEl("select");
    popUpContainer.createEl("p", { text: "Parent Folder ID: " });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    for (let i = 0; i < CFEFileHandler.KnownFileTypes.length; i++) {
      const option = fileTypeDropdown.createEl("option");
      option.value = CFEFileHandler.KnownFileTypes[i];
      option.text = CFEFileHandler.KnownFileTypes[i];
      fileTypeDropdown.options.add(option);
    }
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      await CFEFileHandler.CreateNew(snv, fileTypeDropdown.value, parseInt(parentFolderIDInput.value));
      exitButton.click();
      const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
      await resettedFolder.Display(snv, mainDiv);
    };
  }
  LoadFileSelectionUI(snv, mainDiv) {
    const popUpContainer = mainDiv.createDiv("vbox cfe-popup");
    popUpContainer.createEl("p", { text: "Choose your files" });
    const fileInput = popUpContainer.createEl("input", { type: "file" });
    fileInput.multiple = true;
    popUpContainer.createEl("p", { text: "Parent Folder ID: " });
    const parentFolderIDInput = popUpContainer.createEl("input", { type: "text", value: "" + this.id });
    const exitButton = popUpContainer.createEl("button", { text: "X", cls: "cfe-exit-button" });
    exitButton.onclick = () => {
      popUpContainer.remove();
    };
    const submitButton = popUpContainer.createEl("button", { text: "Create" });
    submitButton.onclick = async () => {
      const fileArray = fileInput.files;
      const parentFolderID = parseInt(parentFolderIDInput.value);
      if (fileArray !== null) {
        for (let i = 0; i < fileArray.length; i++) {
          const cfeFile = await CFEFileHandler.CreateNew(snv, "Single Media File", parentFolderID);
          const mediaFile = Object.assign(new SingleMediaFile(), cfeFile);
          await mediaFile.SetFileTo(snv, fileArray[i]);
          await mediaFile.Save(snv);
        }
        exitButton.click();
        const resettedFolder = await CFEFileHandler.LoadFile(snv, this.id);
        await resettedFolder.Display(snv, mainDiv);
      }
    };
  }
};

// classes/playlist.ts
var Playlist = class extends CFEFile {
  static getNextVideoIDInOrder(playlist) {
    let nextVideoIndex = playlist.currentVideoIndex + 1;
    if (nextVideoIndex >= playlist.videoIDs.length) {
      nextVideoIndex = 0;
    }
    return nextVideoIndex;
  }
  static getNextVideoIDShuffled(playlist) {
    let nextVideoIndex = Math.random() * playlist.videoIDs.length;
    nextVideoIndex = Math.floor(nextVideoIndex);
    return nextVideoIndex;
  }
  static async loadNextVideo(sourceAndVault, playlist, videoElement) {
    if (playlist.videoOrder === "shuffled") {
      playlist.currentVideoIndex = Playlist.getNextVideoIDShuffled(playlist);
    } else {
      playlist.currentVideoIndex = Playlist.getNextVideoIDInOrder(playlist);
    }
    const nextVideo = await CFEFileHandler.LoadFile(sourceAndVault, playlist.videoIDs[playlist.currentVideoIndex]);
    videoElement.src = await nextVideo.getSrc(sourceAndVault);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const newPlaylistFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    newPlaylistFile.videoIDs = [];
    return newPlaylistFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    this.currentVideoIndex = 0;
    const videoDisplayContainer = container.createDiv("cfe-display-video");
    const videoElement = videoDisplayContainer.createEl("video");
    const buttonsContainer = container.createDiv("hbox");
    const hideButton = buttonsContainer.createEl("button", { text: "hide video" });
    hideButton.onclick = () => {
      if (hideButton.textContent === "hide video") {
        hideButton.textContent = "show video";
        videoElement.style.display = "none";
      } else {
        hideButton.textContent = "hide video";
        videoElement.style.display = "flex";
      }
    };
    const shuffleButton = buttonsContainer.createEl("button", { text: "shuffle" });
    this.videoOrder = "in order";
    shuffleButton.onclick = () => {
      if (shuffleButton.textContent === "shuffle") {
        shuffleButton.textContent = "go in order";
        this.videoOrder = "shuffled";
      } else {
        shuffleButton.textContent = "shuffle";
        this.videoOrder = "in order";
      }
    };
    const nextButton = buttonsContainer.createEl("button", { text: "next video" });
    nextButton.onclick = async () => {
      await Playlist.loadNextVideo(snv, this, videoElement);
    };
    try {
      const firstVideo = await CFEFileHandler.LoadFile(snv, this.videoIDs[this.currentVideoIndex]);
      videoElement.src = await firstVideo.getSrc(snv);
      videoElement.autoplay = true;
      videoElement.controls = true;
      videoElement.ontimeupdate = async () => {
        if (videoElement.ended) {
          await Playlist.loadNextVideo(snv, this, videoElement);
        }
      };
    } finally {
      container.createEl("p", { text: "Change files" });
      let count = 0;
      const mediaIDInputDiv = container.createDiv("vbox");
      const newFileButton = container.createEl("button", { text: "Add File" });
      for (let i = 0; i < this.videoIDs.length; i++) {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.videoIDs[currentIndex] });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      }
      newFileButton.onclick = () => {
        const currentIndex = count;
        count++;
        const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
        const idInput = mediaIDDiv.createEl("input", { type: "text" });
        const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
        deleteButton.onclick = () => {
          mediaIDDiv.remove();
          this.videoIDs.splice(currentIndex, 1);
          this.Display(snv, container);
        };
        idInput.onchange = () => {
          this.videoIDs[currentIndex] = parseInt(idInput.value);
          this.Save(snv);
        };
      };
    }
  }
};

// classes/variant-media-file.ts
var VariantMediaFile = class extends RealFile {
  async getSrc(snv, index = null) {
    if (index === null) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    return await containedMedia.getSrc(snv);
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const newMediaFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    newMediaFile.variantIDs = [];
    return newMediaFile;
  }
  async Display(snv, container) {
    await super.Display(snv, container);
    const imageDisplayContainer = container.createDiv("vbox");
    imageDisplayContainer.createEl("p", { text: "Change files" });
    const mediaIDInputDiv = imageDisplayContainer.createDiv("vbox");
    const newFileButton = imageDisplayContainer.createEl("button", { text: "Add File" });
    for (let i = 0; i < this.variantIDs.length; i++) {
      const currentIndex = i;
      const mediaIDDiv = mediaIDInputDiv.createDiv("hbox");
      const idInput = mediaIDDiv.createEl("input", { type: "text", value: "" + this.variantIDs[currentIndex] });
      const deleteButton = mediaIDDiv.createEl("button", { text: "delete" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        mediaIDDiv.remove();
        this.variantIDs.splice(currentIndex, 1);
        await this.Save(snv);
        await this.Display(snv, container);
      };
      idInput.onchange = async () => {
        this.variantIDs[currentIndex] = parseInt(idInput.value);
        await this.Save(snv);
        await this.Display(snv, container);
      };
    }
    newFileButton.onclick = async () => {
      this.variantIDs.push(-1);
      await this.Save(snv);
      await this.Display(snv, container);
    };
    const mediaDiv = imageDisplayContainer.createDiv("vbox");
    await this.DisplayMediaOnly(mediaDiv, snv);
  }
  async DisplayMediaOnly(mediaDiv, snv, index = -1) {
    if (index === -1) {
      index = Math.floor(Math.random() * this.variantIDs.length);
    }
    const containedMedia = await CFEFileHandler.LoadFile(snv, this.variantIDs[index]);
    await containedMedia.DisplayMediaOnly(mediaDiv, snv);
  }
};

// classes/source-folder-shortcut.ts
var SourceFolderShortcut = class extends CFEFile {
  /**
   * @override Folder layer:
   * 
   * initializes the contained file ids array for the folder object
   */
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const unfinishedFolder = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    unfinishedFolder.pathToOtherSource = "";
    return unfinishedFolder;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const inputDiv = mainDiv.createDiv("vbox");
    inputDiv.createEl("p", { text: "Path to Other Source Folder" });
    const pathInput = inputDiv.createEl("input", { type: "text" });
    const goButton = inputDiv.createEl("button", { text: "Go" });
    pathInput.onchange = async () => {
      this.pathToOtherSource = pathInput.value;
      await this.Save(snv);
    };
    goButton.onclick = async () => {
      const otherSource = await SourceFolder.CreateOrLoadSourceFolder(this.pathToOtherSource, snv.vault);
      otherSource.Display(mainDiv, snv.vault);
    };
  }
};

// classes/conlangs/hwayu-text.ts
var Hwayu = class {
  static Display(div, text = "", fontSize = 20, isVertical = true) {
    const textElement = div.createEl("p", { text });
    textElement.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textElement.style.fontSize = fontSize + "px";
    if (isVertical) {
      textElement.style.writingMode = "vertical-lr";
      textElement.style.textOrientation = "upright";
    }
    return textElement;
  }
  static CreateTextArea(div, existingText = "", fontSize = 20, isVertical = true) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textArea.style.fontSize = fontSize + "px";
    if (isVertical) {
      textArea.style.writingMode = "vertical-lr";
      textArea.style.textOrientation = "upright";
    }
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 20, isVertical = true) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontFamily = isVertical ? "HwayuReal" : "HwayuHorizontal";
    textInput.style.fontSize = fontSize + "px";
    if (isVertical) {
      textInput.style.writingMode = "vertical-lr";
      textInput.style.textOrientation = "upright";
    }
    textInput.spellcheck = false;
    return textInput;
  }
};

// classes/conlangs/photolang-text.ts
var PhotoLang = class {
  static Display(div, text = "", fontSize = 10, moveSpeeds = null, durations = null, doLoop = false) {
    const line = new PhotoLine(text);
    if (!moveSpeeds) {
      moveSpeeds = [100, 250, 500];
    }
    if (!durations) {
      durations = [0, 500];
    }
    const displayDiv = div.createDiv();
    line.Speak(displayDiv, fontSize, moveSpeeds, durations, doLoop);
    return displayDiv;
  }
  static CreateTextArea(div, existingText = "", fontSize = 17.5) {
    const textArea = div.createEl("textarea", { text: existingText });
    textArea.style.fontSize = fontSize + "px";
    textArea.spellcheck = false;
    return textArea;
  }
  static CreateTextInput(div, existingText = "", fontSize = 17.5) {
    const textInput = div.createEl("input", { type: "text", value: existingText });
    textInput.style.fontSize = fontSize + "px";
    textInput.spellcheck = false;
    return textInput;
  }
};
var PhotoLine = class {
  constructor(textContent = "") {
    this.glyphs = [];
    const textArray = textContent.split("   ").filter((c) => c !== "");
    let doSpace = false;
    for (let i = 0; i < textArray.length; i++) {
      const newGlyph = new PhotoGlyph();
      const glyphText = textArray[i];
      if (glyphText === "|||") {
        newGlyph.hue = 0;
        newGlyph.saturation = 0;
        newGlyph.value = 0;
        newGlyph.opacity = 0;
        newGlyph.moveSpeed = 0;
        newGlyph.duration = 0;
        newGlyph.x = this.glyphs[this.glyphs.length - 1].x;
        newGlyph.y = this.glyphs[this.glyphs.length - 1].y;
        doSpace = true;
      } else {
        let j = 0;
        let skipNext = false;
        switch (glyphText[j]) {
          case ".":
            newGlyph.moveSpeed = 0;
            break;
          case "-":
            newGlyph.moveSpeed = 1;
            break;
          case "=":
            newGlyph.moveSpeed = 2;
            break;
        }
        j++;
        switch (glyphText[j]) {
          case ".":
            newGlyph.duration = 0;
            break;
          case "-":
            newGlyph.duration = 1;
            break;
        }
        j++;
        newGlyph.shape = glyphText[j];
        j++;
        let hue1 = 0;
        switch (glyphText[j]) {
          case "r":
            hue1 = 0;
            break;
          case "o":
            hue1 = 40;
            break;
          case "y":
            hue1 = 60;
            break;
          case "g":
            hue1 = 120;
            break;
          case "c":
            hue1 = 180;
            break;
          case "b":
            hue1 = 240;
            break;
          case "p":
            hue1 = 270;
            break;
          case ".":
            newGlyph.hue = 0;
            newGlyph.saturation = 0;
            skipNext = true;
            break;
        }
        j++;
        if (!skipNext) {
          let hue2 = 0;
          switch (glyphText[j]) {
            case "r":
              hue2 = 0;
              break;
            case "o":
              hue2 = 40;
              break;
            case "y":
              hue2 = 60;
              break;
            case "g":
              hue2 = 120;
              break;
            case "c":
              hue2 = 180;
              break;
            case "b":
              hue2 = 240;
              break;
            case "p":
              hue2 = 270;
              break;
            default:
              newGlyph.hue = hue1;
              skipNext = true;
              break;
          }
          if (!skipNext) {
            if (hue1 === 0 && hue2 === 270 || hue1 === 270 && hue2 === 0) {
              newGlyph.hue = 315;
            } else {
              newGlyph.hue = (hue1 + hue2) / 2;
            }
            j++;
          }
        }
        skipNext = false;
        const saturationText = glyphText[j];
        switch (saturationText) {
          case "0":
            newGlyph.saturation = 0;
            break;
          case "1":
            newGlyph.saturation = 0.25;
            break;
          case "2":
            newGlyph.saturation = 0.5;
            break;
          case "3":
            newGlyph.saturation = 0.75;
            break;
          case "4":
            newGlyph.saturation = 1;
            break;
        }
        j++;
        const valueText = glyphText[j];
        switch (valueText) {
          case "0":
            newGlyph.value = 0;
            break;
          case "1":
            newGlyph.value = 0.1;
            break;
          case "2":
            newGlyph.value = 0.2;
            break;
          case "3":
            newGlyph.value = 0.5;
            break;
          case "4":
            newGlyph.value = 1;
            break;
        }
        j++;
        const opacityText = glyphText[j];
        switch (opacityText) {
          case ".":
            newGlyph.opacity = 0;
            break;
          case "-":
            newGlyph.opacity = 0.5;
            break;
          case "=":
            newGlyph.opacity = 1;
            break;
        }
        j++;
        const locationInfo = glyphText.substring(j);
        if (locationInfo.contains("<")) {
          newGlyph.x = 0;
        } else if (locationInfo.contains(">")) {
          newGlyph.x = 2;
        } else {
          newGlyph.x = 1;
        }
        if (locationInfo.contains("v")) {
          newGlyph.y = 0;
        } else if (locationInfo.contains("^")) {
          newGlyph.y = 2;
        } else {
          newGlyph.y = 1;
        }
        if (doSpace) {
          const emptyGlyph = new PhotoGlyph();
          emptyGlyph.hue = 0;
          emptyGlyph.saturation = 0;
          emptyGlyph.value = 0;
          emptyGlyph.opacity = 0;
          emptyGlyph.moveSpeed = 0;
          emptyGlyph.duration = 0;
          emptyGlyph.x = newGlyph.x;
          emptyGlyph.y = newGlyph.y;
          doSpace = false;
          this.glyphs.push(emptyGlyph);
        }
      }
      this.glyphs.push(newGlyph);
    }
    if (doSpace) {
      const emptyGlyph = new PhotoGlyph();
      emptyGlyph.hue = 0;
      emptyGlyph.saturation = 0;
      emptyGlyph.value = 0;
      emptyGlyph.opacity = 0;
      emptyGlyph.moveSpeed = 0;
      emptyGlyph.duration = 0;
      emptyGlyph.x = this.glyphs[0].x;
      emptyGlyph.y = this.glyphs[0].y;
      doSpace = false;
      this.glyphs.push(emptyGlyph);
    }
  }
  async Speak(div, textSize, moveSpeeds, durations, doLoop = false) {
    div.style.fontSize = textSize + "px";
    div.style.fontFamily = "Photolang";
    div.style.position = "relative";
    div.style.height = textSize * 3.25 + "px";
    div.style.width = textSize * 3.25 + "px";
    const textDiv = div.createDiv();
    textDiv.style.position = "absolute";
    textDiv.style.bottom = textSize + "px";
    textDiv.style.transitionProperty = "bottom, left, color";
    for (let i = 0; i < this.glyphs.length; i++) {
      const photoGlyph = this.glyphs[i];
      textDiv.textContent = photoGlyph.shape;
      textDiv.style.left = photoGlyph.x * textSize + "px";
      textDiv.style.bottom = photoGlyph.y * textSize + "px";
      textDiv.style.color = photoGlyph.color;
      if (doLoop && i === this.glyphs.length - 1) {
        i = -1;
      }
      textDiv.style.transition = moveSpeeds[photoGlyph.moveSpeed] + "ms";
      await sleep(moveSpeeds[photoGlyph.moveSpeed] + durations[photoGlyph.duration]);
    }
    div.remove();
  }
  async DisplayStatic(div, textSize) {
    const lineDiv = div.createDiv("hbox");
    lineDiv.style.gap = "" + textSize * 3.25 + "px)";
    for (let i = 0; i < this.glyphs.length; i++) {
      this.glyphs[i] = Object.assign(new PhotoGlyph(), this.glyphs[i]);
      this.glyphs[i].DisplayStatic(lineDiv.createDiv(), textSize);
    }
  }
};
var PhotoGlyph = class {
  get color() {
    let lightness = (2 - this.saturation) * this.value / 2;
    let newS = this.saturation * this.value / (lightness < 1 ? lightness * 2 : 2 - lightness * 2);
    if (lightness === 0 || lightness === 1) {
      newS = 0;
    }
    lightness *= 100;
    newS *= 100;
    return "hsla(" + this.hue + "," + newS + "%," + lightness + "%," + this.opacity + ")";
  }
  DisplayStatic(div, textSize) {
    const outerDiv = div.createDiv();
    outerDiv.style.position = "relative";
    outerDiv.style.width = textSize * 3.25 + "px";
    outerDiv.style.height = textSize * 3.25 + "px";
    outerDiv.className = "cfe-photoglyph";
    const glyphDiv = outerDiv.createDiv();
    glyphDiv.style.position = "absolute";
    glyphDiv.textContent = this.shape;
    glyphDiv.style.left = this.x * textSize + "px";
    glyphDiv.style.bottom = this.y * textSize + "px";
    glyphDiv.style.color = this.color;
  }
};

// classes/conlang-dictionary.ts
var ConlangDictionary = class extends CFEFile {
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const unfinishedDictionary = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    unfinishedDictionary.language = "Hwayu";
    unfinishedDictionary.words = [];
    unfinishedDictionary.searchTerm = "";
    unfinishedDictionary.searchInConlang = false;
    return unfinishedDictionary;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    const languageDropdown = mainDiv.createEl("select");
    languageDropdown.createEl("option", { text: "Hwayu", value: "Hwayu" });
    languageDropdown.createEl("option", { text: "Photolang", value: "Photolang" });
    languageDropdown.value = this.language;
    const addWordDiv = mainDiv.createDiv("vbox");
    await this.CreateNewWordEditor(snv, mainDiv, addWordDiv);
    languageDropdown.onchange = async () => {
      this.language = languageDropdown.value;
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    await this.DisplayList(snv, mainDiv);
  }
  async DisplayWord(snv, mainDiv, div, index) {
    div.empty();
    const modeButton = div.createEl("button", { text: "Edit" });
    modeButton.style.top = "0";
    modeButton.style.right = "0";
    modeButton.onclick = async () => {
      await this.EditWord(snv, mainDiv, div, index);
    };
    const wordDiv = div.createDiv("hbox");
    wordDiv.style.gap = "1%";
    wordDiv.style.fontSize = "25px";
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const conlangWordDiv = this.DisplayConlangText(wordDiv, conlangWord);
    conlangWordDiv.classList.add("cfe-pointer-hover");
    wordDiv.createEl("p", { text: ":" });
    wordDiv.createEl("p", { text: definition });
    conlangWordDiv.onclick = async () => {
      try {
        await navigator.clipboard.writeText(conlangWord);
      } catch (err) {
        console.error("Failed to copy text: ", err);
      }
    };
  }
  async EditWord(snv, mainDiv, div, index) {
    div.empty();
    const buttonsDiv = div.createDiv("hbox");
    const modeButton = buttonsDiv.createEl("button", { text: "View" });
    modeButton.onclick = async () => {
      await this.DisplayWord(snv, mainDiv, div, index);
    };
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete" });
    deleteButton.classList = "cfe-remove-button";
    deleteButton.onclick = async () => {
      this.words.splice(index, 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    const wordDiv = div.createDiv("vbox");
    wordDiv.style.fontSize = "25px";
    wordDiv.createEl("p", { text: "Word in " + this.language });
    const conlangWord = this.words[index][0];
    const definition = this.words[index][1];
    const newWordInput = this.DisplayConlangEditor(wordDiv, conlangWord);
    wordDiv.createEl("p", { text: "Definition" });
    const definitionInput = wordDiv.createEl("input", { type: "text", value: definition });
    definitionInput.style.fontSize = "25px";
    const onSubmit = async () => {
      this.words[index] = [newWordInput.value, definitionInput.value];
      this.ReSort(index);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  CreateNewWordEditor(snv, mainDiv, div) {
    div.createEl("p", { text: "Add New Word:" });
    div.createEl("p", { text: "Word in " + this.language });
    const newWordInput = this.DisplayConlangEditor(div);
    div.createEl("p", { text: "Definition" });
    const definitionInput = div.createEl("input", { type: "text", value: "" });
    const submitButton = div.createEl("button", { text: "submit" });
    const onSubmit = async () => {
      this.words.push([newWordInput.value, definitionInput.value]);
      this.ReSort(this.words.length - 1);
      await this.Save(snv);
      await this.Display(snv, mainDiv);
    };
    submitButton.onclick = onSubmit;
    div.onkeydown = async (event) => {
      if (event.key === "Enter") {
        await onSubmit();
      }
    };
  }
  DisplayConlangEditor(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.CreateTextInput(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, 25);
    }
  }
  DisplayConlangText(div, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
      default:
        return Hwayu.Display(div, existingWord, 25, false);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, 25, null, null, true);
    }
  }
  async DisplayList(snv, div) {
    div.createEl("p", { text: "Search in " + this.language + "?" });
    const checkbox = div.createEl("input", { type: "checkbox" });
    checkbox.checked = this.searchInConlang;
    div.createEl("p", { text: "Search term" });
    const conlangSearch = this.DisplayConlangEditor(div, this.searchTerm);
    const englishSearch = div.createEl("input", { type: "text", value: this.searchTerm });
    let prevElement = checkbox.checked ? englishSearch : conlangSearch;
    let currentElement = checkbox.checked ? conlangSearch : englishSearch;
    prevElement.style.width = "100%";
    currentElement.style.width = "100%";
    this.searchTerm = prevElement.value;
    prevElement.style.display = "none";
    currentElement.value = this.searchTerm;
    currentElement.style.display = "";
    const resultsDiv = div.createDiv("cfe-dictionary-grid");
    const refreshResults = () => {
      this.searchTerm = currentElement.value;
      this.searchInConlang = checkbox.checked;
      resultsDiv.empty();
      for (let i = 0; i < this.words.length; i++) {
        if (this.words[i][checkbox.checked ? 0 : 1].contains(currentElement.value)) {
          const wordDiv = resultsDiv.createDiv("cfe-dictionary-word");
          this.DisplayWord(snv, div, wordDiv, i);
        }
      }
    };
    refreshResults();
    conlangSearch.oninput = refreshResults;
    englishSearch.oninput = refreshResults;
    checkbox.onchange = () => {
      resultsDiv.empty();
      prevElement = checkbox.checked ? englishSearch : conlangSearch;
      currentElement = checkbox.checked ? conlangSearch : englishSearch;
      this.searchTerm = prevElement.value;
      prevElement.style.display = "none";
      currentElement.value = this.searchTerm;
      currentElement.style.display = "";
      refreshResults();
    };
  }
  ReSort(indexOfChangedWord) {
    const changedWord = this.words.splice(indexOfChangedWord, 1)[0];
    let i = 0;
    let left = 0;
    let right = this.words.length - 1;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (this.words[mid][0] < changedWord[0]) {
        left = mid + 1;
        i = left;
      } else {
        right = mid - 1;
        i = mid;
      }
    }
    this.words.splice(i, 0, changedWord);
  }
};

// classes/story.ts
var _Story = class extends CFEFile {
  MakeVertical(el) {
    el.style.writingMode = "vertical-lr";
    el.style.textOrientation = "upright";
  }
  CreateTextInput(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextInput(div, existingWord, 25, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextInput(div, existingWord, 25);
      default:
        input = div.createEl("input", { type: "text", value: existingWord });
        input.style.fontSize = "25px";
        return input;
    }
  }
  DisplayLineEdit(div, line) {
    const input = this.CreateTextArea(div, line.content);
    if (this.language !== "Photolang") {
      const speaker = this.characters[line.speakerIndex];
      input.style.backgroundColor = speaker.backgroundColor;
      input.style.color = speaker.color;
    }
    if (this.doVertical) {
      this.MakeVertical(input);
    }
    return input;
  }
  CreateTextArea(div, existingWord = "") {
    let input;
    switch (this.language) {
      case "Hwayu":
        return Hwayu.CreateTextArea(div, existingWord, 25, this.doVertical);
      case "Photolang":
        return PhotoLang.CreateTextArea(div, existingWord, 25);
      default:
        input = div.createEl("textarea", { text: existingWord });
        input.style.fontSize = "25px";
        return input;
    }
  }
  DisplayText(div, fontSize = 25, existingWord = "") {
    switch (this.language) {
      case "Hwayu":
        return Hwayu.Display(div, existingWord, fontSize, this.doVertical);
      case "Photolang":
        return PhotoLang.Display(div, existingWord, fontSize, null, null, true);
      default:
        return div.createEl("p", { text: existingWord });
    }
  }
  static async CreateNewFileForLayer(snv, fileType, parentFolderID) {
    const newStoryFile = await super.CreateNewFileForLayer(snv, fileType, parentFolderID);
    newStoryFile.currentPageIndex = 0;
    newStoryFile.pages = [];
    newStoryFile.characters = [];
    newStoryFile.language = "English";
    newStoryFile.doVertical = false;
    return newStoryFile;
  }
  async Display(snv, mainDiv) {
    await super.Display(snv, mainDiv);
    this.LoadStoryUI(snv, mainDiv.createDiv("vbox"));
  }
  LoadStoryUI(snv, mainDiv) {
    mainDiv.empty();
    mainDiv.createEl("p", { text: "Go to page number:" });
    const pageSelectDiv = mainDiv.createDiv("hbox");
    const pageNumberInput = pageSelectDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    pageSelectDiv.createEl("p", { text: "/" + this.pages.length });
    const goButton = pageSelectDiv.createEl("button", { text: "Go" });
    goButton.onclick = () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      this.LoadCurrentPageEdit(snv, mainDiv);
    };
    const languageInput = mainDiv.createEl("select");
    for (let i = 0; i < _Story.knownLanguages.length; i++) {
      languageInput.createEl("option", { text: _Story.knownLanguages[i], value: _Story.knownLanguages[i] });
    }
    languageInput.value = this.language;
    languageInput.onchange = async () => {
      this.language = languageInput.value;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    mainDiv.createEl("p", { text: "Vertical Text" });
    const doVerticalBox = mainDiv.createEl("input", { type: "checkbox" });
    doVerticalBox.checked = this.doVertical;
    doVerticalBox.onclick = async () => {
      this.doVertical = doVerticalBox.checked;
      await this.Save(snv);
      this.LoadStoryUI(snv, mainDiv);
    };
    this.LoadCharacterEditorUI(snv, mainDiv);
  }
  LoadCharacterEditorUI(snv, div) {
    const charEditorDiv = div.createDiv();
    charEditorDiv.className = this.doVertical ? "hbox" : "vbox";
    for (let i = 0; i < this.characters.length; i++) {
      const currentIndex = i;
      const charDiv = charEditorDiv.createDiv();
      charDiv.className = this.doVertical ? "vbox" : "hbox";
      charDiv.createEl("p", { text: "Name: " });
      const nameInput = this.CreateTextInput(charDiv, this.characters[currentIndex].name);
      if (this.language !== "Photolang") {
        nameInput.style.backgroundColor = this.characters[currentIndex].backgroundColor;
        nameInput.style.color = this.characters[currentIndex].color;
      }
      nameInput.onchange = async () => {
        this.characters[currentIndex].name = nameInput.value;
        await this.Save(snv);
        this.LoadStoryUI(snv, div);
      };
      if (this.doVertical) {
        nameInput.style.height = "fit-content";
      } else {
        nameInput.style.width = "fit-content";
      }
      if (this.language !== "Photolang") {
        this.LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex);
      } else {
        this.DisplayText(charDiv, 25, this.characters[currentIndex].name);
      }
    }
    const addCharButton = charEditorDiv.createEl("button", { text: "Add Character" });
    addCharButton.onclick = async () => {
      this.characters.push(new Character());
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadCharacterColorSelectionUI(snv, div, charEditorDiv, currentIndex) {
    const colorDiv = charEditorDiv.createDiv();
    colorDiv.className = this.doVertical ? "vbox" : "hbox";
    colorDiv.createEl("p", { text: "Text Color:" });
    const colorInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].color });
    colorDiv.createEl("p", { text: "Background Color:" });
    const backgroundInput = colorDiv.createEl("input", { type: "color", value: this.characters[currentIndex].backgroundColor });
    const swapButton = colorDiv.createEl("button", { text: "Swap" });
    colorInput.onchange = async () => {
      this.characters[currentIndex].color = colorInput.value;
      await this.Save(snv);
    };
    backgroundInput.onchange = async () => {
      this.characters[currentIndex].backgroundColor = backgroundInput.value;
      await this.Save(snv);
    };
    swapButton.onclick = async () => {
      this.characters[currentIndex].backgroundColor = colorInput.value;
      this.characters[currentIndex].color = backgroundInput.value;
      await this.Save(snv);
      charEditorDiv.remove();
      this.LoadCharacterEditorUI(snv, div);
    };
  }
  LoadPageSelector(snv, mainDiv) {
    const buttonsDiv = mainDiv.createDiv("hbox");
    const backButton = buttonsDiv.createEl("button", { text: "-" });
    const pageNumberInput = buttonsDiv.createEl("input", { type: "text", value: "" + (this.currentPageIndex + 1) });
    buttonsDiv.createEl("p", { text: "/" + this.pages.length });
    const nextButton = buttonsDiv.createEl("button", { text: "+" });
    const deleteButton = buttonsDiv.createEl("button", { text: "Delete Page" });
    deleteButton.className = "cfe-remove-button";
    const addButton = buttonsDiv.createEl("button", { text: "Add Page" });
    const editModeButton = buttonsDiv.createEl("button", { text: "Edit Mode" });
    const viewModeButton = buttonsDiv.createEl("button", { text: "View Mode" });
    const homeButton = buttonsDiv.createEl("button", { text: "Return to Story" });
    homeButton.onclick = async () => {
      await this.LoadStoryUI(snv, mainDiv);
    };
    editModeButton.onclick = async () => {
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    viewModeButton.onclick = async () => {
      await this.LoadCurrentPageDisplayOnly(snv, mainDiv);
    };
    backButton.onclick = async () => {
      if (this.currentPageIndex > 0) {
        this.currentPageIndex--;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    nextButton.onclick = async () => {
      if (this.currentPageIndex < this.pages.length) {
        this.currentPageIndex++;
        await this.LoadCurrentPageEdit(snv, mainDiv);
      }
    };
    pageNumberInput.onchange = async () => {
      this.currentPageIndex = parseInt(pageNumberInput.value) - 1;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    deleteButton.onclick = async () => {
      this.pages.splice(this.currentPageIndex, 1);
      await this.Save(snv);
      if (this.currentPageIndex !== 0) {
        this.currentPageIndex--;
      }
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
    addButton.onclick = async () => {
      const defaultPage = new Page();
      const thisPageFileID = this.pages[this.currentPageIndex].mediaFileID;
      if (thisPageFileID !== -1 && thisPageFileID < snv.sourceFolder.fileCount) {
        defaultPage.mediaFileID = thisPageFileID;
      }
      this.pages.splice(this.currentPageIndex + 1, 0, defaultPage);
      await this.Save(snv);
      this.currentPageIndex++;
      await this.LoadCurrentPageEdit(snv, mainDiv);
    };
  }
  async LoadCurrentPageEdit(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    mainDiv.createEl("p", { text: "Media File ID:" });
    const mediaFileIDInput = mainDiv.createEl("input", { type: "text" });
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaWidthInput = outerMediaDiv.createEl("input", { type: "text" });
    mediaWidthInput.onchange = async () => {
      outerMediaDiv.style.width = mediaWidthInput.value + "%";
      linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      this.pages[this.currentPageIndex].mediaSizePercentage = parseInt(mediaWidthInput.value);
      await this.Save(snv);
    };
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    if (this.currentPageIndex < this.pages.length) {
      const currentPage = this.pages[this.currentPageIndex];
      const mediaFileID = currentPage.mediaFileID;
      mediaFileIDInput.value = "" + currentPage.mediaFileID;
      if (mediaFileID > 0) {
        const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
        await mediaFile.DisplayMediaOnly(mediaDiv, snv);
      }
      if (this.pages[this.currentPageIndex].mediaSizePercentage) {
        mediaWidthInput.value = "" + this.pages[this.currentPageIndex].mediaSizePercentage;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
      } else {
        mediaWidthInput.value = "50";
        this.pages[this.currentPageIndex].mediaSizePercentage = 50;
        await this.Save(snv);
      }
    } else {
      const defaultPage = new Page();
      const lastPage = this.currentPageIndex - 1;
      if (lastPage >= 0 && this.currentPageIndex !== 0) {
        const lastPageFileID = this.pages[lastPage].mediaFileID;
        const lastPageSize = this.pages[lastPage].mediaSizePercentage;
        defaultPage.mediaSizePercentage = lastPageSize;
        mediaWidthInput.value = "" + lastPageSize;
        outerMediaDiv.style.width = mediaWidthInput.value + "%";
        linesDiv.style.width = 100 - parseInt(mediaWidthInput.value) + "%";
        if (lastPageFileID !== -1 && lastPageFileID < snv.sourceFolder.fileCount) {
          const mediaFileID = lastPageFileID + 1;
          defaultPage.mediaFileID = mediaFileID;
          mediaFileIDInput.value = "" + mediaFileID;
          if (mediaFileID > 0) {
            const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
            await mediaFile.DisplayMediaOnly(mediaDiv, snv);
          }
        }
      }
      this.pages.push(defaultPage);
      await this.Save(snv);
    }
    await this.LoadDialogueLinesEdit(snv, linesDiv);
    mediaFileIDInput.onchange = async () => {
      const currentPage = this.pages[this.currentPageIndex];
      currentPage.mediaFileID = parseInt(mediaFileIDInput.value);
      await this.Save(snv);
      const mediaFile = await CFEFileHandler.LoadFile(snv, currentPage.mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    };
  }
  async LoadCurrentPageDisplayOnly(snv, mainDiv) {
    mainDiv.empty();
    this.LoadPageSelector(snv, mainDiv);
    const panelDiv = mainDiv.createDiv("hbox");
    const outerMediaDiv = panelDiv.createDiv("vbox");
    const linesDiv = panelDiv.createDiv("vbox");
    const mediaDiv = outerMediaDiv.createDiv("vbox");
    outerMediaDiv.style.width = "50%";
    mediaDiv.style.objectFit = "contain";
    linesDiv.style.width = "50%";
    linesDiv.style.maxHeight = "80vh";
    linesDiv.style.position = "sticky";
    linesDiv.style.top = "0%";
    const currentPage = this.pages[this.currentPageIndex];
    const mediaFileID = currentPage.mediaFileID;
    if (mediaFileID > 0) {
      const mediaFile = await CFEFileHandler.LoadFile(snv, mediaFileID);
      await mediaFile.DisplayMediaOnly(mediaDiv, snv);
    }
    if (this.pages[this.currentPageIndex].mediaSizePercentage) {
      const width = this.pages[this.currentPageIndex].mediaSizePercentage;
      outerMediaDiv.style.width = width + "%";
      linesDiv.style.width = 100 - width + "%";
    }
    await this.LoadDialogueLinesDisplayOnly(linesDiv);
  }
  async LoadDialogueLinesEdit(snv, linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv();
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentIndex = i;
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      const lineDiv = existingLinesDiv.createDiv();
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const deleteButton = lineDiv.createEl("button", { text: "-" });
      deleteButton.className = "cfe-remove-button";
      deleteButton.onclick = async () => {
        this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
        await this.Save(snv);
        await this.LoadDialogueLinesEdit(snv, linesDiv);
      };
      if (this.doVertical) {
        this.MakeVertical(deleteButton);
      }
      const indexTextEl = this.DisplayText(lineDiv, 25, "" + currentIndex);
      if (this.doVertical) {
        this.MakeVertical(indexTextEl);
      }
      if (this.language === "Photolang") {
        const playButton = lineDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(lineInput.value);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
        if (this.doVertical) {
          this.MakeVertical(playButton);
        }
      }
      const charDropdownButton = lineDiv.createDiv();
      const charDropdownDiv = charDropdownButton.createDiv();
      charDropdownDiv.style.height = "fit-content";
      charDropdownDiv.style.width = "fit-content";
      charDropdownDiv.style.position = "relative";
      charDropdownButton.onclick = () => {
        const selectDiv = charDropdownDiv.createDiv();
        selectDiv.className = this.doVertical ? "hbox" : "vbox";
        selectDiv.style.position = "absolute";
        selectDiv.style.top = "0%";
        selectDiv.style.left = "0%";
        for (let i2 = 0; i2 < this.characters.length; i2++) {
          const currentCharIndex = i2;
          const currentChar = this.characters[currentCharIndex];
          const currentOption = selectDiv.createDiv();
          if (this.doVertical) {
            this.MakeVertical(currentOption);
          }
          if (this.language !== "Photolang") {
            currentOption.style.backgroundColor = currentChar.backgroundColor;
            currentOption.style.color = currentChar.color;
          }
          currentOption.style.zIndex = "2";
          this.DisplayText(currentOption, 25, currentChar.name);
          currentOption.onclick = async () => {
            this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
            await this.Save(snv);
            this.LoadDialogueLinesEdit(snv, linesDiv);
          };
        }
      };
      const nameEl = this.DisplayText(charDropdownDiv, 25, this.characters[currentLine.speakerIndex].name);
      if (this.doVertical) {
        this.MakeVertical(nameEl);
      }
      if (this.language !== "Photolang") {
        nameEl.style.backgroundColor = speaker.backgroundColor;
        nameEl.style.color = speaker.color;
      }
      const lineInput = this.DisplayLineEdit(lineDiv, currentLine);
      if (this.doVertical) {
        lineInput.style.height = "100%";
        this.MakeVertical(lineInput);
      } else {
        lineInput.style.width = "100%";
      }
      lineInput.onchange = async () => {
        currentLine.content = lineInput.value;
        await this.Save(snv);
      };
    }
    const addButton = existingLinesDiv.createEl("button", { text: "+" });
    addButton.onclick = async () => {
      this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
      await this.Save(snv);
      await this.LoadDialogueLinesEdit(snv, linesDiv);
    };
  }
  // private async LoadDialogueLinesEdit(snv: SourceAndVault, linesDiv: HTMLDivElement) {
  // 	const existingLinesDiv = linesDiv.createDiv('hbox');
  // 	existingLinesDiv.style.overflowX = 'scroll';
  // 	const fontSize = '17.5px';
  // 	for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
  // 		const currentIndex = i;
  // 		const currentLine = this.pages[this.currentPageIndex].lines[i];
  // 		const speakerIndex = currentLine.speakerIndex;
  // 		const currentSpeaker = this.characters[speakerIndex];
  // 		const lineDiv = existingLinesDiv.createDiv('vbox');
  // 		const deleteButton = lineDiv.createEl('button', { text: '-' } );
  // 		deleteButton.className = 'cfe-remove-button';
  // 		deleteButton.style.writingMode = 'vertical-lr';
  // 		deleteButton.style.textOrientation = 'upright';
  // 		deleteButton.onclick = async () => {
  // 			this.pages[this.currentPageIndex].lines.splice(currentIndex, 1);
  // 			await this.Save(snv);
  // 			await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 		}
  // 		const indexElement = lineDiv.createEl('p', { text: '' +  currentIndex } );
  // 		indexElement.style.color = currentSpeaker.color;
  // 		indexElement.style.fontFamily = 'HwayuReal';
  // 		indexElement.style.writingMode = 'vertical-lr';
  // 		indexElement.style.textOrientation = 'upright';
  // 		const charDropdownDiv = lineDiv.createDiv();
  // 		charDropdownDiv.style.position = 'relative';
  // 		const charDropdown = charDropdownDiv.createEl('button');
  // 		charDropdown.style.height = 'fit-content';
  // 		charDropdown.onclick = () => {
  // 			const selectDiv = charDropdownDiv.createDiv('hbox');
  // 			selectDiv.style.position = 'absolute';
  // 			selectDiv.style.top = '0%';
  // 			selectDiv.style.left = '0%';
  // 			for (let i = 0; i < this.characters.length; i++) {
  // 				const currentCharIndex = i;
  // 				const currentChar = this.characters[currentCharIndex];
  // 				const currentOption = selectDiv.createEl('button', { text: currentChar.name, value: '' + i } );
  // 				currentOption.style.color = currentChar.color;
  // 				currentOption.style.fontFamily = 'HwayuReal';
  // 				currentOption.style.backgroundColor = currentChar.backgroundColor;
  // 				currentOption.style.writingMode = 'vertical-lr';
  // 				currentOption.style.textOrientation = 'upright';
  // 				currentOption.style.height = 'fit-content';
  // 				currentOption.style.zIndex = '2';
  // 				currentOption.onclick = async () => {
  // 					this.pages[this.currentPageIndex].lines[currentIndex].speakerIndex = currentCharIndex;
  // 					const newSpeakerColor = this.characters[currentCharIndex].color;
  // 					const newBackgroundColor = this.characters[currentCharIndex].backgroundColor;
  // 					charDropdown.style.color = newSpeakerColor;
  // 					charDropdown.style.backgroundColor = newBackgroundColor;
  // 					charDropdown.textContent = this.characters[currentCharIndex].name;
  // 					lineInput.style.color = newSpeakerColor;
  // 					lineInput.style.backgroundColor = newBackgroundColor;
  // 					indexElement.style.color = newSpeakerColor;
  // 					await this.Save(snv);
  // 					selectDiv.remove();
  // 				}
  // 			}
  // 		}
  // 		charDropdown.textContent = this.characters[currentLine.speakerIndex].name;
  // 		charDropdown.style.color = currentSpeaker.color;
  // 		charDropdown.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		charDropdown.style.fontFamily = 'HwayuReal';
  // 		charDropdown.style.writingMode = 'vertical-lr';
  // 		charDropdown.style.textOrientation = 'upright';
  // 		const lineInput = lineDiv.createEl('textarea');
  // 		lineInput.spellcheck = false;
  // 		lineInput.style.overflowX = 'scroll';
  // 		lineInput.style.writingMode = 'vertical-lr';
  // 		lineInput.style.textOrientation = 'upright';
  // 		lineInput.defaultValue = currentLine.content;
  // 		lineInput.style.color = currentSpeaker.color;
  // 		lineInput.style.backgroundColor = currentSpeaker.backgroundColor;
  // 		lineInput.style.fontFamily = 'HwayuReal';
  // 		lineInput.style.fontSize = fontSize;
  // 		lineInput.style.height = '100%';
  // 		lineInput.onchange = async () => {
  // 			this.pages[this.currentPageIndex].lines[currentIndex].content = lineInput.value;
  // 			await this.Save(snv);
  // 		}
  // 	}
  // 	const addButton = existingLinesDiv.createEl('button', { text: '+' } );
  // 	addButton.style.height = '100%';
  // 	addButton.onclick = async () => {
  // 		this.pages[this.currentPageIndex].lines.push(new DialogueLine(0));
  // 		await this.Save(snv);
  // 		await this.LoadDialogueLinesEdit(snv, linesDiv);
  // 	}
  // }
  async LoadDialogueLinesDisplayOnly(linesDiv) {
    linesDiv.empty();
    const speakDiv = linesDiv.createDiv();
    speakDiv.style.position = "absolute";
    speakDiv.style.top = "0px";
    speakDiv.style.left = "0px";
    const existingLinesDiv = linesDiv.createDiv("vbox");
    existingLinesDiv.className = this.doVertical ? "hbox" : "vbox";
    if (this.doVertical) {
      existingLinesDiv.style.overflowX = "scroll";
    } else {
      existingLinesDiv.style.overflowY = "scroll";
    }
    for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
      const currentLine = this.pages[this.currentPageIndex].lines[i];
      const speaker = this.characters[currentLine.speakerIndex];
      if (this.language === "Photolang") {
        const playButton = existingLinesDiv.createEl("button", { text: "\u25B7" });
        playButton.onclick = () => {
          const popup = speakDiv.createDiv();
          popup.style.position = "absolute";
          popup.style.top = "0px";
          popup.style.left = "0px";
          const photoline = new PhotoLine(currentLine.content);
          photoline.Speak(popup, 200, [100, 250, 500], [0, 500], false);
        };
      }
      const nameDiv = existingLinesDiv.createDiv("");
      nameDiv.className = this.doVertical ? "vbox" : "hbox";
      const lineDiv = existingLinesDiv.createDiv("");
      lineDiv.className = this.doVertical ? "vbox" : "hbox";
      const nameEl = this.DisplayText(nameDiv, 25, speaker.name);
      nameEl.style.backgroundColor = speaker.backgroundColor;
      nameEl.style.color = speaker.color;
      if (this.language === "Photolang") {
        const photoLine = new PhotoLine(currentLine.content);
        photoLine.DisplayStatic(lineDiv, 25);
      } else {
        const lineEl = this.DisplayText(lineDiv, 25, currentLine.content);
        lineEl.style.backgroundColor = speaker.backgroundColor;
        lineEl.style.color = speaker.color;
      }
    }
    if (this.language === "Photolang") {
      for (let i = 0; i < this.pages[this.currentPageIndex].lines.length; i++) {
        const currentLine = this.pages[this.currentPageIndex].lines[i];
        const nameDiv = speakDiv.createDiv();
        nameDiv.style.position = "absolute";
        nameDiv.style.top = "0px";
        nameDiv.style.left = "0px";
        const photoName = new PhotoLine(this.characters[currentLine.speakerIndex].name);
        await photoName.Speak(nameDiv, 100, [100, 250, 500], [0, 500], false);
        const popup = speakDiv.createDiv();
        popup.style.position = "absolute";
        popup.style.top = "0px";
        popup.style.left = "0px";
        const photoLine = new PhotoLine(currentLine.content);
        await photoLine.Speak(popup, 200, [100, 250, 500], [0, 500], false);
      }
    }
  }
};
var Story = _Story;
Story.knownLanguages = [
  "English",
  "Hwayu",
  "Photolang"
];
var Page = class {
  constructor() {
    this.mediaFileID = -1;
    this.lines = [];
    this.mediaSizePercentage = 50;
  }
};
var DialogueLine = class {
  constructor(speakerIndex) {
    this.speakerIndex = speakerIndex;
    this.content = "";
  }
};
var Character = class {
  constructor(name = "", color = "white", backgroundColor = "white") {
    this.name = name;
    this.color = color;
    this.backgroundColor = backgroundColor;
  }
};

// classes/cfe-file-handler.ts
var CFEFileHandler = class {
  static async CreateNew(snv, fileType, parentFolderID) {
    let newFile;
    switch (fileType) {
      case "Folder":
      default:
        newFile = await Folder.CreateNewFileForLayer(snv, fileType, parentFolderID);
        break;
      case "Single Media File":
        newFile = await SingleMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID);
        break;
      case "Variant Media File":
        newFile = await VariantMediaFile.CreateNewFileForLayer(snv, fileType, parentFolderID);
        break;
      case "Playlist":
        newFile = await Playlist.CreateNewFileForLayer(snv, fileType, parentFolderID);
        break;
      case "Story":
        newFile = await Story.CreateNewFileForLayer(snv, fileType, parentFolderID);
        break;
      case "Source Folder Shortcut":
        newFile = await SourceFolderShortcut.CreateNewFileForLayer(snv, fileType, parentFolderID);
        break;
      case "Conlang Dictionary":
        newFile = await ConlangDictionary.CreateNewFileForLayer(snv, fileType, parentFolderID);
        break;
    }
    await newFile.Save(snv);
    return newFile;
  }
  static async LoadFile(snv, fileID) {
    const sourceFolder = snv.sourceFolder;
    const vault = snv.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/" + fileID + ".json");
    if (tFile === null) {
      throw Error("File could not be found at the path: " + sourceFolder.vaultPath + "/" + fileID + ".json");
    }
    const jsonData = await vault.cachedRead(tFile);
    const plainObject = JSON.parse(jsonData);
    switch (plainObject.fileType) {
      case "Folder":
      default:
        return await Object.assign(new Folder(), plainObject);
      case "Single Media File":
        return await Object.assign(new SingleMediaFile(), plainObject);
      case "Variant Media File":
        return await Object.assign(new VariantMediaFile(), plainObject);
      case "Playlist":
        return await Object.assign(new Playlist(), plainObject);
      case "Story":
        return await Object.assign(new Story(), plainObject);
      case "Source Folder Shortcut":
        return await Object.assign(new SourceFolderShortcut(), plainObject);
      case "Conlang Dictionary":
        return await Object.assign(new ConlangDictionary(), plainObject);
    }
  }
};
/**
 * All of the known file formats
 */
CFEFileHandler.KnownFileTypes = [
  "Folder",
  "Single Media File",
  "Variant Media File",
  "Playlist",
  "Story",
  "Source Folder Shortcut",
  "Conlang Dictionary"
];

// classes/snv.ts
var SourceAndVault = class {
  constructor(sourceFolder, vault) {
    this.sourceFolder = sourceFolder;
    this.vault = vault;
  }
};

// classes/source-folder.ts
var SourceFolder = class {
  constructor() {
    this.vaultPath = "";
    this.fileCount = 0;
  }
  async Display(container, vault) {
    const snv = new SourceAndVault(this, vault);
    const notExists = vault.getFileByPath(snv.sourceFolder.vaultPath + "/0.json") === null;
    if (notExists) {
      await CFEFileHandler.CreateNew(snv, "Folder", 0);
    }
    const rootFolder = await CFEFileHandler.LoadFile(snv, 0);
    await SourceFolder.Save(snv);
    await rootFolder.Save(snv);
    await rootFolder.Display(snv, container);
  }
  static async CreateOrLoadSourceFolder(vaultPath, vault) {
    vaultPath = vaultPath.endsWith("/source.json") ? vaultPath.slice(0, -12) : vaultPath;
    const exists = vault.getFileByPath(vaultPath + "/source.json") !== null;
    let newSourceFolder;
    if (exists) {
      newSourceFolder = await this.LoadExistingSource(vaultPath, vault);
    } else {
      newSourceFolder = await this.CreateNewSourceFolder(vaultPath, vault);
    }
    return newSourceFolder;
  }
  static async CreateNewSourceFolder(vaultPath, vault) {
    const newSourceFolder = new SourceFolder();
    newSourceFolder.vaultPath = vaultPath;
    newSourceFolder.fileCount = 0;
    try {
      await vault.createFolder(vaultPath);
    } finally {
      const sourcePath = (0, import_obsidian3.normalizePath)(vaultPath + "/source.json");
      await vault.adapter.write(sourcePath, "0");
    }
    return newSourceFolder;
  }
  static async LoadExistingSource(vaultPath, vault) {
    const sourceTFile = vault.getFileByPath(vaultPath + "/source.json");
    if (sourceTFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + vaultPath + "/source.json");
    }
    const jsonData = await vault.cachedRead(sourceTFile);
    const plainObject = await JSON.parse(jsonData);
    const newSourceFolder = Object.assign(new SourceFolder(), plainObject);
    newSourceFolder.vaultPath = vaultPath;
    await SourceFolder.Save(new SourceAndVault(newSourceFolder, vault));
    return newSourceFolder;
  }
  /**
   * Saves the new file count
   */
  static async Save(sourceAndVault) {
    const sourceFolder = sourceAndVault.sourceFolder;
    const vault = sourceAndVault.vault;
    const tFile = vault.getFileByPath(sourceFolder.vaultPath + "/source.json");
    if (tFile === null) {
      new import_obsidian3.Notice("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
      throw Error("Source File could not be found at the path: " + sourceFolder.vaultPath + "/source.json");
    }
    const jsonData = JSON.stringify(sourceFolder);
    await vault.modify(tFile, jsonData);
  }
};

// classes/custom-explorer-view.ts
var VIEW_TYPE_CUSTOM_EXPLORER = "custom-explorer-view";
var CustomExplorerView = class extends import_obsidian4.ItemView {
  constructor(leaf, path) {
    super(leaf);
    this.defaultPath = path;
  }
  getViewType() {
    return VIEW_TYPE_CUSTOM_EXPLORER;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    const wrapper = this.containerEl.children[1];
    wrapper.empty();
    const mainContainer = wrapper.createDiv("cfe-main-display");
    const homePage = mainContainer.createDiv("cfe-home-page");
    homePage.createEl("h4", { text: "Path to Source:" });
    const existingSourcePathInput = homePage.createEl("input", { type: "text", value: this.defaultPath });
    existingSourcePathInput.style.width = "100%";
    const submitButton = homePage.createEl("button", { text: "submit" });
    const vault = this.app.vault;
    submitButton.onclick = async () => {
      const path = existingSourcePathInput.value;
      const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
      await sf.Display(mainContainer, vault);
    };
    homePage.onkeydown = async (keyPressEvent) => {
      if (keyPressEvent.key === "Enter") {
        const path = existingSourcePathInput.value;
        const sf = await SourceFolder.CreateOrLoadSourceFolder(path, vault);
        await sf.Display(mainContainer, vault);
      }
    };
  }
  async onClose() {
  }
};

// main.ts
var import_obsidian5 = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultPath: "source"
};
var CFE = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CUSTOM_EXPLORER,
      (leaf) => new CustomExplorerView(leaf, this.settings.defaultPath)
    );
    this.addRibbonIcon("folder", "Activate view", () => {
      this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
    });
    this.addCommand({
      id: "open-cfe-view",
      name: "Open Custom File Explorer View",
      callback: () => {
        this.activateView(VIEW_TYPE_CUSTOM_EXPLORER);
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView(view_type) {
    const { workspace } = this.app;
    let leaf = null;
    leaf = workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian5.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    await leaf.setViewState({ type: view_type, active: true });
    workspace.revealLeaf(leaf);
  }
};
var SampleSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("Default Source Path").setDesc("The vault path to automatically fill in for the source path").addText((text) => text.setPlaceholder("Default Source Path").setValue(this.plugin.settings.defaultPath).onChange(async (value) => {
      this.plugin.settings.defaultPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjbGFzc2VzL2N1c3RvbS1leHBsb3Jlci12aWV3LnRzIiwgImNsYXNzZXMvc291cmNlLWZvbGRlci50cyIsICJjbGFzc2VzL2NmZS1maWxlLnRzIiwgImNsYXNzZXMvc2luZ2xlLW1lZGlhLWZpbGUudHMiLCAiY2xhc3Nlcy9yZWFsLWZpbGUudHMiLCAiY2xhc3Nlcy9mb2xkZXIudHMiLCAiY2xhc3Nlcy9wbGF5bGlzdC50cyIsICJjbGFzc2VzL3ZhcmlhbnQtbWVkaWEtZmlsZS50cyIsICJjbGFzc2VzL3NvdXJjZS1mb2xkZXItc2hvcnRjdXQudHMiLCAiY2xhc3Nlcy9jb25sYW5ncy9od2F5dS10ZXh0LnRzIiwgImNsYXNzZXMvY29ubGFuZ3MvcGhvdG9sYW5nLXRleHQudHMiLCAiY2xhc3Nlcy9jb25sYW5nLWRpY3Rpb25hcnkudHMiLCAiY2xhc3Nlcy9zdG9yeS50cyIsICJjbGFzc2VzL2NmZS1maWxlLWhhbmRsZXIudHMiLCAiY2xhc3Nlcy9zbnYudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEN1c3RvbUV4cGxvcmVyVmlldywgVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUiB9IGZyb20gJ2NsYXNzZXMvY3VzdG9tLWV4cGxvcmVyLXZpZXcnO1xuaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XG5cbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxuXG5pbnRlcmZhY2UgQ0ZFQ2V0dGluZ3Mge1xuXHRkZWZhdWx0UGF0aDogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDRkVDZXR0aW5ncyA9IHtcblx0ZGVmYXVsdFBhdGg6ICdzb3VyY2UnXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENGRSBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBDRkVDZXR0aW5ncztcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJWaWV3KFxuXHRcdFx0VklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUixcblx0XHRcdChsZWFmKSA9PiBuZXcgQ3VzdG9tRXhwbG9yZXJWaWV3KGxlYWYsIHRoaXMuc2V0dGluZ3MuZGVmYXVsdFBhdGgpXG5cdFx0KTtcblxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbignZm9sZGVyJywgJ0FjdGl2YXRlIHZpZXcnLCAoKSA9PiB7XG5cdFx0XHR0aGlzLmFjdGl2YXRlVmlldyhWSUVXX1RZUEVfQ1VTVE9NX0VYUExPUkVSKTtcblx0XHR9KTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNpbXBsZSBjb21tYW5kIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBhbnl3aGVyZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ29wZW4tY2ZlLXZpZXcnLFxuXHRcdFx0bmFtZTogJ09wZW4gQ3VzdG9tIEZpbGUgRXhwbG9yZXIgVmlldycsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmFjdGl2YXRlVmlldyhWSUVXX1RZUEVfQ1VTVE9NX0VYUExPUkVSKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBUaGlzIGFkZHMgYW4gZWRpdG9yIGNvbW1hbmQgdGhhdCBjYW4gcGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2Vcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdzYW1wbGUtZWRpdG9yLWNvbW1hbmQnLFxuXHRcdFx0bmFtZTogJ1NhbXBsZSBlZGl0b3IgY29tbWFuZCcsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coZWRpdG9yLmdldFNlbGVjdGlvbigpKTtcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oJ1NhbXBsZSBFZGl0b3IgQ29tbWFuZCcpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFNhbXBsZVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuXHRcdC8vIElmIHRoZSBwbHVnaW4gaG9va3MgdXAgYW55IGdsb2JhbCBET00gZXZlbnRzIChvbiBwYXJ0cyBvZiB0aGUgYXBwIHRoYXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBwbHVnaW4pXG5cdFx0Ly8gVXNpbmcgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciB3aGVuIHRoaXMgcGx1Z2luIGlzIGRpc2FibGVkLlxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coJ2NsaWNrJywgZXZ0KTtcblx0XHR9KTtcblxuXHRcdC8vIFdoZW4gcmVnaXN0ZXJpbmcgaW50ZXJ2YWxzLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSBjbGVhciB0aGUgaW50ZXJ2YWwgd2hlbiB0aGUgcGx1Z2luIGlzIGRpc2FibGVkLlxuXHRcdHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gY29uc29sZS5sb2coJ3NldEludGVydmFsJyksIDUgKiA2MCAqIDEwMDApKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxuXG5cdGFzeW5jIGFjdGl2YXRlVmlldyh2aWV3X3R5cGU6IHN0cmluZykge1xuXHRcdGNvbnN0IHsgd29ya3NwYWNlIH0gPSB0aGlzLmFwcDtcblxuXHRcdGxldCBsZWFmOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCA9IG51bGw7XG5cblx0XHRsZWFmID0gd29ya3NwYWNlLmdldExlYWYoJ3RhYicpO1xuXHRcdGlmIChsZWFmID09PSBudWxsKSB7XG5cdFx0XHRuZXcgTm90aWNlKFwiRmFpbGVkIHRvIGNyZWF0ZSB2aWV3OiB3b3Jrc3BhY2UgbGVhZiB3YXMgbnVsbFwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0YXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiB2aWV3X3R5cGUsIGFjdGl2ZTogdHJ1ZSB9KTtcblxuXHRcdC8vIFwiUmV2ZWFsXCIgdGhlIGxlYWYgaW4gY2FzZSBpdCBpcyBpbiBhIGNvbGxhcHNlZCBzaWRlYmFyXG5cdFx0d29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XG5cdH1cbn1cblxuY2xhc3MgU2FtcGxlU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IENGRTtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBDRkUpIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xuXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0RlZmF1bHQgU291cmNlIFBhdGgnKVxuXHRcdFx0LnNldERlc2MoJ1RoZSB2YXVsdCBwYXRoIHRvIGF1dG9tYXRpY2FsbHkgZmlsbCBpbiBmb3IgdGhlIHNvdXJjZSBwYXRoJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0RlZmF1bHQgU291cmNlIFBhdGgnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFBhdGgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0UGF0aCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFNvdXJjZUZvbGRlciB9IGZyb20gJy4vc291cmNlLWZvbGRlcic7XG5cbmV4cG9ydCBjb25zdCBWSUVXX1RZUEVfQ1VTVE9NX0VYUExPUkVSID0gJ2N1c3RvbS1leHBsb3Jlci12aWV3JztcblxuZXhwb3J0IGNsYXNzIEN1c3RvbUV4cGxvcmVyVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcblx0ZGVmYXVsdFBhdGg6IHN0cmluZztcblx0Y29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGF0aDogc3RyaW5nKSB7XG5cdFx0c3VwZXIobGVhZik7XG5cdFx0dGhpcy5kZWZhdWx0UGF0aCA9IHBhdGg7XG5cdH1cblxuXHRnZXRWaWV3VHlwZSgpIHtcblx0XHRyZXR1cm4gVklFV19UWVBFX0NVU1RPTV9FWFBMT1JFUjtcblx0fVxuXG5cdGdldERpc3BsYXlUZXh0KCkge1xuXHRcdHJldHVybiAnRXhhbXBsZSB2aWV3Jztcblx0fVxuXG5cdGFzeW5jIG9uT3BlbigpIHtcblx0XHRjb25zdCB3cmFwcGVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcblx0XHR3cmFwcGVyLmVtcHR5KCk7XG5cdFx0Y29uc3QgbWFpbkNvbnRhaW5lciA9IHdyYXBwZXIuY3JlYXRlRGl2KCdjZmUtbWFpbi1kaXNwbGF5Jyk7XG5cdFx0Y29uc3QgaG9tZVBhZ2UgPSBtYWluQ29udGFpbmVyLmNyZWF0ZURpdignY2ZlLWhvbWUtcGFnZScpO1xuXHRcdGhvbWVQYWdlLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ1BhdGggdG8gU291cmNlOicgfSApO1xuXHRcdGNvbnN0IGV4aXN0aW5nU291cmNlUGF0aElucHV0ID0gaG9tZVBhZ2UuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiB0aGlzLmRlZmF1bHRQYXRoIH0gKTtcblx0XHRleGlzdGluZ1NvdXJjZVBhdGhJbnB1dC5zdHlsZS53aWR0aCA9ICcxMDAlJztcblx0XHRjb25zdCBzdWJtaXRCdXR0b24gPSBob21lUGFnZS5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnc3VibWl0JyB9ICk7XG5cdFx0Y29uc3QgdmF1bHQgPSB0aGlzLmFwcC52YXVsdDtcblx0XHRzdWJtaXRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcblx0XHRcdGNvbnN0IHBhdGggPSBleGlzdGluZ1NvdXJjZVBhdGhJbnB1dC52YWx1ZTtcblx0XHRcdGNvbnN0IHNmID0gPFNvdXJjZUZvbGRlcj4gYXdhaXQgU291cmNlRm9sZGVyLkNyZWF0ZU9yTG9hZFNvdXJjZUZvbGRlcihwYXRoLCB2YXVsdCk7XG5cdFx0XHRhd2FpdCBzZi5EaXNwbGF5KG1haW5Db250YWluZXIsIHZhdWx0KTtcblx0XHR9XG5cdFx0aG9tZVBhZ2Uub25rZXlkb3duID0gYXN5bmMgKGtleVByZXNzRXZlbnQpID0+IHtcblx0XHRcdGlmIChrZXlQcmVzc0V2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuXHRcdFx0XHRjb25zdCBwYXRoID0gZXhpc3RpbmdTb3VyY2VQYXRoSW5wdXQudmFsdWU7XG5cdFx0XHRcdGNvbnN0IHNmID0gYXdhaXQgU291cmNlRm9sZGVyLkNyZWF0ZU9yTG9hZFNvdXJjZUZvbGRlcihwYXRoLCB2YXVsdCk7XG5cdFx0XHRcdGF3YWl0IHNmLkRpc3BsYXkobWFpbkNvbnRhaW5lciwgdmF1bHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFzeW5jIG9uQ2xvc2UoKSB7XG5cdFx0Ly8gTm90aGluZyB0byBjbGVhbiB1cC5cblx0fVxufVxuIiwgImltcG9ydCB7IG5vcm1hbGl6ZVBhdGgsIE5vdGljZSwgVmF1bHQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IENGRUZpbGVIYW5kbGVyIH0gZnJvbSBcIi4vY2ZlLWZpbGUtaGFuZGxlclwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcblxuZXhwb3J0IGNsYXNzIFNvdXJjZUZvbGRlciB7XG5cdHZhdWx0UGF0aDogc3RyaW5nO1xuXHRmaWxlQ291bnQ6IG51bWJlcjtcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMudmF1bHRQYXRoID0gJyc7XG5cdFx0dGhpcy5maWxlQ291bnQgPSAwO1xuXHR9XG5cblx0YXN5bmMgRGlzcGxheShjb250YWluZXI6IEhUTUxEaXZFbGVtZW50LCB2YXVsdDogVmF1bHQpIHtcblx0XHRjb25zdCBzbnYgPSBuZXcgU291cmNlQW5kVmF1bHQodGhpcywgdmF1bHQpO1xuXHRcdGNvbnN0IG5vdEV4aXN0cyA9IHZhdWx0LmdldEZpbGVCeVBhdGgoc252LnNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLzAuanNvbicpID09PSBudWxsO1xuXHRcdGlmIChub3RFeGlzdHMpIHtcblx0XHRcdGF3YWl0IENGRUZpbGVIYW5kbGVyLkNyZWF0ZU5ldyhzbnYsICdGb2xkZXInLCAwKTtcblx0XHR9XG5cdFx0Y29uc3Qgcm9vdEZvbGRlciA9IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgMCk7XG5cdFx0YXdhaXQgU291cmNlRm9sZGVyLlNhdmUoc252KTtcblx0XHRhd2FpdCByb290Rm9sZGVyLlNhdmUoc252KTtcblx0XHRhd2FpdCByb290Rm9sZGVyLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xuXHR9XG5cblx0c3RhdGljIGFzeW5jIENyZWF0ZU9yTG9hZFNvdXJjZUZvbGRlcih2YXVsdFBhdGg6IHN0cmluZywgdmF1bHQ6IFZhdWx0KTogUHJvbWlzZTxTb3VyY2VGb2xkZXI+IHtcblx0XHR2YXVsdFBhdGggPSB2YXVsdFBhdGguZW5kc1dpdGgoJy9zb3VyY2UuanNvbicpID8gdmF1bHRQYXRoLnNsaWNlKDAsIC0xMikgOiB2YXVsdFBhdGg7XG5cdFx0Y29uc3QgZXhpc3RzID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aCh2YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJykgIT09IG51bGw7XG5cdFx0bGV0IG5ld1NvdXJjZUZvbGRlcjogU291cmNlRm9sZGVyO1xuXHRcdGlmIChleGlzdHMpIHtcblx0XHRcdG5ld1NvdXJjZUZvbGRlciA9IGF3YWl0IHRoaXMuTG9hZEV4aXN0aW5nU291cmNlKHZhdWx0UGF0aCwgdmF1bHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdTb3VyY2VGb2xkZXIgPSBhd2FpdCB0aGlzLkNyZWF0ZU5ld1NvdXJjZUZvbGRlcih2YXVsdFBhdGgsIHZhdWx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ld1NvdXJjZUZvbGRlcjtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGFzeW5jIENyZWF0ZU5ld1NvdXJjZUZvbGRlcih2YXVsdFBhdGg6IHN0cmluZywgdmF1bHQ6IFZhdWx0KTogUHJvbWlzZTxTb3VyY2VGb2xkZXI+IHtcblx0XHRjb25zdCBuZXdTb3VyY2VGb2xkZXIgPSBuZXcgU291cmNlRm9sZGVyKCk7XG5cdFx0bmV3U291cmNlRm9sZGVyLnZhdWx0UGF0aCA9IHZhdWx0UGF0aDtcblx0XHRuZXdTb3VyY2VGb2xkZXIuZmlsZUNvdW50ID0gMDtcblx0XHR0cnkge1xuXHRcdFx0YXdhaXQgdmF1bHQuY3JlYXRlRm9sZGVyKHZhdWx0UGF0aCk7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGNvbnN0IHNvdXJjZVBhdGggPSBub3JtYWxpemVQYXRoKHZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKTtcblx0XHRcdGF3YWl0IHZhdWx0LmFkYXB0ZXIud3JpdGUoc291cmNlUGF0aCwgJzAnKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ld1NvdXJjZUZvbGRlcjtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGFzeW5jIExvYWRFeGlzdGluZ1NvdXJjZSh2YXVsdFBhdGg6IHN0cmluZywgdmF1bHQ6IFZhdWx0KTogUHJvbWlzZTxTb3VyY2VGb2xkZXI+IHtcblx0XHRjb25zdCBzb3VyY2VURmlsZSA9IHZhdWx0LmdldEZpbGVCeVBhdGgodmF1bHRQYXRoICsgJy9zb3VyY2UuanNvbicpO1xuXHRcdGlmIChzb3VyY2VURmlsZSA9PT0gbnVsbCkge1xuXHRcdFx0bmV3IE5vdGljZShcIlNvdXJjZSBGaWxlIGNvdWxkIG5vdCBiZSBmb3VuZCBhdCB0aGUgcGF0aDogXCIgKyB2YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XG5cdFx0XHR0aHJvdyBFcnJvcihcIlNvdXJjZSBGaWxlIGNvdWxkIG5vdCBiZSBmb3VuZCBhdCB0aGUgcGF0aDogXCIgKyB2YXVsdFBhdGggKyAnL3NvdXJjZS5qc29uJyk7XG5cdFx0fVxuXHRcdGNvbnN0IGpzb25EYXRhID0gYXdhaXQgdmF1bHQuY2FjaGVkUmVhZChzb3VyY2VURmlsZSk7XG5cblx0XHRjb25zdCBwbGFpbk9iamVjdCA9IGF3YWl0IEpTT04ucGFyc2UoanNvbkRhdGEpO1xuXHRcdGNvbnN0IG5ld1NvdXJjZUZvbGRlciA9IE9iamVjdC5hc3NpZ24obmV3IFNvdXJjZUZvbGRlcigpLCBwbGFpbk9iamVjdCk7XG5cdFx0bmV3U291cmNlRm9sZGVyLnZhdWx0UGF0aCA9IHZhdWx0UGF0aDtcblx0XHRhd2FpdCBTb3VyY2VGb2xkZXIuU2F2ZShuZXcgU291cmNlQW5kVmF1bHQobmV3U291cmNlRm9sZGVyLCB2YXVsdCkpO1xuXHRcdHJldHVybiBuZXdTb3VyY2VGb2xkZXI7XG5cdH1cblxuXHQvKipcblx0ICogU2F2ZXMgdGhlIG5ldyBmaWxlIGNvdW50XG5cdCAqL1xuXHRzdGF0aWMgYXN5bmMgU2F2ZShzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQpIHtcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzb3VyY2VBbmRWYXVsdC5zb3VyY2VGb2xkZXI7XG5cdFx0Y29uc3QgdmF1bHQgPSBzb3VyY2VBbmRWYXVsdC52YXVsdDtcblxuXHRcdC8vIEZpbmQgdGhlIGZpbGUgYW5kIGNoZWNrIHRoYXQgaXQgaXNuJ3QgbnVsbFxuXHRcdGNvbnN0IHRGaWxlID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aChzb3VyY2VGb2xkZXIudmF1bHRQYXRoICsgJy9zb3VyY2UuanNvbicpO1xuXHRcdGlmICh0RmlsZSA9PT0gbnVsbCkge1xuXHRcdFx0bmV3IE5vdGljZShcIlNvdXJjZSBGaWxlIGNvdWxkIG5vdCBiZSBmb3VuZCBhdCB0aGUgcGF0aDogXCIgKyBzb3VyY2VGb2xkZXIudmF1bHRQYXRoICsgJy9zb3VyY2UuanNvbicpO1xuXHRcdFx0dGhyb3cgRXJyb3IoXCJTb3VyY2UgRmlsZSBjb3VsZCBub3QgYmUgZm91bmQgYXQgdGhlIHBhdGg6IFwiICsgc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvc291cmNlLmpzb24nKTtcblx0XHR9XG5cblx0XHRjb25zdCBqc29uRGF0YSA9IEpTT04uc3RyaW5naWZ5KHNvdXJjZUZvbGRlcik7XG5cdFx0YXdhaXQgdmF1bHQubW9kaWZ5KHRGaWxlLCBqc29uRGF0YSk7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBub3JtYWxpemVQYXRoIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XHJcbmltcG9ydCB7IENGRUZpbGVIYW5kbGVyIH0gZnJvbSBcIi4vY2ZlLWZpbGUtaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBTb3VyY2VGb2xkZXIgfSBmcm9tIFwiLi9zb3VyY2UtZm9sZGVyXCI7XHJcbmltcG9ydCB7IEZvbGRlciB9IGZyb20gXCIuL2ZvbGRlclwiO1xyXG5cclxuLy8jcmVnaW9uIEZvcm1hdHRlZCBGaWxlIEhhbmRsZXJcclxuLy8jZW5kcmVnaW9uXHJcblxyXG4vLyNyZWdpb24gRmlsZSBUeXBlc1xyXG4vKipcclxuICogQW4gaW50ZXJwcmV0YXRpb24gb2YganNvbiBmaWxlcyBhcyBhIFwiZmlsZVwiIG9mIGEgc3BlY2lmaWMgXCJmaWxlIGZvcm1hdFwiXHJcbiAqIHRoYXQgY2FuIGJlIGludGVycHJldGVkIGFuZCBkaXNwbGF5ZWQgYnkgdGhlIHBsdWdpbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDRkVGaWxlIHtcclxuXHQvKipcclxuXHQgKiBBIHVuaXF1ZSAod2l0aGluIHRoZSBcInNvdXJjZVwiIG9mIHRoZSBjdXJyZW50IGV4cGxvcmVyKSBudW1lcmljYWwgaWRlbnRpZmllciBmb3IgdGhlIGZpbGVcclxuXHQgKi9cclxuXHRpZDogbnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgdHlwZSBvZiBmaWxlXHJcblx0ICovXHJcblx0ZmlsZVR5cGU6IHN0cmluZztcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIG5hbWUgb2YgdGhlIGZpbGUgd2l0aGluIHRoZSBzb3VyY2VcclxuXHQgKi9cclxuXHRmaWxlTmFtZTogc3RyaW5nO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgSUQgb2YgdGhlIHBhcmVudCBmb2xkZXJcclxuXHQgKi9cclxuXHRwYXJlbnRGb2xkZXJJRDogbnVtYmVyO1xyXG5cclxuXHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBGSUxFX05BTUVfSU5QVVRfSU5ERVggPSAwO1xyXG5cdHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFBBUkVOVF9GT0xERVJfSURfSU5QVVRfSU5ERVggPSAxO1xyXG5cclxuXHQvKipcclxuXHQgKiBTSE9VTEQgTk9UIEJFIENBTExFRCBPVVRTSURFIE9GIENGRUZpbGVIYW5kbGVyLlxyXG5cdCAqIFxyXG5cdCAqIFVzZSBDRkVGaWxlSGFuZGxlci5DcmVhdGVOZXcoKSBpbnN0ZWFkLlxyXG5cdCAqIFxyXG5cdCAqIENISUxEIENMQVNTRVMgU0hPVUxEIE5PVCBXUklURSBUTyBBIEZJTEUuIFRISVMgSVMgRE9ORSBJTlNJREUgT0YgQ0ZFRmlsZUhhbmRsZXJcclxuXHQgKiBcclxuXHQgKiBDRkVGaWxlIGxheWVyOlxyXG5cdCAqIFxyXG5cdCAqIHNldHMgdGhlIHNvdXJjZSwgaWQsIGZpbGUgdHlwZSwgZmlsZSBuYW1lLCBhbmQgcGFyZW50IGZvbGRlciBpZCBvZiB0aGUgZmlsZSBvYmplY3QuXHJcblx0ICovXHJcblx0c3RhdGljIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyKTogUHJvbWlzZTxDRkVGaWxlPiB7XHJcblx0XHRjb25zdCBzb3VyY2VGb2xkZXIgPSBzbnYuc291cmNlRm9sZGVyO1xyXG5cclxuXHRcdC8vIFNldCB0aGUgdmFsdWVzIG9mIHRoZSB1bmZpbmlzaGVkIGZpbGVcclxuXHRcdGNvbnN0IHVuZmluaXNoZWRGaWxlID0gbmV3IENGRUZpbGUoKTtcclxuXHRcdHVuZmluaXNoZWRGaWxlLmlkID0gc291cmNlRm9sZGVyLmZpbGVDb3VudDtcclxuXHRcdHVuZmluaXNoZWRGaWxlLmZpbGVUeXBlID0gZmlsZVR5cGU7XHJcblx0XHR1bmZpbmlzaGVkRmlsZS5maWxlTmFtZSA9ICcnO1xyXG5cdFx0dW5maW5pc2hlZEZpbGUucGFyZW50Rm9sZGVySUQgPSBwYXJlbnRGb2xkZXJJRDtcclxuXHRcdFxyXG5cdFx0Ly8gVXBkYXRlIHRoZSBmaWxlIGNvdW50XHJcblx0XHRzb3VyY2VGb2xkZXIuZmlsZUNvdW50Kys7XHJcblx0XHRhd2FpdCBTb3VyY2VGb2xkZXIuU2F2ZShzbnYpO1xyXG5cclxuXHRcdC8vIEZpbmQgdGhlIHBhcmVudCBmb2xkZXIgYW5kIGFkZCB0aGlzIGZpbGUgdG8gaXRcclxuXHRcdGlmICh1bmZpbmlzaGVkRmlsZS5pZCAhPT0gdW5maW5pc2hlZEZpbGUucGFyZW50Rm9sZGVySUQpIHtcclxuXHRcdFx0Y29uc3QgcGFyZW50Rm9sZGVyID0gPEZvbGRlcj4gKGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgdW5maW5pc2hlZEZpbGUucGFyZW50Rm9sZGVySUQpKTtcclxuXHRcdFx0cGFyZW50Rm9sZGVyLmNvbnRhaW5lZEZpbGVJRHMucHVzaCh1bmZpbmlzaGVkRmlsZS5pZCk7XHJcblx0XHRcdGF3YWl0IHBhcmVudEZvbGRlci5TYXZlKHNudik7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmV0dXJuIHRoZSB1bmZpbmlzaGVkIGZpbGUgc28gdGhlIG5leHQgbGF5ZXIgY2FuIGFkZCB0byBpdFxyXG5cdFx0cmV0dXJuIHVuZmluaXNoZWRGaWxlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU0hPVUxEIE5PVCBCRSBDQUxMRUQgT1VUU0lERSBPRiBDRkVGaWxlSGFuZGxlci5cclxuXHQgKiBcclxuXHQgKiBVc2UgQ0ZFRmlsZUhhbmRsZXIuRGlzcGxheVRodW1ibmFpbCgpIGluc3RlYWQuXHJcblx0ICogXHJcblx0ICogQ0ZFRmlsZSBsYXllcjpcclxuXHQgKiBcclxuXHQgKiBzZXRzIHRoZSB0aHVtYm5haWwgY29udGFpbmVyJ3MgY3NzIGNsYXNzIHRvICdjZmUtdGh1bWJuYWlsJ1xyXG5cdCAqIGFuZCBmdWxseSBkaXNwbGF5cyB0aGUgZmlsZSBpZiB0aGUgdGh1bWJuYWlsIGlzIGNsaWNrZWQuXHJcblx0ICovXHJcblx0YXN5bmMgRGlzcGxheVRodW1ibmFpbChzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQsIHRodW1ibmFpbERpdjogSFRNTERpdkVsZW1lbnQsIGRpc3BsYXlEaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblx0XHR0aHVtYm5haWxEaXYuY2xhc3NOYW1lID0gJ2NmZS10aHVtYm5haWwgdmJveCc7XHJcblx0XHR0aHVtYm5haWxEaXYub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNvdXJjZUFuZFZhdWx0LCBkaXNwbGF5RGl2KTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGlkVGV4dCA9IHRodW1ibmFpbERpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdGlkVGV4dC50ZXh0Q29udGVudCA9ICdJRDogJyArIHRoaXMuaWQ7XHJcblx0XHRpZFRleHQuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnY2VudGVyJztcclxuXHRcdGNvbnN0IGZpbGVUZXh0ID0gdGh1bWJuYWlsRGl2LmNyZWF0ZURpdignaGJveCcpO1xyXG5cdFx0ZmlsZVRleHQudGV4dENvbnRlbnQgPSAnRmlsZSBUeXBlOiAnICsgdGhpcy5maWxlVHlwZTtcclxuXHRcdGZpbGVUZXh0LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2NlbnRlcic7XHJcblx0XHRjb25zdCBuYW1lVGV4dCA9IHRodW1ibmFpbERpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdG5hbWVUZXh0LnRleHRDb250ZW50ID0gJ0ZpbGUgTmFtZTogJyArIHRoaXMuZmlsZU5hbWU7XHJcblx0XHRuYW1lVGV4dC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBTSE9VTEQgTk9UIEJFIENBTExFRCBPVVRTSURFIE9GIENGRUZpbGVIYW5kbGVyLlxyXG5cdCAqIFxyXG5cdCAqIFVzZSBDRkVGaWxlSGFuZGxlci5EaXNwbGF5KCkgaW5zdGVhZC5cclxuXHQgKiBcclxuXHQgKiBDRkVGaWxlIGxheWVyOlxyXG5cdCAqIFxyXG5cdCAqIGVtcHRpZXMgdGhlIGRpc3BsYXkgY29udGFpbmVyIHByb3ZpZGVkLlxyXG5cdCAqL1xyXG5cdGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0Y29udGFpbmVyLmVtcHR5KCk7XHJcblx0XHRjb25zdCBoZWFkZXJDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCdoYm94Jyk7XHJcblx0XHRjb25zdCBiYWNrQnV0dG9uID0gaGVhZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdCYWNrIHRvIHBhcmVudCBmb2xkZXInIH0gKTtcclxuXHRcdGhlYWRlckNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0ZpbGUgSUQ6ICcgKyB0aGlzLmlkIH0gKVxyXG5cdFx0aGVhZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnRmlsZSBOYW1lOiAnIH0gKVxyXG5cdFx0Y29uc3QgbmFtZUlucHV0ID0gaGVhZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogdGhpcy5maWxlTmFtZSB9ICk7XHJcblx0XHRiYWNrQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IHBhcmVudEZvbGRlciA9IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgdGhpcy5wYXJlbnRGb2xkZXJJRCk7XHJcblx0XHRcdGlmIChwYXJlbnRGb2xkZXIgIT09IG51bGwpIHtcclxuXHRcdFx0XHRhd2FpdCBwYXJlbnRGb2xkZXIuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdG5hbWVJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy5maWxlTmFtZSA9IG5hbWVJbnB1dC52YWx1ZTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTSE9VTEQgTk9UIEJFIENBTExFRCBPVVRTSURFIE9GIENGRUZpbGVIYW5kbGVyLlxyXG5cdCAqIFxyXG5cdCAqIChpdCBpcyB1bmxpa2VseSB0aGlzIG1ldGhvZCB3aWxsIGV2ZXIgYmUgb3ZlcnJpZGVuIGJ5IGNoaWxkIGNsYXNzZXMsIGJ1dCBtYWtpbmcgdGhpcyAnaW5hY2Nlc3NpYmxlJyBpcyBmb3IgY29uc2lzdGVuY3kpXHJcblx0ICogXHJcblx0ICogVXNlIENGRUZpbGVIYW5kbGVyLlNhdmVGaWxlKCkgaW5zdGVhZC5cclxuXHQgKiBcclxuXHQgKiBGb3JtYXR0ZWQgRmlsZSBsYXllcjpcclxuXHQgKiBcclxuXHQgKiBEZWxldGVzIHRoaXMgZmlsZSBJRCBmcm9tIHRoZSBvcmlnaW5hbCBwYXJlbnQgZm9sZGVyLCBhZGRzIHRoaXMgZmlsZSB0byB0aGUgbmV3IHBhcmVudCBmb2xkZXIsIGFuZCBjaGFuZ2VzIHRoZSBwYXJlbnQgZm9sZGVyIElEXHJcblx0ICovXHJcblx0YXN5bmMgTW92ZUZpbGUoc291cmNlQW5kVmF1bHQ6IFNvdXJjZUFuZFZhdWx0LCBuZXdQYXJlbnRGb2xkZXJJRDogbnVtYmVyKSB7XHJcblx0XHQvLyBEZWxldGUgdGhpcyBmaWxlIGlkIGZyb20gdGhlIG9yaWdpbmFsIHBhcmVudCBmb2xkZXJcclxuXHRcdGNvbnN0IG9sZFBhcmVudEZvbGRlciA9IDxGb2xkZXI+IChhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzb3VyY2VBbmRWYXVsdCwgdGhpcy5wYXJlbnRGb2xkZXJJRCkpO1xyXG5cdFx0Y29uc3QgaW5kZXhPZkZpbGUgPSBvbGRQYXJlbnRGb2xkZXIuY29udGFpbmVkRmlsZUlEcy5pbmRleE9mKHRoaXMuaWQpO1xyXG5cdFx0b2xkUGFyZW50Rm9sZGVyLmNvbnRhaW5lZEZpbGVJRHMuc3BsaWNlKGluZGV4T2ZGaWxlLCAxKTtcclxuXHRcdG9sZFBhcmVudEZvbGRlci5TYXZlKHNvdXJjZUFuZFZhdWx0KTsgLy8gdGhpcyBjYW4gYmUgZG9uZSBhc3luY2hyb25vdXNseSB3aXRob3V0IGFmZmVjdGluZyB0aGUgb3RoZXJzXHJcblxyXG5cdFx0Ly8gQWRkIHRoaXMgZmlsZSB0byB0aGUgbmV3IHBhcmVudCBmb2xkZXJcclxuXHRcdGNvbnN0IG5ld1BhcmVudEZvbGRlciA9IDxGb2xkZXI+IChhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzb3VyY2VBbmRWYXVsdCwgbmV3UGFyZW50Rm9sZGVySUQpKTtcclxuXHRcdG5ld1BhcmVudEZvbGRlci5jb250YWluZWRGaWxlSURzLnB1c2godGhpcy5pZCk7XHJcblx0XHRuZXdQYXJlbnRGb2xkZXIuU2F2ZShzb3VyY2VBbmRWYXVsdCk7IC8vIHRoaXMgY2FuIGJlIGRvbmUgYXN5bmNocm9ub3VzbHkgd2l0aG91dCBhZmZlY3RpbmcgdGhlIG90aGVyc1xyXG5cclxuXHRcdHRoaXMucGFyZW50Rm9sZGVySUQgPSBuZXdQYXJlbnRGb2xkZXJJRDtcclxuXHRcdHRoaXMuU2F2ZShzb3VyY2VBbmRWYXVsdCk7IC8vIHRoaXMgY2FuIGJlIGRvbmUgYXN5bmNocm9ub3VzbHkgd2l0aG91dCBhZmZlY3RpbmcgdGhlIG90aGVyc1xyXG5cdH1cclxuXHJcblx0YXN5bmMgU2F2ZShzb3VyY2VBbmRWYXVsdDogU291cmNlQW5kVmF1bHQpIHtcclxuXHRcdGNvbnN0IHNvdXJjZUZvbGRlciA9IHNvdXJjZUFuZFZhdWx0LnNvdXJjZUZvbGRlcjtcclxuXHRcdGNvbnN0IHZhdWx0ID0gc291cmNlQW5kVmF1bHQudmF1bHQ7XHJcblx0XHRjb25zdCBmaWxlUGF0aCA9IHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyB0aGlzLmlkICsgJy5qc29uJztcclxuXHRcdGNvbnN0IGpzb25EYXRhID0gSlNPTi5zdHJpbmdpZnkodGhpcyk7XHJcblx0XHRjb25zdCB0RmlsZSA9IHZhdWx0LmdldEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xyXG5cdFx0aWYgKHRGaWxlID09PSBudWxsKSB7XHJcblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChmaWxlUGF0aCk7XHJcblx0XHRcdGF3YWl0IHZhdWx0LmFkYXB0ZXIud3JpdGUobm9ybWFsaXplZFBhdGgsIGpzb25EYXRhKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0YXdhaXQgdmF1bHQubW9kaWZ5KHRGaWxlLCBqc29uRGF0YSk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBub3JtYWxpemVQYXRoLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xyXG5pbXBvcnQgeyBSZWFsRmlsZSB9IGZyb20gXCIuL3JlYWwtZmlsZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpbmdsZU1lZGlhRmlsZSBleHRlbmRzIFJlYWxGaWxlIHtcclxuXHRcclxuXHRwcml2YXRlIGV4dGVuc2lvbk5hbWU6IHN0cmluZztcclxuXHRcclxuXHRnZXQgbWVkaWFUeXBlKCk6IHN0cmluZyB7XHJcblx0XHRzd2l0Y2ggKHRoaXMuZXh0ZW5zaW9uTmFtZSkge1xyXG5cdFx0XHRjYXNlICdwbmcnOlxyXG5cdFx0XHRjYXNlICdqcGcnOlxyXG5cdFx0XHRjYXNlICd3ZWJwJzpcclxuXHRcdFx0Y2FzZSAnaGVpYyc6XHJcblx0XHRcdGNhc2UgJ2dpZic6XHJcblx0XHRcdFx0cmV0dXJuICdJbWFnZSc7XHJcblx0XHRcdGNhc2UgJ21wNCc6XHJcblx0XHRcdGNhc2UgJ01QNCc6XHJcblx0XHRcdGNhc2UgJ21vdic6XHJcblx0XHRcdGNhc2UgJ01PVic6XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuICdWaWRlbyc7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvdmVycmlkZSBhc3luYyBnZXRTcmMoc252OiBTb3VyY2VBbmRWYXVsdCk6IFByb21pc2U8c3RyaW5nPiB7XHJcblx0XHRjb25zdCBtZWRpYUZpbGUgPSBhd2FpdCB0aGlzLmdldFRGaWxlKHNudik7XHJcblx0XHRjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHNudi52YXVsdC5yZWFkQmluYXJ5KG1lZGlhRmlsZSk7XHJcblx0XHRjb25zdCBibG9iID0gbmV3IEJsb2IoW2FycmF5QnVmZmVyXSk7XHJcblx0XHRjb25zdCBtZWRpYVVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcblx0XHRyZXR1cm4gbWVkaWFVcmw7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIGdldFRGaWxlKHNudjogU291cmNlQW5kVmF1bHQpOiBQcm9taXNlPFRGaWxlPiB7XHJcblx0XHRjb25zdCBtZWRpYVBhdGggPSBhd2FpdCB0aGlzLmdldFBhdGgoc252KTtcclxuXHRcdGxldCBtZWRpYUZpbGUgPSBzbnYudmF1bHQuZ2V0RmlsZUJ5UGF0aChtZWRpYVBhdGgpO1xyXG5cdFx0aWYgKG1lZGlhRmlsZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRtZWRpYUZpbGUgPSBzbnYudmF1bHQuZ2V0RmlsZUJ5UGF0aChtZWRpYVBhdGggKyAnLicgKyB0aGlzLmV4dGVuc2lvbk5hbWUpO1xyXG5cdFx0XHRpZiAobWVkaWFGaWxlID09PSBudWxsKSB7XHJcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ZpbGUgbm90IGZvdW5kIGF0IHBhdGg6ICcgKyBtZWRpYVBhdGggKyAnIG9yICcgKyBtZWRpYVBhdGggKyAnLicgKyB0aGlzLmV4dGVuc2lvbk5hbWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNudi52YXVsdC5yZW5hbWUobWVkaWFGaWxlLCBtZWRpYVBhdGgpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1lZGlhRmlsZTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgZ2V0UGF0aChzbnY6IFNvdXJjZUFuZFZhdWx0KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuXHRcdGNvbnN0IHNvdXJjZUZvbGRlciA9IHNudi5zb3VyY2VGb2xkZXI7XHJcblx0XHRyZXR1cm4gc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvJyArIHRoaXMuaWQgKyAnIEFjdHVhbCBGaWxlJztcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBvdmVycmlkZSBhc3luYyBDcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZVR5cGU6IHN0cmluZywgcGFyZW50Rm9sZGVySUQ6IG51bWJlcik6IFByb21pc2U8U2luZ2xlTWVkaWFGaWxlPiB7XHJcblx0XHRjb25zdCBuZXdNZWRpYUZpbGUgPSA8U2luZ2xlTWVkaWFGaWxlPiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklEKSk7XHJcblx0XHRuZXdNZWRpYUZpbGUuZXh0ZW5zaW9uTmFtZSA9ICcnO1xyXG5cdFx0cmV0dXJuIG5ld01lZGlhRmlsZTtcclxuXHR9XHJcblxyXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0YXdhaXQgc3VwZXIuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XHJcblxyXG5cdFx0Y29uc3QgaW1hZ2VEaXNwbGF5Q29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xyXG5cdFx0aW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ2hhbmdlIGZpbGUnIH0gKTtcclxuXHRcdGNvbnN0IG5ld0ZpbGVJbnB1dCA9IGltYWdlRGlzcGxheUNvbnRhaW5lci5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdmaWxlJyB9ICk7XHJcblxyXG5cdFx0YXdhaXQgdGhpcy5EaXNwbGF5TWVkaWFPbmx5KGltYWdlRGlzcGxheUNvbnRhaW5lciwgc252KTtcclxuXHRcdFxyXG5cdFx0bmV3RmlsZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGNvbnN0IG9sZEZpbGUgPSBhd2FpdCB0aGlzLmdldFRGaWxlKHNudik7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGF3YWl0IHNudi52YXVsdC5kZWxldGUob2xkRmlsZSk7XHJcblx0XHRcdFx0fSBmaW5hbGx5IHtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZU5ld0ZpbGUoc252LCBuZXdGaWxlSW5wdXQpO1xyXG5cdFx0XHRcdFx0dGhpcy5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gY2F0Y2gge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgU2F2ZU5ld0ZpbGUoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcblx0XHRjb25zdCBmaWxlQXJyYXkgPSBmaWxlSW5wdXQuZmlsZXM7XHJcblx0XHRpZiAoZmlsZUFycmF5ID09PSBudWxsKSB7XHJcblx0XHRcdHRocm93IEVycm9yKFwibm8gZmlsZSB3YXMgc2VsZWN0ZWRcIik7XHJcblx0XHR9XHJcblx0XHRjb25zdCBtZWRpYUZpbGUgPSBmaWxlQXJyYXlbMF07XHJcblx0XHRhd2FpdCB0aGlzLlNldEZpbGVUbyhzbnYsIG1lZGlhRmlsZSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBTZXRGaWxlVG8oc252OiBTb3VyY2VBbmRWYXVsdCwgbWVkaWFGaWxlOiBGaWxlKSB7XHJcblx0XHRjb25zdCBwYXJ0c09mUGF0aCA9IG1lZGlhRmlsZS5uYW1lLnNwbGl0KCcuJyk7XHJcblx0XHRjb25zdCBleHRlbnNpb24gPSBwYXJ0c09mUGF0aFtwYXJ0c09mUGF0aC5sZW5ndGggLSAxXTtcclxuXHRcdHRoaXMuZmlsZU5hbWUgPSBwYXJ0c09mUGF0aFswXTtcclxuXHRcdHRoaXMuZXh0ZW5zaW9uTmFtZSA9IGV4dGVuc2lvbjtcclxuXHRcdGNvbnN0IHBhdGggPSBzbnYuc291cmNlRm9sZGVyLnZhdWx0UGF0aCArICcvJyArIHRoaXMuaWQgKyAnIEFjdHVhbCBGaWxlJztcclxuXHRcdGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoKTtcclxuXHRcdGF3YWl0IHNudi52YXVsdC5hZGFwdGVyLndyaXRlQmluYXJ5KG5vcm1hbGl6ZWRQYXRoLCBhd2FpdCBtZWRpYUZpbGUuYXJyYXlCdWZmZXIoKSk7XHJcblx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIERpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXY6IEhUTUxEaXZFbGVtZW50LCBzbnY6IFNvdXJjZUFuZFZhdWx0KSB7XHJcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xyXG5cdFx0aWYgKHRoaXMubWVkaWFUeXBlID09PSAnSW1hZ2UnKSB7XHJcblx0XHRcdGNvbnN0IGltYWdlRWxlbWVudCA9IG1lZGlhRGl2LmNyZWF0ZUVsKCdpbWcnKTtcclxuXHRcdFx0aW1hZ2VFbGVtZW50LnNyYyA9IGF3YWl0IHRoaXMuZ2V0U3JjKHNudik7XHJcblx0XHRcdGltYWdlRWxlbWVudC5zdHlsZS5vYmplY3RGaXQgPSAnY29udGFpbic7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zdCB2aWRlb0VsZW1lbnQgPSBtZWRpYURpdi5jcmVhdGVFbCgndmlkZW8nKTtcclxuXHRcdFx0dmlkZW9FbGVtZW50LnNyYyA9IGF3YWl0IHRoaXMuZ2V0U3JjKHNudik7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5jb250cm9scyA9IHRydWU7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5sb29wID0gdHJ1ZTtcclxuXHRcdFx0dmlkZW9FbGVtZW50LmF1dG9wbGF5ID0gdHJ1ZTtcclxuXHRcdFx0dmlkZW9FbGVtZW50LnN0eWxlLm9iamVjdEZpdCA9ICdjb250YWluJztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xyXG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlYWxGaWxlIGV4dGVuZHMgQ0ZFRmlsZSB7XHJcblx0YWJzdHJhY3QgZ2V0U3JjKHNvdXJjZUFuZFZhdWx0OiBTb3VyY2VBbmRWYXVsdCk6IFByb21pc2U8c3RyaW5nPjtcclxuXHRhc3luYyBEaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2OiBIVE1MRGl2RWxlbWVudCwgc252OiBTb3VyY2VBbmRWYXVsdCkge1xyXG5cdFx0bWVkaWFEaXYuZW1wdHkoKTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xuaW1wb3J0IHsgQ0ZFRmlsZUhhbmRsZXIgfSBmcm9tIFwiLi9jZmUtZmlsZS1oYW5kbGVyXCI7XG5pbXBvcnQgeyBTaW5nbGVNZWRpYUZpbGUgfSBmcm9tIFwiLi9zaW5nbGUtbWVkaWEtZmlsZVwiO1xuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcblxuLyoqXG4gKiBBIGNoaWxkIGNsYXNzIG9mIHRoZSBDRkVGaWxlIGNsYXNzLiBSZXByZXNlbnRzIGEgZm9sZGVyIHdpdGhpbiB0aGUgU291cmNlRm9sZGVyLlxuICovXG5leHBvcnQgY2xhc3MgRm9sZGVyIGV4dGVuZHMgQ0ZFRmlsZSB7XG5cdC8qKlxuXHQgKiBUaGUgSURzIG9mIGZpbGVzIGNvbnRhaW5lZCBpbiB0aGlzIGZvbGRlclxuXHQgKi9cblx0Y29udGFpbmVkRmlsZUlEczogbnVtYmVyW107XG5cblx0LyoqXG5cdCAqIEBvdmVycmlkZSBGb2xkZXIgbGF5ZXI6XG5cdCAqIFxuXHQgKiBpbml0aWFsaXplcyB0aGUgY29udGFpbmVkIGZpbGUgaWRzIGFycmF5IGZvciB0aGUgZm9sZGVyIG9iamVjdFxuXHQgKi9cblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyKTogUHJvbWlzZTxGb2xkZXI+IHtcblx0XHRjb25zdCB1bmZpbmlzaGVkRm9sZGVyID0gPEZvbGRlcj4gKGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCkpO1xuXHRcdHVuZmluaXNoZWRGb2xkZXIuY29udGFpbmVkRmlsZUlEcyA9IFtdO1xuXHRcdHJldHVybiB1bmZpbmlzaGVkRm9sZGVyO1xuXHR9XG5cblx0b3ZlcnJpZGUgYXN5bmMgRGlzcGxheShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBtYWluRGl2KTtcblx0XHRjb25zdCBjcmVhdGVCdXR0b25zRGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcblx0XHRjb25zdCBuZXdGaWxlQnV0dG9uID0gY3JlYXRlQnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQ3JlYXRlIE5ldyBGaWxlJyB9ICk7XG5cdFx0bmV3RmlsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5Mb2FkQ3JlYXRlRmlsZVVJKHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXHRcdGNvbnN0IG1lZGlhRmlsZXNCdXR0b24gPSBjcmVhdGVCdXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdVcGxvYWQgTXVsdGlwbGUgSW1hZ2VzIC8gVmlkZW9zJyB9ICk7XG5cdFx0bWVkaWFGaWxlc0J1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5Mb2FkRmlsZVNlbGVjdGlvblVJKHNudiwgbWFpbkRpdik7XG5cdFx0fVxuXHRcdGNvbnN0IGZvbGRlckRpc3BsYXlDb250YWluZXIgPSBtYWluRGl2LmNyZWF0ZURpdignY2ZlLWdyaWQnKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGFpbmVkRmlsZUlEcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY29udGFpbmVkRmlsZSA9IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgdGhpcy5jb250YWluZWRGaWxlSURzW2ldKTtcblx0XHRcdGlmIChjb250YWluZWRGaWxlICE9PSBudWxsKSB7XG5cdFx0XHRcdGF3YWl0IGNvbnRhaW5lZEZpbGUuRGlzcGxheVRodW1ibmFpbChzbnYsIGZvbGRlckRpc3BsYXlDb250YWluZXIuY3JlYXRlRGl2KCksIG1haW5EaXYpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cHJpdmF0ZSBMb2FkQ3JlYXRlRmlsZVVJKHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KSB7XG5cdFx0Y29uc3QgcG9wVXBDb250YWluZXIgPSBtYWluRGl2LmNyZWF0ZURpdigndmJveCBjZmUtcG9wdXAnKTtcblx0XHRjb25zdCB3cmFwcGVyRGl2ID0gcG9wVXBDb250YWluZXIuY3JlYXRlRGl2KCk7XG5cdFx0d3JhcHBlckRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cdFx0Y29uc3QgZXhpdEJ1dHRvbiA9IHdyYXBwZXJEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1gnLCBjbHM6ICdjZmUtcmVtb3ZlLWJ1dHRvbicgfSApO1xuXHRcdGV4aXRCdXR0b24uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdGV4aXRCdXR0b24uc3R5bGUudG9wID0gJzAlJztcblx0XHRleGl0QnV0dG9uLnN0eWxlLnJpZ2h0ID0gJzAlJztcblx0XHRleGl0QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRwb3BVcENvbnRhaW5lci5yZW1vdmUoKTtcblx0XHR9XG5cdFx0cG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdDaG9vc2UgYSBGaWxlIFR5cGUgdG8gY3JlYXRlOiAnIH0gKTtcblx0XHRjb25zdCBmaWxlVHlwZURyb3Bkb3duID0gcG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ3NlbGVjdCcpO1xuXHRcdHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnUGFyZW50IEZvbGRlciBJRDogJyB9ICk7XG5cdFx0Y29uc3QgcGFyZW50Rm9sZGVySURJbnB1dCA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogJycgKyB0aGlzLmlkIH0gKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IENGRUZpbGVIYW5kbGVyLktub3duRmlsZVR5cGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBvcHRpb24gPSBmaWxlVHlwZURyb3Bkb3duLmNyZWF0ZUVsKCdvcHRpb24nKTtcblx0XHRcdG9wdGlvbi52YWx1ZSA9IENGRUZpbGVIYW5kbGVyLktub3duRmlsZVR5cGVzW2ldO1xuXHRcdFx0b3B0aW9uLnRleHQgPSBDRkVGaWxlSGFuZGxlci5Lbm93bkZpbGVUeXBlc1tpXTtcblx0XHRcdGZpbGVUeXBlRHJvcGRvd24ub3B0aW9ucy5hZGQob3B0aW9uKTtcblx0XHR9XG5cdFx0Y29uc3Qgc3VibWl0QnV0dG9uID0gcG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0NyZWF0ZScgfSApO1xuXHRcdHN1Ym1pdEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgQ0ZFRmlsZUhhbmRsZXIuQ3JlYXRlTmV3KHNudiwgZmlsZVR5cGVEcm9wZG93bi52YWx1ZSwgcGFyc2VJbnQocGFyZW50Rm9sZGVySURJbnB1dC52YWx1ZSkpO1xuXHRcdFx0ZXhpdEJ1dHRvbi5jbGljaygpO1xuXHRcdFx0Y29uc3QgcmVzZXR0ZWRGb2xkZXIgPSBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMuaWQpO1xuXHRcdFx0YXdhaXQgcmVzZXR0ZWRGb2xkZXIuRGlzcGxheShzbnYsIG1haW5EaXYpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgTG9hZEZpbGVTZWxlY3Rpb25VSShzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xuXHRcdGNvbnN0IHBvcFVwQ29udGFpbmVyID0gbWFpbkRpdi5jcmVhdGVEaXYoJ3Zib3ggY2ZlLXBvcHVwJyk7XG5cdFx0cG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdDaG9vc2UgeW91ciBmaWxlcycgfSApO1xuXHRcdGNvbnN0IGZpbGVJbnB1dCA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2ZpbGUnIH0gKTtcblx0XHRmaWxlSW5wdXQubXVsdGlwbGUgPSB0cnVlO1xuXHRcdHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnUGFyZW50IEZvbGRlciBJRDogJyB9ICk7XG5cdFx0Y29uc3QgcGFyZW50Rm9sZGVySURJbnB1dCA9IHBvcFVwQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogJycgKyB0aGlzLmlkIH0gKTtcblx0XHRjb25zdCBleGl0QnV0dG9uID0gcG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1gnLCBjbHM6ICdjZmUtZXhpdC1idXR0b24nIH0gKTtcblx0XHRleGl0QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cdFx0XHRwb3BVcENvbnRhaW5lci5yZW1vdmUoKTtcblx0XHR9XG5cdFx0Y29uc3Qgc3VibWl0QnV0dG9uID0gcG9wVXBDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0NyZWF0ZScgfSApO1xuXHRcdHN1Ym1pdEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0Y29uc3QgZmlsZUFycmF5ID0gZmlsZUlucHV0LmZpbGVzO1xuXHRcdFx0Y29uc3QgcGFyZW50Rm9sZGVySUQgPSBwYXJzZUludChwYXJlbnRGb2xkZXJJRElucHV0LnZhbHVlKTtcblx0XHRcdGlmIChmaWxlQXJyYXkgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlQXJyYXkubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb25zdCBjZmVGaWxlID0gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuQ3JlYXRlTmV3KHNudiwgJ1NpbmdsZSBNZWRpYSBGaWxlJywgcGFyZW50Rm9sZGVySUQpO1xuXHRcdFx0XHRcdGNvbnN0IG1lZGlhRmlsZSA9IE9iamVjdC5hc3NpZ24obmV3IFNpbmdsZU1lZGlhRmlsZSgpLCBjZmVGaWxlKTtcblx0XHRcdFx0XHRhd2FpdCBtZWRpYUZpbGUuU2V0RmlsZVRvKHNudiwgZmlsZUFycmF5W2ldKTtcblx0XHRcdFx0XHRhd2FpdCBtZWRpYUZpbGUuU2F2ZShzbnYpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGV4aXRCdXR0b24uY2xpY2soKTtcblx0XHRcdFx0Y29uc3QgcmVzZXR0ZWRGb2xkZXIgPSBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMuaWQpO1xuXHRcdFx0XHRhd2FpdCByZXNldHRlZEZvbGRlci5EaXNwbGF5KHNudiwgbWFpbkRpdik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iLCAiaW1wb3J0IHsgQ0ZFRmlsZSB9IGZyb20gXCIuL2NmZS1maWxlXCI7XHJcbmltcG9ydCB7IENGRUZpbGVIYW5kbGVyIH0gZnJvbSBcIi4vY2ZlLWZpbGUtaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBSZWFsRmlsZSB9IGZyb20gXCIuL3JlYWwtZmlsZVwiO1xyXG5pbXBvcnQgeyBTb3VyY2VBbmRWYXVsdCB9IGZyb20gXCIuL3NudlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBsYXlsaXN0IGV4dGVuZHMgQ0ZFRmlsZSB7XHJcblx0cHJpdmF0ZSBjdXJyZW50VmlkZW9JbmRleDogbnVtYmVyO1xyXG5cdHZpZGVvSURzOiBudW1iZXJbXTtcclxuXHJcblx0cHJpdmF0ZSB2aWRlb09yZGVyOiBzdHJpbmc7XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIGdldE5leHRWaWRlb0lESW5PcmRlcihwbGF5bGlzdDogUGxheWxpc3QpIHtcclxuXHRcdGxldCBuZXh0VmlkZW9JbmRleCA9IHBsYXlsaXN0LmN1cnJlbnRWaWRlb0luZGV4ICsgMTtcclxuXHRcdGlmIChuZXh0VmlkZW9JbmRleCA+PSBwbGF5bGlzdC52aWRlb0lEcy5sZW5ndGgpIHtcclxuXHRcdFx0bmV4dFZpZGVvSW5kZXggPSAwO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5leHRWaWRlb0luZGV4O1xyXG5cdH1cclxuXHRwcml2YXRlIHN0YXRpYyBnZXROZXh0VmlkZW9JRFNodWZmbGVkKHBsYXlsaXN0OiBQbGF5bGlzdCkge1xyXG5cdFx0bGV0IG5leHRWaWRlb0luZGV4ID0gTWF0aC5yYW5kb20oKSAqIHBsYXlsaXN0LnZpZGVvSURzLmxlbmd0aDtcclxuXHRcdG5leHRWaWRlb0luZGV4ID0gTWF0aC5mbG9vcihuZXh0VmlkZW9JbmRleCk7XHJcblx0XHRyZXR1cm4gbmV4dFZpZGVvSW5kZXg7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBhc3luYyBsb2FkTmV4dFZpZGVvKHNvdXJjZUFuZFZhdWx0OiBTb3VyY2VBbmRWYXVsdCwgcGxheWxpc3Q6IFBsYXlsaXN0LCB2aWRlb0VsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQpIHtcclxuXHRcdGlmIChwbGF5bGlzdC52aWRlb09yZGVyID09PSAnc2h1ZmZsZWQnKSB7XHJcblx0XHRcdHBsYXlsaXN0LmN1cnJlbnRWaWRlb0luZGV4ID0gUGxheWxpc3QuZ2V0TmV4dFZpZGVvSURTaHVmZmxlZChwbGF5bGlzdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwbGF5bGlzdC5jdXJyZW50VmlkZW9JbmRleCA9IFBsYXlsaXN0LmdldE5leHRWaWRlb0lESW5PcmRlcihwbGF5bGlzdCk7XHJcblx0XHR9XHJcblx0XHRjb25zdCBuZXh0VmlkZW8gPSA8UmVhbEZpbGU+IChhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzb3VyY2VBbmRWYXVsdCwgcGxheWxpc3QudmlkZW9JRHNbcGxheWxpc3QuY3VycmVudFZpZGVvSW5kZXhdKSk7XHJcblxyXG5cdFx0dmlkZW9FbGVtZW50LnNyYyA9IGF3YWl0IG5leHRWaWRlby5nZXRTcmMoc291cmNlQW5kVmF1bHQpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyKTogUHJvbWlzZTxQbGF5bGlzdD4ge1xyXG5cdFx0Y29uc3QgbmV3UGxheWxpc3RGaWxlID0gPFBsYXlsaXN0PiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklEKSk7XHJcblx0XHRuZXdQbGF5bGlzdEZpbGUudmlkZW9JRHMgPSBbXTtcclxuXHRcdHJldHVybiBuZXdQbGF5bGlzdEZpbGU7XHJcblx0fVxyXG5cclxuXHRvdmVycmlkZSBhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xyXG5cdFx0dGhpcy5jdXJyZW50VmlkZW9JbmRleCA9IDA7XHJcblx0XHRjb25zdCB2aWRlb0Rpc3BsYXlDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KCdjZmUtZGlzcGxheS12aWRlbycpO1xyXG5cdFx0Y29uc3QgdmlkZW9FbGVtZW50ID0gdmlkZW9EaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCd2aWRlbycpO1xyXG5cdFx0Y29uc3QgYnV0dG9uc0NvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdGNvbnN0IGhpZGVCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdoaWRlIHZpZGVvJyB9ICk7XHJcblx0XHRoaWRlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdGlmIChoaWRlQnV0dG9uLnRleHRDb250ZW50ID09PSAnaGlkZSB2aWRlbycpIHtcclxuXHRcdFx0XHRoaWRlQnV0dG9uLnRleHRDb250ZW50ID0gJ3Nob3cgdmlkZW8nO1xyXG5cdFx0XHRcdHZpZGVvRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGhpZGVCdXR0b24udGV4dENvbnRlbnQgPSAnaGlkZSB2aWRlbyc7XHJcblx0XHRcdFx0dmlkZW9FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGNvbnN0IHNodWZmbGVCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdzaHVmZmxlJyB9ICk7XHJcblx0XHR0aGlzLnZpZGVvT3JkZXIgPSAnaW4gb3JkZXInO1xyXG5cdFx0c2h1ZmZsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG5cdFx0XHRpZiAoc2h1ZmZsZUJ1dHRvbi50ZXh0Q29udGVudCA9PT0gJ3NodWZmbGUnKSB7XHJcblx0XHRcdFx0c2h1ZmZsZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdnbyBpbiBvcmRlcic7XHJcblx0XHRcdFx0dGhpcy52aWRlb09yZGVyID0gJ3NodWZmbGVkJztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzaHVmZmxlQnV0dG9uLnRleHRDb250ZW50ID0gJ3NodWZmbGUnO1xyXG5cdFx0XHRcdHRoaXMudmlkZW9PcmRlciA9ICdpbiBvcmRlcic7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGNvbnN0IG5leHRCdXR0b24gPSBidXR0b25zQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICduZXh0IHZpZGVvJyB9ICk7XHJcblx0XHRuZXh0QnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGF3YWl0IFBsYXlsaXN0LmxvYWROZXh0VmlkZW8oc252LCB0aGlzLCB2aWRlb0VsZW1lbnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IGZpcnN0VmlkZW8gPSA8UmVhbEZpbGU+IChhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIHRoaXMudmlkZW9JRHNbdGhpcy5jdXJyZW50VmlkZW9JbmRleF0pKTtcclxuXHRcdFx0dmlkZW9FbGVtZW50LnNyYyA9IGF3YWl0IGZpcnN0VmlkZW8uZ2V0U3JjKHNudik7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5hdXRvcGxheSA9IHRydWU7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5jb250cm9scyA9IHRydWU7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5vbnRpbWV1cGRhdGUgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0aWYgKHZpZGVvRWxlbWVudC5lbmRlZCkge1xyXG5cdFx0XHRcdFx0YXdhaXQgUGxheWxpc3QubG9hZE5leHRWaWRlbyhzbnYsIHRoaXMsIHZpZGVvRWxlbWVudCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRjb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdDaGFuZ2UgZmlsZXMnIH0gKTtcclxuXHRcdFx0bGV0IGNvdW50ID0gMDtcclxuXHRcdFx0Y29uc3QgbWVkaWFJRElucHV0RGl2ID0gY29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xyXG5cdFx0XHRjb25zdCBuZXdGaWxlQnV0dG9uID0gY29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdBZGQgRmlsZScgfSApO1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmlkZW9JRHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRjb25zdCBjdXJyZW50SW5kZXggPSBjb3VudDtcclxuXHRcdFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdGNvbnN0IG1lZGlhSUREaXYgPSBtZWRpYUlESW5wdXREaXYuY3JlYXRlRGl2KCdoYm94Jyk7XHJcblx0XHRcdFx0Y29uc3QgaWRJbnB1dCA9IG1lZGlhSUREaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyArIHRoaXMudmlkZW9JRHNbY3VycmVudEluZGV4XSB9ICk7XHJcblx0XHRcdFx0Y29uc3QgZGVsZXRlQnV0dG9uID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnZGVsZXRlJyB9ICk7XHJcblx0XHRcdFx0ZGVsZXRlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdFx0XHRtZWRpYUlERGl2LnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0dGhpcy52aWRlb0lEcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcclxuXHRcdFx0XHRcdHRoaXMuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlkSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnZpZGVvSURzW2N1cnJlbnRJbmRleF0gPSBwYXJzZUludChpZElucHV0LnZhbHVlKTtcclxuXHRcdFx0XHRcdHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRuZXdGaWxlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgY3VycmVudEluZGV4ID0gY291bnQ7XHJcblx0XHRcdFx0Y291bnQrKztcclxuXHRcdFx0XHRjb25zdCBtZWRpYUlERGl2ID0gbWVkaWFJRElucHV0RGl2LmNyZWF0ZURpdignaGJveCcpO1xyXG5cdFx0XHRcdGNvbnN0IGlkSW5wdXQgPSBtZWRpYUlERGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnIH0gKTtcclxuXHRcdFx0XHRjb25zdCBkZWxldGVCdXR0b24gPSBtZWRpYUlERGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdkZWxldGUnIH0gKTtcclxuXHRcdFx0XHRkZWxldGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0XHRcdG1lZGlhSUREaXYucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHR0aGlzLnZpZGVvSURzLnNwbGljZShjdXJyZW50SW5kZXgsIDEpO1xyXG5cdFx0XHRcdFx0dGhpcy5EaXNwbGF5KHNudiwgY29udGFpbmVyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWRJbnB1dC5vbmNoYW5nZSA9ICgpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMudmlkZW9JRHNbY3VycmVudEluZGV4XSA9IHBhcnNlSW50KGlkSW5wdXQudmFsdWUpO1xyXG5cdFx0XHRcdFx0dGhpcy5TYXZlKHNudik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBDRkVGaWxlSGFuZGxlciB9IGZyb20gXCIuL2NmZS1maWxlLWhhbmRsZXJcIjtcclxuaW1wb3J0IHsgUmVhbEZpbGUgfSBmcm9tIFwiLi9yZWFsLWZpbGVcIjtcclxuaW1wb3J0IHsgU2luZ2xlTWVkaWFGaWxlIH0gZnJvbSBcIi4vc2luZ2xlLW1lZGlhLWZpbGVcIjtcclxuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWYXJpYW50TWVkaWFGaWxlIGV4dGVuZHMgUmVhbEZpbGUge1xyXG5cclxuXHRwcml2YXRlIHZhcmlhbnRJRHM6IG51bWJlcltdO1xyXG5cclxuXHRhc3luYyBnZXRTcmMoc252OiBTb3VyY2VBbmRWYXVsdCwgaW5kZXg6IG51bWJlciB8IG51bGwgPSBudWxsKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuXHRcdGlmIChpbmRleCA9PT0gbnVsbCkge1xyXG5cdFx0XHRpbmRleCA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkpICogdGhpcy52YXJpYW50SURzLmxlbmd0aCk7XHJcblx0XHR9XHJcblx0XHRjb25zdCBjb250YWluZWRNZWRpYSA9IDxTaW5nbGVNZWRpYUZpbGU+IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgdGhpcy52YXJpYW50SURzW2luZGV4XSk7XHJcblx0XHRyZXR1cm4gYXdhaXQgY29udGFpbmVkTWVkaWEuZ2V0U3JjKHNudik7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudjogU291cmNlQW5kVmF1bHQsIGZpbGVUeXBlOiBzdHJpbmcsIHBhcmVudEZvbGRlcklEOiBudW1iZXIpOiBQcm9taXNlPFZhcmlhbnRNZWRpYUZpbGU+IHtcclxuXHRcdGNvbnN0IG5ld01lZGlhRmlsZSA9IDxWYXJpYW50TWVkaWFGaWxlPiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklEKSk7XHJcblx0XHRuZXdNZWRpYUZpbGUudmFyaWFudElEcyA9IFtdO1xyXG5cdFx0cmV0dXJuIG5ld01lZGlhRmlsZTtcclxuXHR9XHJcblxyXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0YXdhaXQgc3VwZXIuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XHJcblxyXG5cdFx0Y29uc3QgaW1hZ2VEaXNwbGF5Q29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdigndmJveCcpO1xyXG5cdFx0aW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnQ2hhbmdlIGZpbGVzJyB9ICk7XHJcblx0XHRjb25zdCBtZWRpYUlESW5wdXREaXYgPSBpbWFnZURpc3BsYXlDb250YWluZXIuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0XHRjb25zdCBuZXdGaWxlQnV0dG9uID0gaW1hZ2VEaXNwbGF5Q29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdBZGQgRmlsZScgfSApO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhcmlhbnRJRHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgY3VycmVudEluZGV4ID0gaTtcclxuXHRcdFx0Y29uc3QgbWVkaWFJRERpdiA9IG1lZGlhSURJbnB1dERpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdFx0Y29uc3QgaWRJbnB1dCA9IG1lZGlhSUREaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyArIHRoaXMudmFyaWFudElEc1tjdXJyZW50SW5kZXhdIH0gKTtcclxuXHRcdFx0Y29uc3QgZGVsZXRlQnV0dG9uID0gbWVkaWFJRERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnZGVsZXRlJyB9ICk7XHJcblx0XHRcdGRlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSAnY2ZlLXJlbW92ZS1idXR0b24nO1xyXG5cdFx0XHRkZWxldGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRtZWRpYUlERGl2LnJlbW92ZSgpO1xyXG5cdFx0XHRcdHRoaXMudmFyaWFudElEcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlkSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy52YXJpYW50SURzW2N1cnJlbnRJbmRleF0gPSBwYXJzZUludChpZElucHV0LnZhbHVlKTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLkRpc3BsYXkoc252LCBjb250YWluZXIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRuZXdGaWxlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMudmFyaWFudElEcy5wdXNoKC0xKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIGNvbnRhaW5lcik7XHJcblx0XHR9XHJcblx0XHRjb25zdCBtZWRpYURpdiA9IGltYWdlRGlzcGxheUNvbnRhaW5lci5jcmVhdGVEaXYoJ3Zib3gnKTtcclxuXHRcdFxyXG5cdFx0YXdhaXQgdGhpcy5EaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2LCBzbnYpO1xyXG5cdH1cclxuXHRhc3luYyBEaXNwbGF5TWVkaWFPbmx5KG1lZGlhRGl2OiBIVE1MRGl2RWxlbWVudCwgc252OiBTb3VyY2VBbmRWYXVsdCwgaW5kZXggPSAtMSkge1xyXG5cdFx0Ly8gVGhpcyBjYWxsIGlzIG5vdCBuZWVkZWQgYmVjYXVzZSBjb250YWluZWRNZWRpYS5EaXNwbGF5TWVkaWFPbmx5KCkgY2FsbHMgaXQgYW55d2F5XHJcblx0XHQvLyBhd2FpdCBzdXBlci5EaXNwbGF5TWVkaWFPbmx5XHJcblx0XHRpZiAoaW5kZXggPT09IC0xKSB7XHJcblx0XHRcdGluZGV4ID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSkgKiB0aGlzLnZhcmlhbnRJRHMubGVuZ3RoKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGNvbnRhaW5lZE1lZGlhID0gPFNpbmdsZU1lZGlhRmlsZT4gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCB0aGlzLnZhcmlhbnRJRHNbaW5kZXhdKTtcclxuXHRcdGF3YWl0IGNvbnRhaW5lZE1lZGlhLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBDRkVGaWxlIH0gZnJvbSBcIi4vY2ZlLWZpbGVcIjtcclxuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcclxuaW1wb3J0IHsgU291cmNlRm9sZGVyIH0gZnJvbSBcIi4vc291cmNlLWZvbGRlclwiO1xyXG5cclxuLyoqXHJcbiAqIEEgY2hpbGQgY2xhc3Mgb2YgdGhlIENGRUZpbGUgY2xhc3MuIFJlcHJlc2VudHMgYSBmb2xkZXIgd2l0aGluIHRoZSBTb3VyY2VGb2xkZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU291cmNlRm9sZGVyU2hvcnRjdXQgZXh0ZW5kcyBDRkVGaWxlIHtcclxuXHQvKipcclxuXHQgKiBUaGUgSURzIG9mIGZpbGVzIGNvbnRhaW5lZCBpbiB0aGlzIGZvbGRlclxyXG5cdCAqL1xyXG5cdHBhdGhUb090aGVyU291cmNlOiBzdHJpbmc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBvdmVycmlkZSBGb2xkZXIgbGF5ZXI6XHJcblx0ICogXHJcblx0ICogaW5pdGlhbGl6ZXMgdGhlIGNvbnRhaW5lZCBmaWxlIGlkcyBhcnJheSBmb3IgdGhlIGZvbGRlciBvYmplY3RcclxuXHQgKi9cclxuXHRzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudjogU291cmNlQW5kVmF1bHQsIGZpbGVUeXBlOiBzdHJpbmcsIHBhcmVudEZvbGRlcklEOiBudW1iZXIpOiBQcm9taXNlPFNvdXJjZUZvbGRlclNob3J0Y3V0PiB7XHJcblx0XHRjb25zdCB1bmZpbmlzaGVkRm9sZGVyID0gPFNvdXJjZUZvbGRlclNob3J0Y3V0PiAoYXdhaXQgc3VwZXIuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklEKSk7XHJcblx0XHR1bmZpbmlzaGVkRm9sZGVyLnBhdGhUb090aGVyU291cmNlID0gJyc7XHJcblx0XHRyZXR1cm4gdW5maW5pc2hlZEZvbGRlcjtcclxuXHR9XHJcblxyXG5cdG92ZXJyaWRlIGFzeW5jIERpc3BsYXkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGF3YWl0IHN1cGVyLkRpc3BsYXkoc252LCBtYWluRGl2KTtcclxuXHRcdGNvbnN0IGlucHV0RGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcclxuXHRcdGlucHV0RGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnUGF0aCB0byBPdGhlciBTb3VyY2UgRm9sZGVyJyB9ICk7XHJcblx0XHRjb25zdCBwYXRoSW5wdXQgPSBpbnB1dERpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyB9ICk7XHJcblx0XHRjb25zdCBnb0J1dHRvbiA9IGlucHV0RGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdHbycgfSApO1xyXG5cdFx0cGF0aElucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnBhdGhUb090aGVyU291cmNlID0gcGF0aElucHV0LnZhbHVlO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdH1cclxuXHRcdGdvQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IG90aGVyU291cmNlID0gYXdhaXQgU291cmNlRm9sZGVyLkNyZWF0ZU9yTG9hZFNvdXJjZUZvbGRlcih0aGlzLnBhdGhUb090aGVyU291cmNlLCBzbnYudmF1bHQpO1xyXG5cdFx0XHRvdGhlclNvdXJjZS5EaXNwbGF5KG1haW5EaXYsIHNudi52YXVsdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdH1cclxuIiwgImV4cG9ydCBjbGFzcyBId2F5dSB7XHJcblx0c3RhdGljIERpc3BsYXkoZGl2OiBIVE1MRGl2RWxlbWVudCwgdGV4dCA9ICcnLCBmb250U2l6ZSA9IDIwLCBpc1ZlcnRpY2FsID0gdHJ1ZSk6IEhUTUxFbGVtZW50IHtcclxuXHRcdGNvbnN0IHRleHRFbGVtZW50ID0gZGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiB0ZXh0IH0gKTtcclxuXHRcdHRleHRFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBpc1ZlcnRpY2FsID8gJ0h3YXl1UmVhbCcgOiAnSHdheXVIb3Jpem9udGFsJztcclxuXHRcdHRleHRFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgKyAncHgnO1xyXG5cdFx0aWYgKGlzVmVydGljYWwpIHtcclxuXHRcdFx0dGV4dEVsZW1lbnQuc3R5bGUud3JpdGluZ01vZGUgPSAndmVydGljYWwtbHInO1xyXG5cdFx0XHR0ZXh0RWxlbWVudC5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGV4dEVsZW1lbnQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgQ3JlYXRlVGV4dEFyZWEoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdUZXh0ID0gJycsIGZvbnRTaXplID0gMjAsIGlzVmVydGljYWwgPSB0cnVlKTogSFRNTFRleHRBcmVhRWxlbWVudCB7XHJcblx0XHRjb25zdCB0ZXh0QXJlYSA9IGRpdi5jcmVhdGVFbCgndGV4dGFyZWEnLCB7IHRleHQ6IGV4aXN0aW5nVGV4dCB9ICk7XHJcblx0XHR0ZXh0QXJlYS5zdHlsZS5mb250RmFtaWx5ID0gaXNWZXJ0aWNhbCA/ICdId2F5dVJlYWwnIDogJ0h3YXl1SG9yaXpvbnRhbCc7XHJcblx0XHR0ZXh0QXJlYS5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICsgJ3B4JztcclxuXHRcdGlmIChpc1ZlcnRpY2FsKSB7XHJcblx0XHRcdHRleHRBcmVhLnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHRcdFx0dGV4dEFyZWEuc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xyXG5cdFx0fVxyXG5cdFx0dGV4dEFyZWEuc3BlbGxjaGVjayA9IGZhbHNlO1xyXG5cdFx0cmV0dXJuIHRleHRBcmVhO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIENyZWF0ZVRleHRJbnB1dChkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1RleHQgPSAnJywgZm9udFNpemUgPSAyMCwgaXNWZXJ0aWNhbCA9IHRydWUpOiBIVE1MSW5wdXRFbGVtZW50IHtcclxuXHRcdGNvbnN0IHRleHRJbnB1dCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IGV4aXN0aW5nVGV4dCB9ICk7XHJcblx0XHR0ZXh0SW5wdXQuc3R5bGUuZm9udEZhbWlseSA9IGlzVmVydGljYWwgPyAnSHdheXVSZWFsJyA6ICdId2F5dUhvcml6b250YWwnO1xyXG5cdFx0dGV4dElucHV0LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgKyAncHgnO1xyXG5cdFx0aWYgKGlzVmVydGljYWwpIHtcclxuXHRcdFx0dGV4dElucHV0LnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHRcdFx0dGV4dElucHV0LnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0JztcclxuXHRcdH1cclxuXHRcdHRleHRJbnB1dC5zcGVsbGNoZWNrID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdGV4dElucHV0O1xyXG5cdH1cclxufVxyXG4iLCAiZXhwb3J0IGNsYXNzIFBob3RvTGFuZyB7XHJcblx0c3RhdGljIERpc3BsYXkoZGl2OiBIVE1MRGl2RWxlbWVudCwgdGV4dCA9ICcnLCBmb250U2l6ZSA9IDEwLCBtb3ZlU3BlZWRzOiBudW1iZXJbXSB8IG51bGwgPSBudWxsLCBkdXJhdGlvbnM6IG51bWJlcltdIHwgbnVsbCA9IG51bGwsIGRvTG9vcCA9IGZhbHNlKTogSFRNTEVsZW1lbnQge1xyXG5cdFx0Y29uc3QgbGluZSA9IG5ldyBQaG90b0xpbmUodGV4dCk7XHJcblx0XHRpZiAoIW1vdmVTcGVlZHMpIHtcclxuXHRcdFx0bW92ZVNwZWVkcyA9IFsxMDAsIDI1MCwgNTAwXTtcclxuXHRcdH1cclxuXHRcdGlmICghZHVyYXRpb25zKSB7XHJcblx0XHRcdGR1cmF0aW9ucyA9IFswLCA1MDBdO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgZGlzcGxheURpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHRcdGxpbmUuU3BlYWsoZGlzcGxheURpdiwgZm9udFNpemUsIG1vdmVTcGVlZHMsIGR1cmF0aW9ucywgZG9Mb29wKTtcclxuXHRcdHJldHVybiBkaXNwbGF5RGl2O1xyXG5cdH1cclxuXHRzdGF0aWMgQ3JlYXRlVGV4dEFyZWEoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdUZXh0ID0gJycsIGZvbnRTaXplID0gMTcuNSk6IEhUTUxUZXh0QXJlYUVsZW1lbnQge1xyXG5cdFx0Y29uc3QgdGV4dEFyZWEgPSBkaXYuY3JlYXRlRWwoJ3RleHRhcmVhJywgeyB0ZXh0OiBleGlzdGluZ1RleHQgfSApO1xyXG5cdFx0dGV4dEFyZWEuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZSArICdweCc7XHJcblx0XHR0ZXh0QXJlYS5zcGVsbGNoZWNrID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdGV4dEFyZWE7XHJcblx0fVxyXG5cdHN0YXRpYyBDcmVhdGVUZXh0SW5wdXQoZGl2OiBIVE1MRGl2RWxlbWVudCwgZXhpc3RpbmdUZXh0ID0gJycsIGZvbnRTaXplID0gMTcuNSk6IEhUTUxJbnB1dEVsZW1lbnQge1xyXG5cdFx0Y29uc3QgdGV4dElucHV0ID0gZGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogZXhpc3RpbmdUZXh0IH0gKTtcclxuXHRcdHRleHRJbnB1dC5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICsgJ3B4JztcclxuXHRcdHRleHRJbnB1dC5zcGVsbGNoZWNrID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdGV4dElucHV0O1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBob3RvTGluZSB7XHJcblx0Z2x5cGhzOiBQaG90b0dseXBoW107XHJcblx0Y29uc3RydWN0b3IodGV4dENvbnRlbnQgPSAnJykge1xyXG5cdFx0dGhpcy5nbHlwaHMgPSBbXTtcclxuXHJcblx0XHRjb25zdCB0ZXh0QXJyYXkgPSB0ZXh0Q29udGVudC5zcGxpdChcIiAgIFwiKS5maWx0ZXIoKGM6IHN0cmluZykgPT4gYyAhPT0gXCJcIik7XHJcblxyXG5cdFx0bGV0IGRvU3BhY2UgPSBmYWxzZTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRleHRBcnJheS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRjb25zdCBuZXdHbHlwaCA9IG5ldyBQaG90b0dseXBoKCk7XHJcblx0XHRcdGNvbnN0IGdseXBoVGV4dCA9IHRleHRBcnJheVtpXTtcclxuXHJcblx0XHRcdGlmIChnbHlwaFRleHQgPT09ICd8fHwnKSB7XHJcblx0XHRcdFx0bmV3R2x5cGguaHVlID0gMDtcclxuXHRcdFx0XHRuZXdHbHlwaC5zYXR1cmF0aW9uID0gMDtcclxuXHRcdFx0XHRuZXdHbHlwaC52YWx1ZSA9IDA7XHJcblx0XHRcdFx0bmV3R2x5cGgub3BhY2l0eSA9IDA7XHJcblx0XHRcdFx0bmV3R2x5cGgubW92ZVNwZWVkID0gMDtcclxuXHRcdFx0XHRuZXdHbHlwaC5kdXJhdGlvbiA9IDA7XHJcblx0XHRcdFx0bmV3R2x5cGgueCA9IHRoaXMuZ2x5cGhzW3RoaXMuZ2x5cGhzLmxlbmd0aCAtIDFdLng7XHJcblx0XHRcdFx0bmV3R2x5cGgueSA9IHRoaXMuZ2x5cGhzW3RoaXMuZ2x5cGhzLmxlbmd0aCAtIDFdLnk7XHJcblx0XHRcdFx0ZG9TcGFjZSA9IHRydWU7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGogPSAwO1xyXG5cdFx0XHRcdGxldCBza2lwTmV4dCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHQvLyBtb3ZlIHNwZWVkXHJcblx0XHRcdFx0c3dpdGNoIChnbHlwaFRleHRbal0pIHtcclxuXHRcdFx0XHRcdGNhc2UgJy4nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5tb3ZlU3BlZWQgPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJy0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5tb3ZlU3BlZWQgPSAxO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJz0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5tb3ZlU3BlZWQgPSAyO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyBkdXJhdGlvblxyXG5cdFx0XHRcdHN3aXRjaCAoZ2x5cGhUZXh0W2pdKSB7XHJcblx0XHRcdFx0XHRjYXNlICcuJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGguZHVyYXRpb24gPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJy0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5kdXJhdGlvbiA9IDE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRqKys7XHJcblxyXG5cdFx0XHRcdC8vIHNoYXBlXHJcblx0XHRcdFx0bmV3R2x5cGguc2hhcGUgPSBnbHlwaFRleHRbal07XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyBodWVcclxuXHRcdFx0XHRsZXQgaHVlMSA9IDA7XHJcblx0XHRcdFx0c3dpdGNoIChnbHlwaFRleHRbal0pIHtcclxuXHRcdFx0XHRcdGNhc2UgJ3InOlxyXG5cdFx0XHRcdFx0XHRodWUxID0gMDtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICdvJzpcclxuXHRcdFx0XHRcdFx0aHVlMSA9IDQwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ3knOlxyXG5cdFx0XHRcdFx0XHRodWUxID0gNjA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnZyc6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAxMjA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnYyc6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAxODA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnYic6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAyNDA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAncCc6XHJcblx0XHRcdFx0XHRcdGh1ZTEgPSAyNzA7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnLic6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLmh1ZSA9IDA7XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAwO1xyXG5cdFx0XHRcdFx0XHRza2lwTmV4dCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRqKys7XHJcblx0XHRcdFx0aWYgKCFza2lwTmV4dCkge1xyXG5cdFx0XHRcdFx0bGV0IGh1ZTIgPSAwO1xyXG5cdFx0XHRcdFx0c3dpdGNoIChnbHlwaFRleHRbal0pIHtcclxuXHRcdFx0XHRcdFx0Y2FzZSAncic6XHJcblx0XHRcdFx0XHRcdFx0aHVlMiA9IDA7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ28nOlxyXG5cdFx0XHRcdFx0XHRcdGh1ZTIgPSA0MDtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0Y2FzZSAneSc6XHJcblx0XHRcdFx0XHRcdFx0aHVlMiA9IDYwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdnJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMTIwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdjJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMTgwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdiJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMjQwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdwJzpcclxuXHRcdFx0XHRcdFx0XHRodWUyID0gMjcwO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0XHRcdG5ld0dseXBoLmh1ZSA9IGh1ZTE7XHJcblx0XHRcdFx0XHRcdFx0c2tpcE5leHQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCFza2lwTmV4dCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoaHVlMSA9PT0gMCAmJiBodWUyID09PSAyNzAgfHwgaHVlMSA9PT0gMjcwICYmIGh1ZTIgPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRuZXdHbHlwaC5odWUgPSAzMTU7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3R2x5cGguaHVlID0gKGh1ZTEgKyBodWUyKSAvIDI7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aisrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRza2lwTmV4dCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHQvLyBzYXR1cmF0aW9uXHJcblx0XHRcdFx0Y29uc3Qgc2F0dXJhdGlvblRleHQgPSBnbHlwaFRleHRbal07XHJcblx0XHRcdFx0c3dpdGNoIChzYXR1cmF0aW9uVGV4dCkge1xyXG5cdFx0XHRcdFx0Y2FzZSAnMCc6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJzEnOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5zYXR1cmF0aW9uID0gMC4yNTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICcyJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDAuNTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICczJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGguc2F0dXJhdGlvbiA9IDAuNzU7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnNCc6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnNhdHVyYXRpb24gPSAxO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyB2YWx1ZVxyXG5cdFx0XHRcdGNvbnN0IHZhbHVlVGV4dCA9IGdseXBoVGV4dFtqXTtcclxuXHRcdFx0XHRzd2l0Y2ggKHZhbHVlVGV4dCkge1xyXG5cdFx0XHRcdFx0Y2FzZSAnMCc6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnZhbHVlID0gMDtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICcxJzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGgudmFsdWUgPSAwLjE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnMic6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLnZhbHVlID0gMC4yO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJzMnOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC52YWx1ZSA9IDAuNTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICc0JzpcclxuXHRcdFx0XHRcdFx0bmV3R2x5cGgudmFsdWUgPSAxO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0XHQvLyBvcGFjaXR5XHJcblx0XHRcdFx0Y29uc3Qgb3BhY2l0eVRleHQgPSBnbHlwaFRleHRbal07XHJcblx0XHRcdFx0c3dpdGNoIChvcGFjaXR5VGV4dCkge1xyXG5cdFx0XHRcdFx0Y2FzZSAnLic6XHJcblx0XHRcdFx0XHRcdG5ld0dseXBoLm9wYWNpdHkgPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJy0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5vcGFjaXR5ID0gMC41O1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJz0nOlxyXG5cdFx0XHRcdFx0XHRuZXdHbHlwaC5vcGFjaXR5ID0gMTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGorKztcclxuXHJcblx0XHRcdFx0Y29uc3QgbG9jYXRpb25JbmZvID0gZ2x5cGhUZXh0LnN1YnN0cmluZyhqKTtcclxuXHJcblx0XHRcdFx0Ly8gbG9jYXRpb25cclxuXHRcdFx0XHQvLyB4XHJcblx0XHRcdFx0aWYgKGxvY2F0aW9uSW5mby5jb250YWlucygnPCcpKSB7XHJcblx0XHRcdFx0XHRuZXdHbHlwaC54ID0gMDtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKGxvY2F0aW9uSW5mby5jb250YWlucygnPicpKSB7XHJcblx0XHRcdFx0XHRuZXdHbHlwaC54ID0gMjtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bmV3R2x5cGgueCA9IDE7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIHlcclxuXHRcdFx0XHRpZiAobG9jYXRpb25JbmZvLmNvbnRhaW5zKCd2JykpIHtcclxuXHRcdFx0XHRcdG5ld0dseXBoLnkgPSAwO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAobG9jYXRpb25JbmZvLmNvbnRhaW5zKCdeJykpIHtcclxuXHRcdFx0XHRcdG5ld0dseXBoLnkgPSAyO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuZXdHbHlwaC55ID0gMTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChkb1NwYWNlKSB7XHJcblx0XHRcdFx0XHRjb25zdCBlbXB0eUdseXBoID0gbmV3IFBob3RvR2x5cGgoKTtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGguaHVlID0gMDtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGguc2F0dXJhdGlvbiA9IDA7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLnZhbHVlID0gMDtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGgub3BhY2l0eSA9IDA7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLm1vdmVTcGVlZCA9IDA7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLmR1cmF0aW9uID0gMDtcclxuXHRcdFx0XHRcdGVtcHR5R2x5cGgueCA9IG5ld0dseXBoLng7XHJcblx0XHRcdFx0XHRlbXB0eUdseXBoLnkgPSBuZXdHbHlwaC55O1xyXG5cdFx0XHRcdFx0ZG9TcGFjZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGhpcy5nbHlwaHMucHVzaChlbXB0eUdseXBoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuZ2x5cGhzLnB1c2gobmV3R2x5cGgpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGRvU3BhY2UpIHtcclxuXHRcdFx0Y29uc3QgZW1wdHlHbHlwaCA9IG5ldyBQaG90b0dseXBoKCk7XHJcblx0XHRcdGVtcHR5R2x5cGguaHVlID0gMDtcclxuXHRcdFx0ZW1wdHlHbHlwaC5zYXR1cmF0aW9uID0gMDtcclxuXHRcdFx0ZW1wdHlHbHlwaC52YWx1ZSA9IDA7XHJcblx0XHRcdGVtcHR5R2x5cGgub3BhY2l0eSA9IDA7XHJcblx0XHRcdGVtcHR5R2x5cGgubW92ZVNwZWVkID0gMDtcclxuXHRcdFx0ZW1wdHlHbHlwaC5kdXJhdGlvbiA9IDA7XHJcblx0XHRcdGVtcHR5R2x5cGgueCA9IHRoaXMuZ2x5cGhzWzBdLng7XHJcblx0XHRcdGVtcHR5R2x5cGgueSA9IHRoaXMuZ2x5cGhzWzBdLnk7XHJcblx0XHRcdGRvU3BhY2UgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5nbHlwaHMucHVzaChlbXB0eUdseXBoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIFNwZWFrKGRpdjogSFRNTERpdkVsZW1lbnQsIHRleHRTaXplOiBudW1iZXIsIG1vdmVTcGVlZHM6IG51bWJlcltdLCBkdXJhdGlvbnM6IG51bWJlcltdLCBkb0xvb3AgPSBmYWxzZSkge1xyXG5cdFx0ZGl2LnN0eWxlLmZvbnRTaXplID0gdGV4dFNpemUgKyAncHgnO1xyXG5cdFx0ZGl2LnN0eWxlLmZvbnRGYW1pbHkgPSAnUGhvdG9sYW5nJztcclxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcblx0XHRkaXYuc3R5bGUuaGVpZ2h0ID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0ZGl2LnN0eWxlLndpZHRoID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0Y29uc3QgdGV4dERpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHRcdHRleHREaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0dGV4dERpdi5zdHlsZS5ib3R0b20gPSB0ZXh0U2l6ZSArICdweCc7XHJcblx0XHR0ZXh0RGl2LnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9ICdib3R0b20sIGxlZnQsIGNvbG9yJztcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgcGhvdG9HbHlwaCA9IHRoaXMuZ2x5cGhzW2ldO1xyXG5cclxuXHRcdFx0dGV4dERpdi50ZXh0Q29udGVudCA9IHBob3RvR2x5cGguc2hhcGU7XHJcblx0XHRcdHRleHREaXYuc3R5bGUubGVmdCA9IChwaG90b0dseXBoLnggKiB0ZXh0U2l6ZSkgKyAncHgnO1xyXG5cdFx0XHR0ZXh0RGl2LnN0eWxlLmJvdHRvbSA9IChwaG90b0dseXBoLnkgKiB0ZXh0U2l6ZSkgKyAncHgnO1xyXG5cdFx0XHR0ZXh0RGl2LnN0eWxlLmNvbG9yID0gcGhvdG9HbHlwaC5jb2xvcjtcclxuXHJcblx0XHRcdGlmIChkb0xvb3AgJiYgaSA9PT0gdGhpcy5nbHlwaHMubGVuZ3RoIC0gMSkge1xyXG5cdFx0XHRcdGkgPSAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0ZXh0RGl2LnN0eWxlLnRyYW5zaXRpb24gPSBtb3ZlU3BlZWRzW3Bob3RvR2x5cGgubW92ZVNwZWVkXSArICdtcyc7XHJcblx0XHRcdGF3YWl0IHNsZWVwKG1vdmVTcGVlZHNbcGhvdG9HbHlwaC5tb3ZlU3BlZWRdICsgZHVyYXRpb25zW3Bob3RvR2x5cGguZHVyYXRpb25dKTtcclxuXHRcdH1cclxuXHRcdGRpdi5yZW1vdmUoKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIERpc3BsYXlTdGF0aWMoZGl2OiBIVE1MRGl2RWxlbWVudCwgdGV4dFNpemU6IG51bWJlcikge1xyXG5cdFx0Y29uc3QgbGluZURpdiA9IGRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdGxpbmVEaXYuc3R5bGUuZ2FwID0gJycgKyAodGV4dFNpemUgKiAzLjI1KSArICdweCknO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdseXBocy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR0aGlzLmdseXBoc1tpXSA9IE9iamVjdC5hc3NpZ24obmV3IFBob3RvR2x5cGgoKSwgdGhpcy5nbHlwaHNbaV0pO1xyXG5cdFx0XHR0aGlzLmdseXBoc1tpXS5EaXNwbGF5U3RhdGljKGxpbmVEaXYuY3JlYXRlRGl2KCksIHRleHRTaXplKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGhvdG9HbHlwaCB7XHJcblx0c2hhcGU6IHN0cmluZztcclxuXHR4OiBudW1iZXI7XHJcblx0eTogbnVtYmVyO1xyXG5cdGh1ZTogbnVtYmVyO1xyXG5cdHNhdHVyYXRpb246IG51bWJlcjtcclxuXHR2YWx1ZTogbnVtYmVyO1xyXG5cdG9wYWNpdHk6IG51bWJlcjtcclxuXHRtb3ZlU3BlZWQ6IG51bWJlcjtcclxuXHRkdXJhdGlvbjogbnVtYmVyO1xyXG5cclxuXHRnZXQgY29sb3IoKSB7XHJcblx0XHQvLyBoc3YgdmFsdWVzIGFyZSBpbiBbMCwgMV1cclxuXHRcdGxldCBsaWdodG5lc3MgPSAoMiAtIHRoaXMuc2F0dXJhdGlvbikgKiB0aGlzLnZhbHVlIC8gMjtcclxuXHRcdGxldCBuZXdTID0gdGhpcy5zYXR1cmF0aW9uICogdGhpcy52YWx1ZSAvIChsaWdodG5lc3MgPCAxID8gbGlnaHRuZXNzICogMiA6IDIgLSBsaWdodG5lc3MgKiAyKTtcclxuXHJcblx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgbGlnaHRuZXNzIGlzIDAgb3IgMSwgd2hpY2ggcmVzdWx0cyBpbiBzYXR1cmF0aW9uIGJlaW5nIDBcclxuXHRcdGlmIChsaWdodG5lc3MgPT09IDAgfHwgbGlnaHRuZXNzID09PSAxKSB7XHJcblx0XHRcdG5ld1MgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxpZ2h0bmVzcyAqPSAxMDA7XHJcblx0XHRuZXdTICo9IDEwMDtcclxuXHJcblx0XHRyZXR1cm4gJ2hzbGEoJyArIHRoaXMuaHVlICsgJywnICsgbmV3UyArICclLCcgKyBsaWdodG5lc3MgKyAnJSwnICsgdGhpcy5vcGFjaXR5ICsgJyknO1xyXG5cdH1cclxuXHJcblx0RGlzcGxheVN0YXRpYyhkaXY6IEhUTUxEaXZFbGVtZW50LCB0ZXh0U2l6ZTogbnVtYmVyKSB7XHJcblx0XHRjb25zdCBvdXRlckRpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHRcdG91dGVyRGl2LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuXHRcdG91dGVyRGl2LnN0eWxlLndpZHRoID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0b3V0ZXJEaXYuc3R5bGUuaGVpZ2h0ID0gKHRleHRTaXplICogMy4yNSkgKyAncHgnO1xyXG5cdFx0b3V0ZXJEaXYuY2xhc3NOYW1lID0gJ2NmZS1waG90b2dseXBoJztcclxuXHRcdGNvbnN0IGdseXBoRGl2ID0gb3V0ZXJEaXYuY3JlYXRlRGl2KCk7XHJcblx0XHRnbHlwaERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHRnbHlwaERpdi50ZXh0Q29udGVudCA9IHRoaXMuc2hhcGU7XHJcblx0XHRnbHlwaERpdi5zdHlsZS5sZWZ0ID0gKHRoaXMueCAqIHRleHRTaXplKSArICdweCc7XHJcblx0XHRnbHlwaERpdi5zdHlsZS5ib3R0b20gPSAodGhpcy55ICogdGV4dFNpemUpICsgJ3B4JztcclxuXHRcdGdseXBoRGl2LnN0eWxlLmNvbG9yID0gdGhpcy5jb2xvcjtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xyXG5pbXBvcnQgeyBId2F5dSB9IGZyb20gXCIuL2NvbmxhbmdzL2h3YXl1LXRleHRcIjtcclxuaW1wb3J0IHsgUGhvdG9MYW5nIH0gZnJvbSBcIi4vY29ubGFuZ3MvcGhvdG9sYW5nLXRleHRcIjtcclxuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25sYW5nRGljdGlvbmFyeSBleHRlbmRzIENGRUZpbGUge1xyXG5cclxuXHRsYW5ndWFnZTogc3RyaW5nO1xyXG5cdHdvcmRzOiBbc3RyaW5nLCBzdHJpbmddW107XHJcblx0c2VhcmNoVGVybTogc3RyaW5nO1xyXG5cdHNlYXJjaEluQ29ubGFuZzogYm9vbGVhbjtcclxuXHJcblx0c3RhdGljIG92ZXJyaWRlIGFzeW5jIENyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyKTogUHJvbWlzZTxDb25sYW5nRGljdGlvbmFyeT4ge1xyXG5cdFx0Y29uc3QgdW5maW5pc2hlZERpY3Rpb25hcnkgPSA8Q29ubGFuZ0RpY3Rpb25hcnk+IGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCk7XHJcblx0XHR1bmZpbmlzaGVkRGljdGlvbmFyeS5sYW5ndWFnZSA9ICdId2F5dSc7XHJcblx0XHR1bmZpbmlzaGVkRGljdGlvbmFyeS53b3JkcyA9IFtdO1xyXG5cdFx0dW5maW5pc2hlZERpY3Rpb25hcnkuc2VhcmNoVGVybSA9ICcnO1xyXG5cdFx0dW5maW5pc2hlZERpY3Rpb25hcnkuc2VhcmNoSW5Db25sYW5nID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gdW5maW5pc2hlZERpY3Rpb25hcnk7XHJcblx0fVxyXG5cclxuXHRvdmVycmlkZSBhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgbWFpbkRpdik7XHJcblxyXG5cdFx0Y29uc3QgbGFuZ3VhZ2VEcm9wZG93biA9IG1haW5EaXYuY3JlYXRlRWwoJ3NlbGVjdCcpO1xyXG5cdFx0bGFuZ3VhZ2VEcm9wZG93bi5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiAnSHdheXUnLCB2YWx1ZTogJ0h3YXl1JyB9ICk7XHJcblx0XHRsYW5ndWFnZURyb3Bkb3duLmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICdQaG90b2xhbmcnLCB2YWx1ZTogJ1Bob3RvbGFuZycgfSApO1xyXG5cdFx0bGFuZ3VhZ2VEcm9wZG93bi52YWx1ZSA9IHRoaXMubGFuZ3VhZ2U7XHJcblxyXG5cdFx0Y29uc3QgYWRkV29yZERpdiA9IG1haW5EaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0XHRhd2FpdCB0aGlzLkNyZWF0ZU5ld1dvcmRFZGl0b3Ioc252LCBtYWluRGl2LCBhZGRXb3JkRGl2KTtcclxuXHJcblx0XHRsYW5ndWFnZURyb3Bkb3duLm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VEcm9wZG93bi52YWx1ZTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGF3YWl0IHRoaXMuRGlzcGxheUxpc3Qoc252LCBtYWluRGl2KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgRGlzcGxheVdvcmQoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQsIGRpdjogSFRNTERpdkVsZW1lbnQsIGluZGV4OiBudW1iZXIpIHtcclxuXHRcdGRpdi5lbXB0eSgpO1xyXG5cclxuXHRcdGNvbnN0IG1vZGVCdXR0b24gPSBkaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0VkaXQnIH0gKTtcclxuXHRcdG1vZGVCdXR0b24uc3R5bGUudG9wID0gJzAnO1xyXG5cdFx0bW9kZUJ1dHRvbi5zdHlsZS5yaWdodCA9ICcwJztcclxuXHRcdG1vZGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0YXdhaXQgdGhpcy5FZGl0V29yZChzbnYsIG1haW5EaXYsIGRpdiwgaW5kZXgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHdvcmREaXYgPSBkaXYuY3JlYXRlRGl2KCdoYm94Jyk7XHJcblx0XHR3b3JkRGl2LnN0eWxlLmdhcCA9ICcxJSc7XHJcblx0XHR3b3JkRGl2LnN0eWxlLmZvbnRTaXplID0gJzI1cHgnO1xyXG5cdFx0Y29uc3QgY29ubGFuZ1dvcmQgPSB0aGlzLndvcmRzW2luZGV4XVswXTtcclxuXHRcdGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLndvcmRzW2luZGV4XVsxXTtcclxuXHRcdGNvbnN0IGNvbmxhbmdXb3JkRGl2ID0gdGhpcy5EaXNwbGF5Q29ubGFuZ1RleHQod29yZERpdiwgY29ubGFuZ1dvcmQpO1xyXG5cdFx0Y29ubGFuZ1dvcmREaXYuY2xhc3NMaXN0LmFkZCgnY2ZlLXBvaW50ZXItaG92ZXInKTtcclxuXHRcdHdvcmREaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICc6JyB9ICk7XHJcblx0XHR3b3JkRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiBkZWZpbml0aW9uIH0gKTtcclxuXHJcblx0XHRjb25sYW5nV29yZERpdi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvbmxhbmdXb3JkKTtcclxuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNvcHkgdGV4dDogJywgZXJyKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBFZGl0V29yZChzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCwgZGl2OiBIVE1MRGl2RWxlbWVudCwgaW5kZXg6IG51bWJlcikge1xyXG5cdFx0ZGl2LmVtcHR5KCk7XHJcblx0XHRjb25zdCBidXR0b25zRGl2ID0gZGl2LmNyZWF0ZURpdignaGJveCcpO1xyXG5cclxuXHRcdGNvbnN0IG1vZGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdWaWV3JyB9ICk7XHJcblx0XHRtb2RlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheVdvcmQoc252LCBtYWluRGl2LCBkaXYsIGluZGV4KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBkZWxldGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdEZWxldGUnIH0gKTtcclxuXHRcdGRlbGV0ZUJ1dHRvbi5jbGFzc0xpc3QgPSAnY2ZlLXJlbW92ZS1idXR0b24nO1xyXG5cdFx0ZGVsZXRlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMud29yZHMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGF3YWl0IHRoaXMuRGlzcGxheShzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHdvcmREaXYgPSBkaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0XHR3b3JkRGl2LnN0eWxlLmZvbnRTaXplID0gJzI1cHgnO1xyXG5cdFx0d29yZERpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1dvcmQgaW4gJyArIHRoaXMubGFuZ3VhZ2UgfSApO1xyXG5cdFx0Y29uc3QgY29ubGFuZ1dvcmQgPSB0aGlzLndvcmRzW2luZGV4XVswXTtcclxuXHRcdGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLndvcmRzW2luZGV4XVsxXTtcclxuXHRcdGNvbnN0IG5ld1dvcmRJbnB1dCA9IHRoaXMuRGlzcGxheUNvbmxhbmdFZGl0b3Iod29yZERpdiwgY29ubGFuZ1dvcmQpO1xyXG5cclxuXHRcdHdvcmREaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdEZWZpbml0aW9uJyB9ICk7XHJcblx0XHRjb25zdCBkZWZpbml0aW9uSW5wdXQgPSB3b3JkRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogZGVmaW5pdGlvbiB9ICk7XHJcblx0XHRkZWZpbml0aW9uSW5wdXQuc3R5bGUuZm9udFNpemUgPSAnMjVweCc7XHJcblxyXG5cdFx0Y29uc3Qgb25TdWJtaXQgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMud29yZHNbaW5kZXhdID0gW25ld1dvcmRJbnB1dC52YWx1ZSwgZGVmaW5pdGlvbklucHV0LnZhbHVlXTtcclxuXHRcdFx0dGhpcy5SZVNvcnQoaW5kZXgpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0YXdhaXQgdGhpcy5EaXNwbGF5KHNudiwgbWFpbkRpdik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZGl2Lm9ua2V5ZG93biA9IGFzeW5jIChldmVudCkgPT4ge1xyXG5cdFx0XHRpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcblx0XHRcdFx0YXdhaXQgb25TdWJtaXQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBDcmVhdGVOZXdXb3JkRWRpdG9yKHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50LCBkaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblx0XHRkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdBZGQgTmV3IFdvcmQ6JyB9ICk7XHJcblx0XHRkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdXb3JkIGluICcgKyB0aGlzLmxhbmd1YWdlIH0gKTtcclxuXHRcdGNvbnN0IG5ld1dvcmRJbnB1dCA9IHRoaXMuRGlzcGxheUNvbmxhbmdFZGl0b3IoZGl2KTtcclxuXHJcblx0XHRkaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdEZWZpbml0aW9uJyB9ICk7XHJcblx0XHRjb25zdCBkZWZpbml0aW9uSW5wdXQgPSBkaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyB9ICk7XHJcblx0XHRjb25zdCBzdWJtaXRCdXR0b24gPSBkaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ3N1Ym1pdCcgfSApO1xyXG5cclxuXHRcdGNvbnN0IG9uU3VibWl0ID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLndvcmRzLnB1c2goW25ld1dvcmRJbnB1dC52YWx1ZSwgZGVmaW5pdGlvbklucHV0LnZhbHVlXSk7XHJcblx0XHRcdHRoaXMuUmVTb3J0KHRoaXMud29yZHMubGVuZ3RoIC0gMSk7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLkRpc3BsYXkoc252LCBtYWluRGl2KTtcclxuXHRcdH1cclxuXHJcblx0XHRzdWJtaXRCdXR0b24ub25jbGljayA9IG9uU3VibWl0O1xyXG5cdFx0ZGl2Lm9ua2V5ZG93biA9IGFzeW5jIChldmVudCkgPT4ge1xyXG5cdFx0XHRpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcblx0XHRcdFx0YXdhaXQgb25TdWJtaXQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBEaXNwbGF5Q29ubGFuZ0VkaXRvcihkaXY6IEhUTUxEaXZFbGVtZW50LCBleGlzdGluZ1dvcmQgPSAnJykge1xyXG5cdFx0c3dpdGNoKHRoaXMubGFuZ3VhZ2UpIHtcclxuXHRcdFx0Y2FzZSAnSHdheXUnOlxyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHJldHVybiBId2F5dS5DcmVhdGVUZXh0SW5wdXQoZGl2LCBleGlzdGluZ1dvcmQsIDI1LCBmYWxzZSk7XHJcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XHJcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5DcmVhdGVUZXh0SW5wdXQoZGl2LCBleGlzdGluZ1dvcmQsIDI1KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgRGlzcGxheUNvbmxhbmdUZXh0KGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nV29yZCA9ICcnKSB7XHJcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xyXG5cdFx0XHRjYXNlICdId2F5dSc6XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIEh3YXl1LkRpc3BsYXkoZGl2LCBleGlzdGluZ1dvcmQsIDI1LCBmYWxzZSk7XHJcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XHJcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5EaXNwbGF5KGRpdiwgZXhpc3RpbmdXb3JkLCAyNSwgbnVsbCwgbnVsbCwgdHJ1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIERpc3BsYXlMaXN0KHNudjogU291cmNlQW5kVmF1bHQsIGRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1NlYXJjaCBpbiAnICsgdGhpcy5sYW5ndWFnZSArICc/JyB9ICk7XHJcblx0XHRcclxuXHRcdGNvbnN0IGNoZWNrYm94ID0gZGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2NoZWNrYm94JyB9ICk7XHJcblx0XHRjaGVja2JveC5jaGVja2VkID0gdGhpcy5zZWFyY2hJbkNvbmxhbmc7XHJcblxyXG5cdFx0ZGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnU2VhcmNoIHRlcm0nIH0gKTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgY29ubGFuZ1NlYXJjaCA9IHRoaXMuRGlzcGxheUNvbmxhbmdFZGl0b3IoZGl2LCB0aGlzLnNlYXJjaFRlcm0pO1xyXG5cdFx0Y29uc3QgZW5nbGlzaFNlYXJjaCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMuc2VhcmNoVGVybSB9ICk7XHJcblx0XHRcclxuXHRcdGxldCBwcmV2RWxlbWVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyBlbmdsaXNoU2VhcmNoIDogY29ubGFuZ1NlYXJjaDtcclxuXHRcdGxldCBjdXJyZW50RWxlbWVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyBjb25sYW5nU2VhcmNoIDogZW5nbGlzaFNlYXJjaDtcclxuXHRcdHByZXZFbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG5cdFx0Y3VycmVudEVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcblxyXG5cdFx0dGhpcy5zZWFyY2hUZXJtID0gcHJldkVsZW1lbnQudmFsdWU7XHJcblxyXG5cdFx0cHJldkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdGN1cnJlbnRFbGVtZW50LnZhbHVlID0gdGhpcy5zZWFyY2hUZXJtO1xyXG5cdFx0Y3VycmVudEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG5cdFx0XHJcblx0XHRjb25zdCByZXN1bHRzRGl2ID0gZGl2LmNyZWF0ZURpdignY2ZlLWRpY3Rpb25hcnktZ3JpZCcpO1xyXG5cdFx0XHJcblx0XHRjb25zdCByZWZyZXNoUmVzdWx0cyA9ICgpID0+IHtcclxuXHRcdFx0dGhpcy5zZWFyY2hUZXJtID0gY3VycmVudEVsZW1lbnQudmFsdWU7XHJcblx0XHRcdHRoaXMuc2VhcmNoSW5Db25sYW5nID0gY2hlY2tib3guY2hlY2tlZDtcclxuXHRcdFx0cmVzdWx0c0Rpdi5lbXB0eSgpO1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud29yZHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAodGhpcy53b3Jkc1tpXVtjaGVja2JveC5jaGVja2VkID8gMCA6IDFdLmNvbnRhaW5zKGN1cnJlbnRFbGVtZW50LnZhbHVlKSkge1xyXG5cdFx0XHRcdFx0Y29uc3Qgd29yZERpdiA9IHJlc3VsdHNEaXYuY3JlYXRlRGl2KCdjZmUtZGljdGlvbmFyeS13b3JkJyk7XHJcblx0XHRcdFx0XHR0aGlzLkRpc3BsYXlXb3JkKHNudiwgZGl2LCB3b3JkRGl2LCBpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZWZyZXNoUmVzdWx0cygpO1xyXG5cclxuXHRcdGNvbmxhbmdTZWFyY2gub25pbnB1dCA9IHJlZnJlc2hSZXN1bHRzO1xyXG5cclxuXHRcdGVuZ2xpc2hTZWFyY2gub25pbnB1dCA9IHJlZnJlc2hSZXN1bHRzO1xyXG5cclxuXHRcdGNoZWNrYm94Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG5cdFx0XHRyZXN1bHRzRGl2LmVtcHR5KCk7XHJcblxyXG5cdFx0XHRwcmV2RWxlbWVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyBlbmdsaXNoU2VhcmNoIDogY29ubGFuZ1NlYXJjaDtcclxuXHRcdFx0Y3VycmVudEVsZW1lbnQgPSBjaGVja2JveC5jaGVja2VkID8gY29ubGFuZ1NlYXJjaCA6IGVuZ2xpc2hTZWFyY2g7XHJcblx0XHRcdHRoaXMuc2VhcmNoVGVybSA9IHByZXZFbGVtZW50LnZhbHVlO1xyXG5cclxuXHRcdFx0cHJldkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdFx0Y3VycmVudEVsZW1lbnQudmFsdWUgPSB0aGlzLnNlYXJjaFRlcm07XHJcblx0XHRcdGN1cnJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuXHRcdFx0XHJcblx0XHRcdHJlZnJlc2hSZXN1bHRzKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIFJlU29ydChpbmRleE9mQ2hhbmdlZFdvcmQ6IG51bWJlcikge1xyXG5cdFx0Y29uc3QgY2hhbmdlZFdvcmQgPSB0aGlzLndvcmRzLnNwbGljZShpbmRleE9mQ2hhbmdlZFdvcmQsIDEpWzBdO1xyXG5cdFx0bGV0IGkgPSAwO1xyXG5cdFx0bGV0IGxlZnQgPSAwO1xyXG5cdFx0bGV0IHJpZ2h0ID0gdGhpcy53b3Jkcy5sZW5ndGggLSAxO1xyXG5cdFx0XHJcblx0XHR3aGlsZSAobGVmdCA8PSByaWdodCkge1xyXG5cdFx0XHRjb25zdCBtaWQgPSBNYXRoLmZsb29yKChsZWZ0ICsgcmlnaHQpIC8gMik7XHJcblx0XHRcdGlmICh0aGlzLndvcmRzW21pZF1bMF0gPCBjaGFuZ2VkV29yZFswXSkge1xyXG5cdFx0XHRcdGxlZnQgPSBtaWQgKyAxO1xyXG5cdFx0XHRcdGkgPSBsZWZ0O1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJpZ2h0ID0gbWlkIC0gMTtcclxuXHRcdFx0XHRpID0gbWlkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy53b3Jkcy5zcGxpY2UoaSwgMCwgY2hhbmdlZFdvcmQpO1xyXG5cdH1cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IENGRUZpbGUgfSBmcm9tIFwiLi9jZmUtZmlsZVwiO1xyXG5pbXBvcnQgeyBDRkVGaWxlSGFuZGxlciB9IGZyb20gXCIuL2NmZS1maWxlLWhhbmRsZXJcIjtcclxuaW1wb3J0IHsgU2luZ2xlTWVkaWFGaWxlIH0gZnJvbSBcIi4vc2luZ2xlLW1lZGlhLWZpbGVcIjtcclxuaW1wb3J0IHsgU291cmNlQW5kVmF1bHQgfSBmcm9tIFwiLi9zbnZcIjtcclxuaW1wb3J0IHsgUGhvdG9MYW5nLCBQaG90b0xpbmUgfSBmcm9tIFwiLi9jb25sYW5ncy9waG90b2xhbmctdGV4dFwiO1xyXG5pbXBvcnQgeyBId2F5dSB9IGZyb20gXCIuL2NvbmxhbmdzL2h3YXl1LXRleHRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdG9yeSBleHRlbmRzIENGRUZpbGUge1xyXG5cdHByaXZhdGUgY3VycmVudFBhZ2VJbmRleDogbnVtYmVyO1xyXG5cdHByaXZhdGUgcGFnZXM6IFBhZ2VbXTtcclxuXHRwcml2YXRlIGNoYXJhY3RlcnM6IENoYXJhY3RlcltdO1xyXG5cdHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZztcclxuXHRwcml2YXRlIGRvVmVydGljYWw6IGJvb2xlYW47XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIGtub3duTGFuZ3VhZ2VzID0gW1xyXG5cdFx0J0VuZ2xpc2gnLFxyXG5cdFx0J0h3YXl1JyxcclxuXHRcdCdQaG90b2xhbmcnXHJcblx0XVxyXG5cclxuXHRwcml2YXRlIE1ha2VWZXJ0aWNhbChlbDogSFRNTEVsZW1lbnQpIHtcclxuXHRcdGVsLnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHRcdGVsLnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0JztcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgQ3JlYXRlVGV4dElucHV0KGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nV29yZCA9ICcnKSB7XHJcblx0XHRsZXQgaW5wdXQ7XHJcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xyXG5cdFx0XHRjYXNlICdId2F5dSc6XHJcblx0XHRcdFx0cmV0dXJuIEh3YXl1LkNyZWF0ZVRleHRJbnB1dChkaXYsIGV4aXN0aW5nV29yZCwgMjUsIHRoaXMuZG9WZXJ0aWNhbCk7XHJcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XHJcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5DcmVhdGVUZXh0SW5wdXQoZGl2LCBleGlzdGluZ1dvcmQsIDI1KTtcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRpbnB1dCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IGV4aXN0aW5nV29yZCB9ICk7XHJcblx0XHRcdFx0aW5wdXQuc3R5bGUuZm9udFNpemUgPSAnMjVweCc7XHJcblx0XHRcdFx0cmV0dXJuIGlucHV0O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBEaXNwbGF5TGluZUVkaXQoZGl2OiBIVE1MRGl2RWxlbWVudCwgbGluZTogRGlhbG9ndWVMaW5lKSB7XHJcblx0XHRjb25zdCBpbnB1dCA9IHRoaXMuQ3JlYXRlVGV4dEFyZWEoZGl2LCBsaW5lLmNvbnRlbnQpO1xyXG5cdFx0aWYgKHRoaXMubGFuZ3VhZ2UgIT09ICdQaG90b2xhbmcnKSB7XHJcblx0XHRcdGNvbnN0IHNwZWFrZXIgPSB0aGlzLmNoYXJhY3RlcnNbbGluZS5zcGVha2VySW5kZXhdO1xyXG5cdFx0XHRpbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzcGVha2VyLmJhY2tncm91bmRDb2xvcjtcclxuXHRcdFx0aW5wdXQuc3R5bGUuY29sb3IgPSBzcGVha2VyLmNvbG9yO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xyXG5cdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChpbnB1dCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gaW5wdXQ7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIENyZWF0ZVRleHRBcmVhKGRpdjogSFRNTERpdkVsZW1lbnQsIGV4aXN0aW5nV29yZCA9ICcnKSB7XHJcblx0XHRsZXQgaW5wdXQ7XHJcblx0XHRzd2l0Y2godGhpcy5sYW5ndWFnZSkge1xyXG5cdFx0XHRjYXNlICdId2F5dSc6XHJcblx0XHRcdFx0cmV0dXJuIEh3YXl1LkNyZWF0ZVRleHRBcmVhKGRpdiwgZXhpc3RpbmdXb3JkLCAyNSwgdGhpcy5kb1ZlcnRpY2FsKTtcclxuXHRcdFx0Y2FzZSAnUGhvdG9sYW5nJzpcclxuXHRcdFx0XHRyZXR1cm4gUGhvdG9MYW5nLkNyZWF0ZVRleHRBcmVhKGRpdiwgZXhpc3RpbmdXb3JkLCAyNSk7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0aW5wdXQgPSBkaXYuY3JlYXRlRWwoJ3RleHRhcmVhJywgeyB0ZXh0OiBleGlzdGluZ1dvcmQgfSApO1xyXG5cdFx0XHRcdGlucHV0LnN0eWxlLmZvbnRTaXplID0gJzI1cHgnO1xyXG5cdFx0XHRcdHJldHVybiBpbnB1dDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgRGlzcGxheVRleHQoZGl2OiBIVE1MRGl2RWxlbWVudCwgZm9udFNpemUgPSAyNSwgZXhpc3RpbmdXb3JkID0gJycpIHtcclxuXHRcdHN3aXRjaCh0aGlzLmxhbmd1YWdlKSB7XHJcblx0XHRcdGNhc2UgJ0h3YXl1JzpcclxuXHRcdFx0XHRyZXR1cm4gSHdheXUuRGlzcGxheShkaXYsIGV4aXN0aW5nV29yZCwgZm9udFNpemUsIHRoaXMuZG9WZXJ0aWNhbCk7XHJcblx0XHRcdGNhc2UgJ1Bob3RvbGFuZyc6XHJcblx0XHRcdFx0cmV0dXJuIFBob3RvTGFuZy5EaXNwbGF5KGRpdiwgZXhpc3RpbmdXb3JkLCBmb250U2l6ZSwgbnVsbCwgbnVsbCwgdHJ1ZSk7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIGRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogZXhpc3RpbmdXb3JkIH0gKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBvdmVycmlkZSBhc3luYyBDcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252OiBTb3VyY2VBbmRWYXVsdCwgZmlsZVR5cGU6IHN0cmluZywgcGFyZW50Rm9sZGVySUQ6IG51bWJlcik6IFByb21pc2U8U3Rvcnk+IHtcclxuXHRcdGNvbnN0IG5ld1N0b3J5RmlsZSA9IDxTdG9yeT4gKGF3YWl0IHN1cGVyLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCkpO1xyXG5cdFx0bmV3U3RvcnlGaWxlLmN1cnJlbnRQYWdlSW5kZXggPSAwO1xyXG5cdFx0bmV3U3RvcnlGaWxlLnBhZ2VzID0gW107XHJcblx0XHRuZXdTdG9yeUZpbGUuY2hhcmFjdGVycyA9IFtdO1xyXG5cdFx0bmV3U3RvcnlGaWxlLmxhbmd1YWdlID0gJ0VuZ2xpc2gnO1xyXG5cdFx0bmV3U3RvcnlGaWxlLmRvVmVydGljYWwgPSBmYWxzZTtcclxuXHRcdHJldHVybiBuZXdTdG9yeUZpbGU7XHJcblx0fVxyXG5cclxuXHRvdmVycmlkZSBhc3luYyBEaXNwbGF5KHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblx0XHRhd2FpdCBzdXBlci5EaXNwbGF5KHNudiwgbWFpbkRpdik7XHJcblx0XHR0aGlzLkxvYWRTdG9yeVVJKHNudiwgbWFpbkRpdi5jcmVhdGVEaXYoJ3Zib3gnKSk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIExvYWRTdG9yeVVJKHNudjogU291cmNlQW5kVmF1bHQsIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcblx0XHRtYWluRGl2LmVtcHR5KCk7XHJcblx0XHRtYWluRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnR28gdG8gcGFnZSBudW1iZXI6JyB9ICk7XHJcblx0XHRjb25zdCBwYWdlU2VsZWN0RGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdGNvbnN0IHBhZ2VOdW1iZXJJbnB1dCA9IHBhZ2VTZWxlY3REaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyArICh0aGlzLmN1cnJlbnRQYWdlSW5kZXggKyAxKSB9ICk7XHJcblx0XHRwYWdlU2VsZWN0RGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnJyArICcvJyArIHRoaXMucGFnZXMubGVuZ3RoIH0gKTtcclxuXHRcdGNvbnN0IGdvQnV0dG9uID0gcGFnZVNlbGVjdERpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnR28nIH0gKTtcclxuXHRcdGdvQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleCA9IHBhcnNlSW50KHBhZ2VOdW1iZXJJbnB1dC52YWx1ZSkgLSAxO1xyXG5cdFx0XHR0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LCBtYWluRGl2KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBsYW5ndWFnZUlucHV0ID0gbWFpbkRpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IFN0b3J5Lmtub3duTGFuZ3VhZ2VzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxhbmd1YWdlSW5wdXQuY3JlYXRlRWwoJ29wdGlvbicsIHsgdGV4dDogU3Rvcnkua25vd25MYW5ndWFnZXNbaV0sIHZhbHVlOiBTdG9yeS5rbm93bkxhbmd1YWdlc1tpXSB9ICk7XHJcblx0XHR9XHJcblx0XHRsYW5ndWFnZUlucHV0LnZhbHVlID0gdGhpcy5sYW5ndWFnZTtcclxuXHRcdGxhbmd1YWdlSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZUlucHV0LnZhbHVlO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0dGhpcy5Mb2FkU3RvcnlVSShzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cclxuXHRcdG1haW5EaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdWZXJ0aWNhbCBUZXh0JyB9ICk7XHJcblx0XHRjb25zdCBkb1ZlcnRpY2FsQm94ID0gbWFpbkRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdjaGVja2JveCcgfSApO1xyXG5cdFx0ZG9WZXJ0aWNhbEJveC5jaGVja2VkID0gdGhpcy5kb1ZlcnRpY2FsO1xyXG5cdFx0ZG9WZXJ0aWNhbEJveC5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLmRvVmVydGljYWwgPSBkb1ZlcnRpY2FsQm94LmNoZWNrZWQ7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHR0aGlzLkxvYWRTdG9yeVVJKHNudiwgbWFpbkRpdik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5Mb2FkQ2hhcmFjdGVyRWRpdG9yVUkoc252LCBtYWluRGl2KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgTG9hZENoYXJhY3RlckVkaXRvclVJKHNudjogU291cmNlQW5kVmF1bHQsIGRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGNvbnN0IGNoYXJFZGl0b3JEaXYgPSBkaXYuY3JlYXRlRGl2KCk7XHJcblx0XHRjaGFyRWRpdG9yRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICdoYm94JyA6ICd2Ym94JztcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGk7XHJcblx0XHRcdGNvbnN0IGNoYXJEaXYgPSBjaGFyRWRpdG9yRGl2LmNyZWF0ZURpdigpO1xyXG5cdFx0XHRjaGFyRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICd2Ym94JyA6ICdoYm94JztcclxuXHJcblx0XHRcdGNoYXJEaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdOYW1lOiAnIH0gKTtcclxuXHRcdFx0Y29uc3QgbmFtZUlucHV0ID0gdGhpcy5DcmVhdGVUZXh0SW5wdXQoY2hhckRpdiwgdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0ubmFtZSk7XHJcblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlICE9PSAnUGhvdG9sYW5nJykge1xyXG5cdFx0XHRcdG5hbWVJbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5iYWNrZ3JvdW5kQ29sb3I7XHJcblx0XHRcdFx0bmFtZUlucHV0LnN0eWxlLmNvbG9yID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3I7XHJcblx0XHRcdH1cclxuXHRcdFx0bmFtZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50SW5kZXhdLm5hbWUgPSBuYW1lSW5wdXQudmFsdWU7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdFx0dGhpcy5Mb2FkU3RvcnlVSShzbnYsIGRpdik7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xyXG5cdFx0XHRcdG5hbWVJbnB1dC5zdHlsZS5oZWlnaHQgPSAnZml0LWNvbnRlbnQnO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG5hbWVJbnB1dC5zdHlsZS53aWR0aCA9ICdmaXQtY29udGVudCc7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRoaXMubGFuZ3VhZ2UgIT09ICdQaG90b2xhbmcnKSB7XHJcblx0XHRcdFx0dGhpcy5Mb2FkQ2hhcmFjdGVyQ29sb3JTZWxlY3Rpb25VSShzbnYsIGRpdiwgY2hhckVkaXRvckRpdiwgY3VycmVudEluZGV4KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLkRpc3BsYXlUZXh0KGNoYXJEaXYsIDI1LCB0aGlzLmNoYXJhY3RlcnNbY3VycmVudEluZGV4XS5uYW1lKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Y29uc3QgYWRkQ2hhckJ1dHRvbiA9IGNoYXJFZGl0b3JEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0FkZCBDaGFyYWN0ZXInIH0gKTtcclxuXHRcdGFkZENoYXJCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzLnB1c2gobmV3IENoYXJhY3RlcigpKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGNoYXJFZGl0b3JEaXYucmVtb3ZlKCk7XHJcblx0XHRcdHRoaXMuTG9hZENoYXJhY3RlckVkaXRvclVJKHNudiwgZGl2KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgTG9hZENoYXJhY3RlckNvbG9yU2VsZWN0aW9uVUkoc252OiBTb3VyY2VBbmRWYXVsdCwgZGl2OiBIVE1MRGl2RWxlbWVudCwgY2hhckVkaXRvckRpdjogSFRNTERpdkVsZW1lbnQsIGN1cnJlbnRJbmRleDogbnVtYmVyKSB7XHJcblx0XHRjb25zdCBjb2xvckRpdiA9IGNoYXJFZGl0b3JEaXYuY3JlYXRlRGl2KCk7XHJcblx0XHRjb2xvckRpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAndmJveCcgOiAnaGJveCc7XHJcblx0XHRjb2xvckRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1RleHQgQ29sb3I6JyB9ICk7XHJcblx0XHRjb25zdCBjb2xvcklucHV0ID0gY29sb3JEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnY29sb3InLCB2YWx1ZTogdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3IgfSApO1xyXG5cdFx0Y29sb3JEaXYuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdCYWNrZ3JvdW5kIENvbG9yOicgfSApO1xyXG5cdFx0Y29uc3QgYmFja2dyb3VuZElucHV0ID0gY29sb3JEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnY29sb3InLCB2YWx1ZTogdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uYmFja2dyb3VuZENvbG9yIH0gKTtcclxuXHRcdGNvbnN0IHN3YXBCdXR0b24gPSBjb2xvckRpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnU3dhcCcgfSApO1xyXG5cdFx0Y29sb3JJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3IgPSBjb2xvcklucHV0LnZhbHVlO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdH1cclxuXHRcdGJhY2tncm91bmRJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uYmFja2dyb3VuZENvbG9yID0gYmFja2dyb3VuZElucHV0LnZhbHVlO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdH1cclxuXHRcdHN3YXBCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uYmFja2dyb3VuZENvbG9yID0gY29sb3JJbnB1dC52YWx1ZTtcclxuXHRcdFx0dGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRJbmRleF0uY29sb3IgPSBiYWNrZ3JvdW5kSW5wdXQudmFsdWU7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHRjaGFyRWRpdG9yRGl2LnJlbW92ZSgpO1xyXG5cdFx0XHR0aGlzLkxvYWRDaGFyYWN0ZXJFZGl0b3JVSShzbnYsIGRpdik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIExvYWRQYWdlU2VsZWN0b3Ioc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdGNvbnN0IGJ1dHRvbnNEaXYgPSBtYWluRGl2LmNyZWF0ZURpdignaGJveCcpO1xyXG5cdFx0Y29uc3QgYmFja0J1dHRvbiA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJy0nIH0gKTtcclxuXHRcdGNvbnN0IHBhZ2VOdW1iZXJJbnB1dCA9IGJ1dHRvbnNEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnJyArICh0aGlzLmN1cnJlbnRQYWdlSW5kZXggKyAxKSB9ICk7XHJcblx0XHRidXR0b25zRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnJyArICcvJyArIHRoaXMucGFnZXMubGVuZ3RoIH0gKTtcclxuXHRcdGNvbnN0IG5leHRCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICcrJyB9ICk7XHJcblx0XHRjb25zdCBkZWxldGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdEZWxldGUgUGFnZScgfSApO1xyXG5cdFx0ZGVsZXRlQnV0dG9uLmNsYXNzTmFtZSA9ICdjZmUtcmVtb3ZlLWJ1dHRvbic7XHJcblx0XHRjb25zdCBhZGRCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdBZGQgUGFnZScgfSApO1xyXG5cdFx0Y29uc3QgZWRpdE1vZGVCdXR0b24gPSBidXR0b25zRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdFZGl0IE1vZGUnIH0gKTtcclxuXHRcdGNvbnN0IHZpZXdNb2RlQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnVmlldyBNb2RlJyB9ICk7XHJcblx0XHRjb25zdCBob21lQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnUmV0dXJuIHRvIFN0b3J5JyB9ICk7XHJcblx0XHRob21lQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGF3YWl0IHRoaXMuTG9hZFN0b3J5VUkoc252LCBtYWluRGl2KTtcclxuXHRcdH1cclxuXHRcdGVkaXRNb2RlQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cdFx0dmlld01vZGVCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0YXdhaXQgdGhpcy5Mb2FkQ3VycmVudFBhZ2VEaXNwbGF5T25seShzbnYsIG1haW5EaXYpO1xyXG5cdFx0fVxyXG5cdFx0YmFja0J1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRpZiAodGhpcy5jdXJyZW50UGFnZUluZGV4ID4gMCkge1xyXG5cdFx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleC0tO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsIG1haW5EaXYpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRuZXh0QnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdGlmICh0aGlzLmN1cnJlbnRQYWdlSW5kZXggPCB0aGlzLnBhZ2VzLmxlbmd0aCkge1xyXG5cdFx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleCsrO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsIG1haW5EaXYpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRwYWdlTnVtYmVySW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleCA9IHBhcnNlSW50KHBhZ2VOdW1iZXJJbnB1dC52YWx1ZSkgLSAxO1xyXG5cdFx0XHRhd2FpdCB0aGlzLkxvYWRDdXJyZW50UGFnZUVkaXQoc252LCBtYWluRGl2KTtcclxuXHRcdH1cclxuXHRcdGRlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnBhZ2VzLnNwbGljZSh0aGlzLmN1cnJlbnRQYWdlSW5kZXgsIDEpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0aWYgKHRoaXMuY3VycmVudFBhZ2VJbmRleCAhPT0gMCkge1xyXG5cdFx0XHRcdHRoaXMuY3VycmVudFBhZ2VJbmRleC0tO1xyXG5cdFx0XHR9XHJcblx0XHRcdGF3YWl0IHRoaXMuTG9hZEN1cnJlbnRQYWdlRWRpdChzbnYsbWFpbkRpdik7XHJcblx0XHR9XHJcblx0XHRhZGRCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0Y29uc3QgZGVmYXVsdFBhZ2UgPSBuZXcgUGFnZSgpO1xyXG5cdFx0XHRjb25zdCB0aGlzUGFnZUZpbGVJRCA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYUZpbGVJRDtcclxuXHRcdFx0aWYgKHRoaXNQYWdlRmlsZUlEICE9PSAtMSAmJiB0aGlzUGFnZUZpbGVJRCA8IHNudi5zb3VyY2VGb2xkZXIuZmlsZUNvdW50KSB7XHJcblx0XHRcdFx0ZGVmYXVsdFBhZ2UubWVkaWFGaWxlSUQgPSB0aGlzUGFnZUZpbGVJRDtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLnBhZ2VzLnNwbGljZSh0aGlzLmN1cnJlbnRQYWdlSW5kZXggKyAxLCAwLCBkZWZhdWx0UGFnZSk7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHR0aGlzLmN1cnJlbnRQYWdlSW5kZXgrKztcclxuXHRcdFx0YXdhaXQgdGhpcy5Mb2FkQ3VycmVudFBhZ2VFZGl0KHNudixtYWluRGl2KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgTG9hZEN1cnJlbnRQYWdlRWRpdChzbnY6IFNvdXJjZUFuZFZhdWx0LCBtYWluRGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0bWFpbkRpdi5lbXB0eSgpO1xyXG5cdFx0dGhpcy5Mb2FkUGFnZVNlbGVjdG9yKHNudiwgbWFpbkRpdik7XHJcblxyXG5cdFx0bWFpbkRpdi5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ01lZGlhIEZpbGUgSUQ6JyB9ICk7XHJcblx0XHRjb25zdCBtZWRpYUZpbGVJRElucHV0ID0gbWFpbkRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyB9ICk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHBhbmVsRGl2ID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHRcdGNvbnN0IG91dGVyTWVkaWFEaXYgPSBwYW5lbERpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcclxuXHRcdGNvbnN0IGxpbmVzRGl2ID0gcGFuZWxEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0XHRjb25zdCBtZWRpYVdpZHRoSW5wdXQgPSBvdXRlck1lZGlhRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnIH0gKTtcclxuXHRcdG1lZGlhV2lkdGhJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0b3V0ZXJNZWRpYURpdi5zdHlsZS53aWR0aCA9IG1lZGlhV2lkdGhJbnB1dC52YWx1ZSArICclJztcclxuXHRcdFx0bGluZXNEaXYuc3R5bGUud2lkdGggPSAxMDAgLSBwYXJzZUludChtZWRpYVdpZHRoSW5wdXQudmFsdWUpICsgJyUnO1xyXG5cdFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubWVkaWFTaXplUGVyY2VudGFnZSA9IHBhcnNlSW50KG1lZGlhV2lkdGhJbnB1dC52YWx1ZSk7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IG1lZGlhRGl2ID0gb3V0ZXJNZWRpYURpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcclxuXHRcdG91dGVyTWVkaWFEaXYuc3R5bGUud2lkdGggPSAnNTAlJztcclxuXHRcdG1lZGlhRGl2LnN0eWxlLm9iamVjdEZpdCA9ICdjb250YWluJztcclxuXHRcdGxpbmVzRGl2LnN0eWxlLndpZHRoID0gJzUwJSc7XHJcblx0XHRsaW5lc0Rpdi5zdHlsZS5tYXhIZWlnaHQgPSAnODB2aCc7XHJcblx0XHRsaW5lc0Rpdi5zdHlsZS5wb3NpdGlvbiA9ICdzdGlja3knO1xyXG5cdFx0bGluZXNEaXYuc3R5bGUudG9wID0gJzAlJztcclxuXHJcblx0XHRpZiAodGhpcy5jdXJyZW50UGFnZUluZGV4IDwgdGhpcy5wYWdlcy5sZW5ndGgpIHtcclxuXHRcdFx0Y29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF07XHJcblx0XHRcdGNvbnN0IG1lZGlhRmlsZUlEID0gY3VycmVudFBhZ2UubWVkaWFGaWxlSUQ7XHJcblx0XHRcdG1lZGlhRmlsZUlESW5wdXQudmFsdWUgPSAnJyArIGN1cnJlbnRQYWdlLm1lZGlhRmlsZUlEO1xyXG5cdFx0XHRpZiAobWVkaWFGaWxlSUQgPiAwKSB7XHJcblx0XHRcdFx0Y29uc3QgbWVkaWFGaWxlID0gPFNpbmdsZU1lZGlhRmlsZT4gYXdhaXQgQ0ZFRmlsZUhhbmRsZXIuTG9hZEZpbGUoc252LCBtZWRpYUZpbGVJRCk7XHJcblx0XHRcdFx0YXdhaXQgbWVkaWFGaWxlLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYVNpemVQZXJjZW50YWdlKSB7XHJcblx0XHRcdFx0bWVkaWFXaWR0aElucHV0LnZhbHVlID0gJycgKyB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubWVkaWFTaXplUGVyY2VudGFnZTtcclxuXHRcdFx0XHRvdXRlck1lZGlhRGl2LnN0eWxlLndpZHRoID0gbWVkaWFXaWR0aElucHV0LnZhbHVlICsgJyUnO1xyXG5cdFx0XHRcdGxpbmVzRGl2LnN0eWxlLndpZHRoID0gMTAwIC0gcGFyc2VJbnQobWVkaWFXaWR0aElucHV0LnZhbHVlKSArICclJztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRtZWRpYVdpZHRoSW5wdXQudmFsdWUgPSAnNTAnO1xyXG5cdFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5tZWRpYVNpemVQZXJjZW50YWdlID0gNTA7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNvbnN0IGRlZmF1bHRQYWdlID0gbmV3IFBhZ2UoKTtcclxuXHRcdFx0Y29uc3QgbGFzdFBhZ2UgPSB0aGlzLmN1cnJlbnRQYWdlSW5kZXggLSAxO1xyXG5cdFx0XHRpZiAobGFzdFBhZ2UgPj0gMCAmJiB0aGlzLmN1cnJlbnRQYWdlSW5kZXggIT09IDApIHtcclxuXHRcdFx0XHRjb25zdCBsYXN0UGFnZUZpbGVJRCA9IHRoaXMucGFnZXNbbGFzdFBhZ2VdLm1lZGlhRmlsZUlEO1xyXG5cdFx0XHRcdGNvbnN0IGxhc3RQYWdlU2l6ZSA9IHRoaXMucGFnZXNbbGFzdFBhZ2VdLm1lZGlhU2l6ZVBlcmNlbnRhZ2U7XHJcblx0XHRcdFx0ZGVmYXVsdFBhZ2UubWVkaWFTaXplUGVyY2VudGFnZSA9IGxhc3RQYWdlU2l6ZTtcclxuXHRcdFx0XHRtZWRpYVdpZHRoSW5wdXQudmFsdWUgPSAnJyArIGxhc3RQYWdlU2l6ZTtcclxuXHRcdFx0XHRvdXRlck1lZGlhRGl2LnN0eWxlLndpZHRoID0gbWVkaWFXaWR0aElucHV0LnZhbHVlICsgJyUnO1xyXG5cdFx0XHRcdGxpbmVzRGl2LnN0eWxlLndpZHRoID0gMTAwIC0gcGFyc2VJbnQobWVkaWFXaWR0aElucHV0LnZhbHVlKSArICclJztcclxuXHRcdFx0XHRpZiAobGFzdFBhZ2VGaWxlSUQgIT09IC0xICYmIGxhc3RQYWdlRmlsZUlEIDwgc252LnNvdXJjZUZvbGRlci5maWxlQ291bnQpIHtcclxuXHRcdFx0XHRcdGNvbnN0IG1lZGlhRmlsZUlEID0gbGFzdFBhZ2VGaWxlSUQgKyAxO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdFBhZ2UubWVkaWFGaWxlSUQgPSBtZWRpYUZpbGVJRDtcclxuXHRcdFx0XHRcdG1lZGlhRmlsZUlESW5wdXQudmFsdWUgPSAnJyArIG1lZGlhRmlsZUlEO1xyXG5cdFx0XHRcdFx0aWYgKG1lZGlhRmlsZUlEID4gMCkge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBtZWRpYUZpbGUgPSA8U2luZ2xlTWVkaWFGaWxlPiBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIG1lZGlhRmlsZUlEKTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgbWVkaWFGaWxlLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMucGFnZXMucHVzaChkZWZhdWx0UGFnZSk7XHJcblx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0fVxyXG5cdFx0YXdhaXQgdGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0VkaXQoc252LCBsaW5lc0Rpdik7XHJcblx0XHRtZWRpYUZpbGVJRElucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XTtcclxuXHRcdFx0Y3VycmVudFBhZ2UubWVkaWFGaWxlSUQgPSBwYXJzZUludChtZWRpYUZpbGVJRElucHV0LnZhbHVlKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0XHRcdGNvbnN0IG1lZGlhRmlsZSA9IDxTaW5nbGVNZWRpYUZpbGU+IGF3YWl0IENGRUZpbGVIYW5kbGVyLkxvYWRGaWxlKHNudiwgY3VycmVudFBhZ2UubWVkaWFGaWxlSUQpO1xyXG5cdFx0XHRhd2FpdCBtZWRpYUZpbGUuRGlzcGxheU1lZGlhT25seShtZWRpYURpdiwgc252KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgTG9hZEN1cnJlbnRQYWdlRGlzcGxheU9ubHkoc252OiBTb3VyY2VBbmRWYXVsdCwgbWFpbkRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHRcdG1haW5EaXYuZW1wdHkoKTtcclxuXHJcblx0XHR0aGlzLkxvYWRQYWdlU2VsZWN0b3Ioc252LCBtYWluRGl2KTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgcGFuZWxEaXYgPSBtYWluRGl2LmNyZWF0ZURpdignaGJveCcpO1xyXG5cdFx0Y29uc3Qgb3V0ZXJNZWRpYURpdiA9IHBhbmVsRGl2LmNyZWF0ZURpdigndmJveCcpO1xyXG5cdFx0Y29uc3QgbGluZXNEaXYgPSBwYW5lbERpdi5jcmVhdGVEaXYoJ3Zib3gnKTtcclxuXHJcblx0XHRjb25zdCBtZWRpYURpdiA9IG91dGVyTWVkaWFEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0XHRvdXRlck1lZGlhRGl2LnN0eWxlLndpZHRoID0gJzUwJSc7XHJcblx0XHRtZWRpYURpdi5zdHlsZS5vYmplY3RGaXQgPSAnY29udGFpbic7XHJcblx0XHRsaW5lc0Rpdi5zdHlsZS53aWR0aCA9ICc1MCUnO1xyXG5cdFx0bGluZXNEaXYuc3R5bGUubWF4SGVpZ2h0ID0gJzgwdmgnO1xyXG5cdFx0bGluZXNEaXYuc3R5bGUucG9zaXRpb24gPSAnc3RpY2t5JztcclxuXHRcdGxpbmVzRGl2LnN0eWxlLnRvcCA9ICcwJSc7XHJcblxyXG5cdFx0Y29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF07XHJcblx0XHRjb25zdCBtZWRpYUZpbGVJRCA9IGN1cnJlbnRQYWdlLm1lZGlhRmlsZUlEO1xyXG5cdFx0aWYgKG1lZGlhRmlsZUlEID4gMCkge1xyXG5cdFx0XHRjb25zdCBtZWRpYUZpbGUgPSA8U2luZ2xlTWVkaWFGaWxlPiBhd2FpdCBDRkVGaWxlSGFuZGxlci5Mb2FkRmlsZShzbnYsIG1lZGlhRmlsZUlEKTtcclxuXHRcdFx0YXdhaXQgbWVkaWFGaWxlLkRpc3BsYXlNZWRpYU9ubHkobWVkaWFEaXYsIHNudik7XHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLm1lZGlhU2l6ZVBlcmNlbnRhZ2UpIHtcclxuXHRcdFx0Y29uc3Qgd2lkdGggPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubWVkaWFTaXplUGVyY2VudGFnZTtcclxuXHRcdFx0b3V0ZXJNZWRpYURpdi5zdHlsZS53aWR0aCA9IHdpZHRoICsgJyUnO1xyXG5cdFx0XHRsaW5lc0Rpdi5zdHlsZS53aWR0aCA9IDEwMCAtIHdpZHRoICsgJyUnO1xyXG5cdFx0fVxyXG5cdFx0YXdhaXQgdGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0Rpc3BsYXlPbmx5KGxpbmVzRGl2KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudjogU291cmNlQW5kVmF1bHQsIGxpbmVzRGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0bGluZXNEaXYuZW1wdHkoKTtcclxuXHJcblx0XHRjb25zdCBzcGVha0RpdiA9IGxpbmVzRGl2LmNyZWF0ZURpdigpO1xyXG5cdFx0c3BlYWtEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0c3BlYWtEaXYuc3R5bGUudG9wID0gJzBweCc7XHJcblx0XHRzcGVha0Rpdi5zdHlsZS5sZWZ0ID0gJzBweCc7XHJcblxyXG5cdFx0Y29uc3QgZXhpc3RpbmdMaW5lc0RpdiA9IGxpbmVzRGl2LmNyZWF0ZURpdigpO1xyXG5cdFx0ZXhpc3RpbmdMaW5lc0Rpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAnaGJveCcgOiAndmJveCc7XHJcblx0XHRpZiAodGhpcy5kb1ZlcnRpY2FsKSB7XHJcblx0XHRcdGV4aXN0aW5nTGluZXNEaXYuc3R5bGUub3ZlcmZsb3dYID0gJ3Njcm9sbCc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRleGlzdGluZ0xpbmVzRGl2LnN0eWxlLm92ZXJmbG93WSA9ICdzY3JvbGwnO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgY3VycmVudEluZGV4ID0gaTtcclxuXHRcdFx0Y29uc3QgY3VycmVudExpbmUgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbaV07XHJcblx0XHRcdGNvbnN0IHNwZWFrZXIgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudExpbmUuc3BlYWtlckluZGV4XTtcclxuXHJcblx0XHRcdGNvbnN0IGxpbmVEaXYgPSBleGlzdGluZ0xpbmVzRGl2LmNyZWF0ZURpdigpO1xyXG5cdFx0XHRsaW5lRGl2LmNsYXNzTmFtZSA9IHRoaXMuZG9WZXJ0aWNhbCA/ICd2Ym94JyA6ICdoYm94JztcclxuXHJcblx0XHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGxpbmVEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJy0nIH0gKTtcclxuXHRcdFx0ZGVsZXRlQnV0dG9uLmNsYXNzTmFtZSA9ICdjZmUtcmVtb3ZlLWJ1dHRvbic7XHJcblx0XHRcdGRlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLkxvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnYsIGxpbmVzRGl2KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy5kb1ZlcnRpY2FsKSB7XHJcblx0XHRcdFx0dGhpcy5NYWtlVmVydGljYWwoZGVsZXRlQnV0dG9uKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgaW5kZXhUZXh0RWwgPSB0aGlzLkRpc3BsYXlUZXh0KGxpbmVEaXYsIDI1LCAnJyArIGN1cnJlbnRJbmRleCk7XHJcblx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcclxuXHRcdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChpbmRleFRleHRFbCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlID09PSAnUGhvdG9sYW5nJykge1xyXG5cdFx0XHRcdGNvbnN0IHBsYXlCdXR0b24gPSBsaW5lRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdcdTI1QjcnIH0gKTtcclxuXHRcdFx0XHRwbGF5QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdFx0XHRjb25zdCBwb3B1cCA9IHNwZWFrRGl2LmNyZWF0ZURpdigpO1xyXG5cdFx0XHRcdFx0cG9wdXAuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0XHRcdFx0cG9wdXAuc3R5bGUudG9wID0gJzBweCc7XHJcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS5sZWZ0ID0gJzBweCc7XHJcblx0XHRcdFx0XHRjb25zdCBwaG90b2xpbmUgPSBuZXcgUGhvdG9MaW5lKGxpbmVJbnB1dC52YWx1ZSk7XHJcblx0XHRcdFx0XHRwaG90b2xpbmUuU3BlYWsocG9wdXAsIDIwMCwgWzEwMCwgMjUwLCA1MDBdLCBbMCwgNTAwXSwgZmFsc2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAodGhpcy5kb1ZlcnRpY2FsKSB7XHJcblx0XHRcdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChwbGF5QnV0dG9uKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IGNoYXJEcm9wZG93bkJ1dHRvbiA9IGxpbmVEaXYuY3JlYXRlRGl2KCk7XHJcblx0XHRcdGNvbnN0IGNoYXJEcm9wZG93bkRpdiA9IGNoYXJEcm9wZG93bkJ1dHRvbi5jcmVhdGVEaXYoKTtcclxuXHRcdFx0Y2hhckRyb3Bkb3duRGl2LnN0eWxlLmhlaWdodCA9ICdmaXQtY29udGVudCc7XHJcblx0XHRcdGNoYXJEcm9wZG93bkRpdi5zdHlsZS53aWR0aCA9ICdmaXQtY29udGVudCc7XHJcblx0XHRcdGNoYXJEcm9wZG93bkRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcblx0XHRcdGNoYXJEcm9wZG93bkJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IHNlbGVjdERpdiA9IGNoYXJEcm9wZG93bkRpdi5jcmVhdGVEaXYoKTtcclxuXHRcdFx0XHRzZWxlY3REaXYuY2xhc3NOYW1lID0gdGhpcy5kb1ZlcnRpY2FsID8gJ2hib3gnIDogJ3Zib3gnO1xyXG5cdFx0XHRcdHNlbGVjdERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHRcdFx0c2VsZWN0RGl2LnN0eWxlLnRvcCA9ICcwJSc7XHJcblx0XHRcdFx0c2VsZWN0RGl2LnN0eWxlLmxlZnQgPSAnMCUnO1xyXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRjb25zdCBjdXJyZW50Q2hhckluZGV4ID0gaTtcclxuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRDaGFyID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRDaGFySW5kZXhdO1xyXG5cdFx0XHRcdFx0Y29uc3QgY3VycmVudE9wdGlvbiA9IHNlbGVjdERpdi5jcmVhdGVEaXYoKTtcclxuXHRcdFx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5NYWtlVmVydGljYWwoY3VycmVudE9wdGlvbik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAodGhpcy5sYW5ndWFnZSAhPT0gJ1Bob3RvbGFuZycpIHtcclxuXHRcdFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjdXJyZW50Q2hhci5iYWNrZ3JvdW5kQ29sb3I7XHJcblx0XHRcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuY29sb3IgPSBjdXJyZW50Q2hhci5jb2xvcjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuekluZGV4ID0gJzInO1xyXG5cdFx0XHRcdFx0dGhpcy5EaXNwbGF5VGV4dChjdXJyZW50T3B0aW9uLCAyNSwgY3VycmVudENoYXIubmFtZSk7XHJcblx0XHRcdFx0XHRjdXJyZW50T3B0aW9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lc1tjdXJyZW50SW5kZXhdLnNwZWFrZXJJbmRleCA9IGN1cnJlbnRDaGFySW5kZXg7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuU2F2ZShzbnYpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLkxvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnYsIGxpbmVzRGl2KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IG5hbWVFbCA9IHRoaXMuRGlzcGxheVRleHQoY2hhckRyb3Bkb3duRGl2LCAyNSwgdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRMaW5lLnNwZWFrZXJJbmRleF0ubmFtZSk7XHJcblx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcclxuXHRcdFx0XHR0aGlzLk1ha2VWZXJ0aWNhbChuYW1lRWwpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICh0aGlzLmxhbmd1YWdlICE9PSAnUGhvdG9sYW5nJykge1xyXG5cdFx0XHRcdG5hbWVFbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzcGVha2VyLmJhY2tncm91bmRDb2xvcjtcclxuXHRcdFx0XHRuYW1lRWwuc3R5bGUuY29sb3IgPSBzcGVha2VyLmNvbG9yO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBsaW5lSW5wdXQgPSB0aGlzLkRpc3BsYXlMaW5lRWRpdChsaW5lRGl2LCBjdXJyZW50TGluZSk7XHJcblx0XHRcdGlmICh0aGlzLmRvVmVydGljYWwpIHtcclxuXHRcdFx0XHRsaW5lSW5wdXQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG5cdFx0XHRcdHRoaXMuTWFrZVZlcnRpY2FsKGxpbmVJbnB1dCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGluZUlucHV0LnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsaW5lSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0Y3VycmVudExpbmUuY29udGVudCA9IGxpbmVJbnB1dC52YWx1ZTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Y29uc3QgYWRkQnV0dG9uID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnKycgfSApO1xyXG5cdFx0YWRkQnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5wdXNoKG5ldyBEaWFsb2d1ZUxpbmUoMCkpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHRcdFx0YXdhaXQgdGhpcy5Mb2FkRGlhbG9ndWVMaW5lc0VkaXQoc252LCBsaW5lc0Rpdik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBwcml2YXRlIGFzeW5jIExvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnY6IFNvdXJjZUFuZFZhdWx0LCBsaW5lc0RpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuXHQvLyBcdGNvbnN0IGV4aXN0aW5nTGluZXNEaXYgPSBsaW5lc0Rpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHQvLyBcdGV4aXN0aW5nTGluZXNEaXYuc3R5bGUub3ZlcmZsb3dYID0gJ3Njcm9sbCc7XHJcblx0Ly8gXHRjb25zdCBmb250U2l6ZSA9ICcxNy41cHgnO1xyXG5cdC8vIFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXMubGVuZ3RoOyBpKyspIHtcclxuXHQvLyBcdFx0Y29uc3QgY3VycmVudEluZGV4ID0gaTtcclxuXHQvLyBcdFx0Y29uc3QgY3VycmVudExpbmUgPSB0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbaV07XHJcblx0Ly8gXHRcdGNvbnN0IHNwZWFrZXJJbmRleCA9IGN1cnJlbnRMaW5lLnNwZWFrZXJJbmRleDtcclxuXHQvLyBcdFx0Y29uc3QgY3VycmVudFNwZWFrZXIgPSB0aGlzLmNoYXJhY3RlcnNbc3BlYWtlckluZGV4XTtcclxuXHQvLyBcdFx0Y29uc3QgbGluZURpdiA9IGV4aXN0aW5nTGluZXNEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblx0Ly8gXHRcdGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGxpbmVEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJy0nIH0gKTtcclxuXHQvLyBcdFx0ZGVsZXRlQnV0dG9uLmNsYXNzTmFtZSA9ICdjZmUtcmVtb3ZlLWJ1dHRvbic7XHJcblx0Ly8gXHRcdGRlbGV0ZUJ1dHRvbi5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XHJcblx0Ly8gXHRcdGRlbGV0ZUJ1dHRvbi5zdHlsZS50ZXh0T3JpZW50YXRpb24gPSAndXByaWdodCc7XHJcblx0Ly8gXHRcdGRlbGV0ZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdC8vIFx0XHRcdHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKTtcclxuXHQvLyBcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHQvLyBcdFx0XHRhd2FpdCB0aGlzLkxvYWREaWFsb2d1ZUxpbmVzRWRpdChzbnYsIGxpbmVzRGl2KTtcclxuXHQvLyBcdFx0fVxyXG5cdC8vIFx0XHRjb25zdCBpbmRleEVsZW1lbnQgPSBsaW5lRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnJyArICBjdXJyZW50SW5kZXggfSApO1xyXG5cdC8vIFx0XHRpbmRleEVsZW1lbnQuc3R5bGUuY29sb3IgPSBjdXJyZW50U3BlYWtlci5jb2xvcjtcclxuXHQvLyBcdFx0aW5kZXhFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSAnSHdheXVSZWFsJztcclxuXHQvLyBcdFx0aW5kZXhFbGVtZW50LnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHQvLyBcdFx0aW5kZXhFbGVtZW50LnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0JztcclxuXHQvLyBcdFx0Y29uc3QgY2hhckRyb3Bkb3duRGl2ID0gbGluZURpdi5jcmVhdGVEaXYoKTtcclxuXHQvLyBcdFx0Y2hhckRyb3Bkb3duRGl2LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuXHQvLyBcdFx0Y29uc3QgY2hhckRyb3Bkb3duID0gY2hhckRyb3Bkb3duRGl2LmNyZWF0ZUVsKCdidXR0b24nKTtcclxuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmhlaWdodCA9ICdmaXQtY29udGVudCc7XHJcblx0Ly8gXHRcdGNoYXJEcm9wZG93bi5vbmNsaWNrID0gKCkgPT4ge1xyXG5cdC8vIFx0XHRcdGNvbnN0IHNlbGVjdERpdiA9IGNoYXJEcm9wZG93bkRpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuXHQvLyBcdFx0XHRzZWxlY3REaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdC8vIFx0XHRcdHNlbGVjdERpdi5zdHlsZS50b3AgPSAnMCUnO1xyXG5cdC8vIFx0XHRcdHNlbGVjdERpdi5zdHlsZS5sZWZ0ID0gJzAlJztcclxuXHQvLyBcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcmFjdGVycy5sZW5ndGg7IGkrKykge1xyXG5cdC8vIFx0XHRcdFx0Y29uc3QgY3VycmVudENoYXJJbmRleCA9IGk7XHJcblx0Ly8gXHRcdFx0XHRjb25zdCBjdXJyZW50Q2hhciA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50Q2hhckluZGV4XTtcclxuXHQvLyBcdFx0XHRcdGNvbnN0IGN1cnJlbnRPcHRpb24gPSBzZWxlY3REaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogY3VycmVudENoYXIubmFtZSwgdmFsdWU6ICcnICsgaSB9ICk7XHJcblx0Ly8gXHRcdFx0XHRjdXJyZW50T3B0aW9uLnN0eWxlLmNvbG9yID0gY3VycmVudENoYXIuY29sb3I7XHJcblx0Ly8gXHRcdFx0XHRjdXJyZW50T3B0aW9uLnN0eWxlLmZvbnRGYW1pbHkgPSAnSHdheXVSZWFsJztcclxuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY3VycmVudENoYXIuYmFja2dyb3VuZENvbG9yO1xyXG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5zdHlsZS53cml0aW5nTW9kZSA9ICd2ZXJ0aWNhbC1scic7XHJcblx0Ly8gXHRcdFx0XHRjdXJyZW50T3B0aW9uLnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0JztcclxuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuaGVpZ2h0ID0gJ2ZpdC1jb250ZW50JztcclxuXHQvLyBcdFx0XHRcdGN1cnJlbnRPcHRpb24uc3R5bGUuekluZGV4ID0gJzInO1xyXG5cdC8vIFx0XHRcdFx0Y3VycmVudE9wdGlvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdC8vIFx0XHRcdFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXNbY3VycmVudEluZGV4XS5zcGVha2VySW5kZXggPSBjdXJyZW50Q2hhckluZGV4O1xyXG5cdC8vIFx0XHRcdFx0XHRjb25zdCBuZXdTcGVha2VyQ29sb3IgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudENoYXJJbmRleF0uY29sb3I7XHJcblx0Ly8gXHRcdFx0XHRcdGNvbnN0IG5ld0JhY2tncm91bmRDb2xvciA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50Q2hhckluZGV4XS5iYWNrZ3JvdW5kQ29sb3I7XHJcblx0Ly8gXHRcdFx0XHRcdGNoYXJEcm9wZG93bi5zdHlsZS5jb2xvciA9IG5ld1NwZWFrZXJDb2xvcjtcclxuXHQvLyBcdFx0XHRcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG5ld0JhY2tncm91bmRDb2xvcjtcclxuXHQvLyBcdFx0XHRcdFx0Y2hhckRyb3Bkb3duLnRleHRDb250ZW50ID0gdGhpcy5jaGFyYWN0ZXJzW2N1cnJlbnRDaGFySW5kZXhdLm5hbWU7XHJcblx0Ly8gXHRcdFx0XHRcdGxpbmVJbnB1dC5zdHlsZS5jb2xvciA9IG5ld1NwZWFrZXJDb2xvcjtcclxuXHQvLyBcdFx0XHRcdFx0bGluZUlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG5ld0JhY2tncm91bmRDb2xvcjtcclxuXHQvLyBcdFx0XHRcdFx0aW5kZXhFbGVtZW50LnN0eWxlLmNvbG9yID0gbmV3U3BlYWtlckNvbG9yO1xyXG5cdC8vIFx0XHRcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHQvLyBcdFx0XHRcdFx0c2VsZWN0RGl2LnJlbW92ZSgpO1xyXG5cdC8vIFx0XHRcdFx0fVxyXG5cdC8vIFx0XHRcdH1cclxuXHQvLyBcdFx0fVxyXG5cdC8vIFx0XHRjaGFyRHJvcGRvd24udGV4dENvbnRlbnQgPSB0aGlzLmNoYXJhY3RlcnNbY3VycmVudExpbmUuc3BlYWtlckluZGV4XS5uYW1lO1xyXG5cdC8vIFx0XHRjaGFyRHJvcGRvd24uc3R5bGUuY29sb3IgPSBjdXJyZW50U3BlYWtlci5jb2xvcjtcclxuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGN1cnJlbnRTcGVha2VyLmJhY2tncm91bmRDb2xvcjtcclxuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLmZvbnRGYW1pbHkgPSAnSHdheXVSZWFsJztcclxuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLndyaXRpbmdNb2RlID0gJ3ZlcnRpY2FsLWxyJztcclxuXHQvLyBcdFx0Y2hhckRyb3Bkb3duLnN0eWxlLnRleHRPcmllbnRhdGlvbiA9ICd1cHJpZ2h0JztcclxuXHQvLyBcdFx0Y29uc3QgbGluZUlucHV0ID0gbGluZURpdi5jcmVhdGVFbCgndGV4dGFyZWEnKTtcclxuXHQvLyBcdFx0bGluZUlucHV0LnNwZWxsY2hlY2sgPSBmYWxzZTtcclxuXHQvLyBcdFx0bGluZUlucHV0LnN0eWxlLm92ZXJmbG93WCA9ICdzY3JvbGwnO1xyXG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUud3JpdGluZ01vZGUgPSAndmVydGljYWwtbHInO1xyXG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUudGV4dE9yaWVudGF0aW9uID0gJ3VwcmlnaHQnO1xyXG5cdC8vIFx0XHRsaW5lSW5wdXQuZGVmYXVsdFZhbHVlID0gY3VycmVudExpbmUuY29udGVudDtcclxuXHQvLyBcdFx0bGluZUlucHV0LnN0eWxlLmNvbG9yID0gY3VycmVudFNwZWFrZXIuY29sb3I7XHJcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjdXJyZW50U3BlYWtlci5iYWNrZ3JvdW5kQ29sb3I7XHJcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5mb250RmFtaWx5ID0gJ0h3YXl1UmVhbCc7XHJcblx0Ly8gXHRcdGxpbmVJbnB1dC5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplO1xyXG5cdC8vIFx0XHRsaW5lSW5wdXQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG5cdC8vIFx0XHRsaW5lSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcblx0Ly8gXHRcdFx0dGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzW2N1cnJlbnRJbmRleF0uY29udGVudCA9IGxpbmVJbnB1dC52YWx1ZTtcclxuXHQvLyBcdFx0XHRhd2FpdCB0aGlzLlNhdmUoc252KTtcclxuXHQvLyBcdFx0fVxyXG5cdC8vIFx0fVxyXG5cdC8vIFx0Y29uc3QgYWRkQnV0dG9uID0gZXhpc3RpbmdMaW5lc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnKycgfSApO1xyXG5cdC8vIFx0YWRkQnV0dG9uLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuXHQvLyBcdGFkZEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdC8vIFx0XHR0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2VJbmRleF0ubGluZXMucHVzaChuZXcgRGlhbG9ndWVMaW5lKDApKTtcclxuXHQvLyBcdFx0YXdhaXQgdGhpcy5TYXZlKHNudik7XHJcblx0Ly8gXHRcdGF3YWl0IHRoaXMuTG9hZERpYWxvZ3VlTGluZXNFZGl0KHNudiwgbGluZXNEaXYpO1xyXG5cdC8vIFx0fVxyXG5cdC8vIH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBMb2FkRGlhbG9ndWVMaW5lc0Rpc3BsYXlPbmx5KGxpbmVzRGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0bGluZXNEaXYuZW1wdHkoKTtcclxuXHJcblx0XHRjb25zdCBzcGVha0RpdiA9IGxpbmVzRGl2LmNyZWF0ZURpdigpO1xyXG5cdFx0c3BlYWtEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0c3BlYWtEaXYuc3R5bGUudG9wID0gJzBweCc7XHJcblx0XHRzcGVha0Rpdi5zdHlsZS5sZWZ0ID0gJzBweCc7XHJcblxyXG5cdFx0Y29uc3QgZXhpc3RpbmdMaW5lc0RpdiA9IGxpbmVzRGl2LmNyZWF0ZURpdigndmJveCcpO1xyXG5cdFx0ZXhpc3RpbmdMaW5lc0Rpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAnaGJveCcgOiAndmJveCcgO1xyXG5cdFx0aWYgKHRoaXMuZG9WZXJ0aWNhbCkge1xyXG5cdFx0XHRleGlzdGluZ0xpbmVzRGl2LnN0eWxlLm92ZXJmbG93WCA9ICdzY3JvbGwnO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZXhpc3RpbmdMaW5lc0Rpdi5zdHlsZS5vdmVyZmxvd1kgPSAnc2Nyb2xsJztcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRjb25zdCBjdXJyZW50TGluZSA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lc1tpXTtcclxuXHRcdFx0Y29uc3Qgc3BlYWtlciA9IHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50TGluZS5zcGVha2VySW5kZXhdO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKHRoaXMubGFuZ3VhZ2UgPT09ICdQaG90b2xhbmcnKSB7XHJcblx0XHRcdFx0Y29uc3QgcGxheUJ1dHRvbiA9IGV4aXN0aW5nTGluZXNEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1x1MjVCNycgfSApO1xyXG5cdFx0XHRcdHBsYXlCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0XHRcdGNvbnN0IHBvcHVwID0gc3BlYWtEaXYuY3JlYXRlRGl2KCk7XHJcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHRcdFx0XHRwb3B1cC5zdHlsZS50b3AgPSAnMHB4JztcclxuXHRcdFx0XHRcdHBvcHVwLnN0eWxlLmxlZnQgPSAnMHB4JztcclxuXHRcdFx0XHRcdGNvbnN0IHBob3RvbGluZSA9IG5ldyBQaG90b0xpbmUoY3VycmVudExpbmUuY29udGVudCk7XHJcblx0XHRcdFx0XHRwaG90b2xpbmUuU3BlYWsocG9wdXAsIDIwMCwgWzEwMCwgMjUwLCA1MDBdLCBbMCwgNTAwXSwgZmFsc2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgbmFtZURpdiA9IGV4aXN0aW5nTGluZXNEaXYuY3JlYXRlRGl2KCcnKTtcclxuXHRcdFx0bmFtZURpdi5jbGFzc05hbWUgPSB0aGlzLmRvVmVydGljYWwgPyAndmJveCcgOiAnaGJveCc7XHJcblx0XHRcdGNvbnN0IGxpbmVEaXYgPSBleGlzdGluZ0xpbmVzRGl2LmNyZWF0ZURpdignJyk7XHJcblx0XHRcdGxpbmVEaXYuY2xhc3NOYW1lID0gdGhpcy5kb1ZlcnRpY2FsID8gJ3Zib3gnIDogJ2hib3gnO1xyXG5cclxuXHRcdFx0Y29uc3QgbmFtZUVsID0gdGhpcy5EaXNwbGF5VGV4dChuYW1lRGl2LCAyNSwgc3BlYWtlci5uYW1lKTtcclxuXHRcdFx0bmFtZUVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHNwZWFrZXIuYmFja2dyb3VuZENvbG9yO1xyXG5cdFx0XHRuYW1lRWwuc3R5bGUuY29sb3IgPSBzcGVha2VyLmNvbG9yO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKHRoaXMubGFuZ3VhZ2UgPT09ICdQaG90b2xhbmcnKSB7XHJcblx0XHRcdFx0Y29uc3QgcGhvdG9MaW5lID0gbmV3IFBob3RvTGluZShjdXJyZW50TGluZS5jb250ZW50KTtcclxuXHRcdFx0XHRwaG90b0xpbmUuRGlzcGxheVN0YXRpYyhsaW5lRGl2LCAyNSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y29uc3QgbGluZUVsID0gdGhpcy5EaXNwbGF5VGV4dChsaW5lRGl2LCAyNSwgY3VycmVudExpbmUuY29udGVudCk7XHJcblx0XHRcdFx0bGluZUVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHNwZWFrZXIuYmFja2dyb3VuZENvbG9yO1xyXG5cdFx0XHRcdGxpbmVFbC5zdHlsZS5jb2xvciA9IHNwZWFrZXIuY29sb3I7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLmxhbmd1YWdlID09PSAnUGhvdG9sYW5nJykge1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50UGFnZUluZGV4XS5saW5lcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRMaW5lID0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRQYWdlSW5kZXhdLmxpbmVzW2ldO1xyXG5cclxuXHRcdFx0XHRjb25zdCBuYW1lRGl2ID0gc3BlYWtEaXYuY3JlYXRlRGl2KCk7XHJcblx0XHRcdFx0bmFtZURpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHRcdFx0bmFtZURpdi5zdHlsZS50b3AgPSAnMHB4JztcclxuXHRcdFx0XHRuYW1lRGl2LnN0eWxlLmxlZnQgPSAnMHB4JztcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjb25zdCBwaG90b05hbWUgPSBuZXcgUGhvdG9MaW5lKHRoaXMuY2hhcmFjdGVyc1tjdXJyZW50TGluZS5zcGVha2VySW5kZXhdLm5hbWUpO1xyXG5cdFx0XHRcdGF3YWl0IHBob3RvTmFtZS5TcGVhayhuYW1lRGl2LCAxMDAsIFsxMDAsIDI1MCwgNTAwXSwgWzAsIDUwMF0sIGZhbHNlKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjb25zdCBwb3B1cCA9IHNwZWFrRGl2LmNyZWF0ZURpdigpO1xyXG5cdFx0XHRcdHBvcHVwLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHRcdFx0XHRwb3B1cC5zdHlsZS50b3AgPSAnMHB4JztcclxuXHRcdFx0XHRwb3B1cC5zdHlsZS5sZWZ0ID0gJzBweCc7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHBob3RvTGluZSA9IG5ldyBQaG90b0xpbmUoY3VycmVudExpbmUuY29udGVudCk7XHJcblx0XHRcdFx0YXdhaXQgcGhvdG9MaW5lLlNwZWFrKHBvcHVwLCAyMDAsIFsxMDAsIDI1MCwgNTAwXSwgWzAsIDUwMF0sIGZhbHNlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmNsYXNzIFBhZ2Uge1xyXG5cdG1lZGlhRmlsZUlEOiBudW1iZXI7XHJcblx0bGluZXM6IERpYWxvZ3VlTGluZVtdO1xyXG5cdG1lZGlhU2l6ZVBlcmNlbnRhZ2U6IG51bWJlcjtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMubWVkaWFGaWxlSUQgPSAtMTtcclxuXHRcdHRoaXMubGluZXMgPSBbXTtcclxuXHRcdHRoaXMubWVkaWFTaXplUGVyY2VudGFnZSA9IDUwO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgRGlhbG9ndWVMaW5lIHtcclxuXHRzcGVha2VySW5kZXg6IG51bWJlcjtcclxuXHRjb250ZW50OiBzdHJpbmc7XHJcblx0Y29uc3RydWN0b3Ioc3BlYWtlckluZGV4OiBudW1iZXIpIHtcclxuXHRcdHRoaXMuc3BlYWtlckluZGV4ID0gc3BlYWtlckluZGV4O1xyXG5cdFx0dGhpcy5jb250ZW50ID0gJyc7XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBDaGFyYWN0ZXIge1xyXG5cdG5hbWU6IHN0cmluZztcclxuXHRjb2xvcjogc3RyaW5nO1xyXG5cdGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xyXG5cdGNvbnN0cnVjdG9yKG5hbWUgPSAnJywgY29sb3IgPSAnd2hpdGUnLCBiYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnKSB7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy5jb2xvciA9IGNvbG9yO1xyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3I7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBDRkVGaWxlIH0gZnJvbSBcIi4vY2ZlLWZpbGVcIjtcbmltcG9ydCB7IEZvbGRlciB9IGZyb20gXCIuL2ZvbGRlclwiO1xuaW1wb3J0IHsgUGxheWxpc3QgfSBmcm9tIFwiLi9wbGF5bGlzdFwiO1xuaW1wb3J0IHsgU2luZ2xlTWVkaWFGaWxlIH0gZnJvbSBcIi4vc2luZ2xlLW1lZGlhLWZpbGVcIjtcbmltcG9ydCB7IFNvdXJjZUFuZFZhdWx0IH0gZnJvbSBcIi4vc252XCI7XG5pbXBvcnQgeyBWYXJpYW50TWVkaWFGaWxlIH0gZnJvbSBcIi4vdmFyaWFudC1tZWRpYS1maWxlXCI7XG5pbXBvcnQgeyBTb3VyY2VGb2xkZXJTaG9ydGN1dCB9IGZyb20gXCIuL3NvdXJjZS1mb2xkZXItc2hvcnRjdXRcIjtcbmltcG9ydCB7IENvbmxhbmdEaWN0aW9uYXJ5IH0gZnJvbSBcIi4vY29ubGFuZy1kaWN0aW9uYXJ5XCI7XG5pbXBvcnQgeyBTdG9yeSB9IGZyb20gXCIuL3N0b3J5XCI7XG5cbmV4cG9ydCBjbGFzcyBDRkVGaWxlSGFuZGxlciB7XG5cblx0LyoqXG5cdCAqIEFsbCBvZiB0aGUga25vd24gZmlsZSBmb3JtYXRzXG5cdCAqL1xuXHRzdGF0aWMgS25vd25GaWxlVHlwZXM6IHN0cmluZ1tdID0gW1xuXHRcdCdGb2xkZXInLFxuXHRcdCdTaW5nbGUgTWVkaWEgRmlsZScsXG5cdFx0J1ZhcmlhbnQgTWVkaWEgRmlsZScsXG5cdFx0J1BsYXlsaXN0Jyxcblx0XHQnU3RvcnknLFxuXHRcdCdTb3VyY2UgRm9sZGVyIFNob3J0Y3V0Jyxcblx0XHQnQ29ubGFuZyBEaWN0aW9uYXJ5J1xuXHRdXG5cblx0c3RhdGljIGFzeW5jIENyZWF0ZU5ldyhzbnY6IFNvdXJjZUFuZFZhdWx0LCBmaWxlVHlwZTogc3RyaW5nLCBwYXJlbnRGb2xkZXJJRDogbnVtYmVyKTogUHJvbWlzZTxDRkVGaWxlPiB7XG5cdFx0bGV0IG5ld0ZpbGU6IENGRUZpbGU7XG5cdFx0c3dpdGNoKGZpbGVUeXBlKSB7XG5cdFx0XHRjYXNlICdGb2xkZXInOlxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IEZvbGRlci5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252LCBmaWxlVHlwZSwgcGFyZW50Rm9sZGVySUQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1NpbmdsZSBNZWRpYSBGaWxlJzpcblx0XHRcdFx0bmV3RmlsZSA9IGF3YWl0IFNpbmdsZU1lZGlhRmlsZS5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252LCBmaWxlVHlwZSwgcGFyZW50Rm9sZGVySUQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1ZhcmlhbnQgTWVkaWEgRmlsZSc6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBWYXJpYW50TWVkaWFGaWxlLkNyZWF0ZU5ld0ZpbGVGb3JMYXllcihzbnYsIGZpbGVUeXBlLCBwYXJlbnRGb2xkZXJJRCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUGxheWxpc3QnOlxuXHRcdFx0XHRuZXdGaWxlID0gYXdhaXQgUGxheWxpc3QuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklEKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdTdG9yeSc6XG5cdFx0XHRcdG5ld0ZpbGUgPSBhd2FpdCBTdG9yeS5DcmVhdGVOZXdGaWxlRm9yTGF5ZXIoc252LCBmaWxlVHlwZSwgcGFyZW50Rm9sZGVySUQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1NvdXJjZSBGb2xkZXIgU2hvcnRjdXQnOlxuXHRcdFx0XHRuZXdGaWxlID0gYXdhaXQgU291cmNlRm9sZGVyU2hvcnRjdXQuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklEKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdDb25sYW5nIERpY3Rpb25hcnknOlxuXHRcdFx0XHRuZXdGaWxlID0gYXdhaXQgQ29ubGFuZ0RpY3Rpb25hcnkuQ3JlYXRlTmV3RmlsZUZvckxheWVyKHNudiwgZmlsZVR5cGUsIHBhcmVudEZvbGRlcklEKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGF3YWl0IG5ld0ZpbGUuU2F2ZShzbnYpO1xuXHRcdHJldHVybiBuZXdGaWxlO1xuXHR9XG5cblx0c3RhdGljIGFzeW5jIExvYWRGaWxlKHNudjogU291cmNlQW5kVmF1bHQsIGZpbGVJRDogbnVtYmVyKTogUHJvbWlzZTxDRkVGaWxlPiB7XG5cdFx0Y29uc3Qgc291cmNlRm9sZGVyID0gc252LnNvdXJjZUZvbGRlcjtcblx0XHRjb25zdCB2YXVsdCA9IHNudi52YXVsdDtcblxuXHRcdGNvbnN0IHRGaWxlID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aChzb3VyY2VGb2xkZXIudmF1bHRQYXRoICsgJy8nICsgZmlsZUlEICsgJy5qc29uJyk7XG5cdFx0aWYgKHRGaWxlID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBFcnJvcihcIkZpbGUgY291bGQgbm90IGJlIGZvdW5kIGF0IHRoZSBwYXRoOiBcIiArIHNvdXJjZUZvbGRlci52YXVsdFBhdGggKyAnLycgKyBmaWxlSUQgKyAnLmpzb24nKTtcblx0XHR9XG5cdFx0Y29uc3QganNvbkRhdGEgPSBhd2FpdCB2YXVsdC5jYWNoZWRSZWFkKHRGaWxlKTtcblx0XHRjb25zdCBwbGFpbk9iamVjdCA9IEpTT04ucGFyc2UoanNvbkRhdGEpO1xuXHRcdHN3aXRjaChwbGFpbk9iamVjdC5maWxlVHlwZSkge1xuXHRcdFx0Y2FzZSAnRm9sZGVyJzpcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBhd2FpdCBPYmplY3QuYXNzaWduKG5ldyBGb2xkZXIoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnU2luZ2xlIE1lZGlhIEZpbGUnOlxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgT2JqZWN0LmFzc2lnbihuZXcgU2luZ2xlTWVkaWFGaWxlKCksIHBsYWluT2JqZWN0KTtcblx0XHRcdGNhc2UgJ1ZhcmlhbnQgTWVkaWEgRmlsZSc6XG5cdFx0XHRcdHJldHVybiBhd2FpdCBPYmplY3QuYXNzaWduKG5ldyBWYXJpYW50TWVkaWFGaWxlKCksIHBsYWluT2JqZWN0KTtcblx0XHRcdGNhc2UgJ1BsYXlsaXN0Jzpcblx0XHRcdFx0cmV0dXJuIGF3YWl0IE9iamVjdC5hc3NpZ24obmV3IFBsYXlsaXN0KCksIHBsYWluT2JqZWN0KTtcblx0XHRcdGNhc2UgJ1N0b3J5Jzpcblx0XHRcdFx0cmV0dXJuIGF3YWl0IE9iamVjdC5hc3NpZ24obmV3IFN0b3J5KCksIHBsYWluT2JqZWN0KTtcblx0XHRcdGNhc2UgJ1NvdXJjZSBGb2xkZXIgU2hvcnRjdXQnOlxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgT2JqZWN0LmFzc2lnbihuZXcgU291cmNlRm9sZGVyU2hvcnRjdXQoKSwgcGxhaW5PYmplY3QpO1xuXHRcdFx0Y2FzZSAnQ29ubGFuZyBEaWN0aW9uYXJ5Jzpcblx0XHRcdFx0cmV0dXJuIGF3YWl0IE9iamVjdC5hc3NpZ24obmV3IENvbmxhbmdEaWN0aW9uYXJ5KCksIHBsYWluT2JqZWN0KTtcblx0XHR9XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBWYXVsdCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgU291cmNlRm9sZGVyIH0gZnJvbSBcIi4vc291cmNlLWZvbGRlclwiO1xuXG5leHBvcnQgY2xhc3MgU291cmNlQW5kVmF1bHQge1xuXHRzb3VyY2VGb2xkZXI6IFNvdXJjZUZvbGRlcjtcblx0dmF1bHQ6IFZhdWx0O1xuXHRjb25zdHJ1Y3Rvcihzb3VyY2VGb2xkZXI6IFNvdXJjZUZvbGRlciwgdmF1bHQ6IFZhdWx0KSB7XG5cdFx0dGhpcy5zb3VyY2VGb2xkZXIgPSBzb3VyY2VGb2xkZXI7XG5cdFx0dGhpcy52YXVsdCA9IHZhdWx0O1xuXHR9XG59XG4i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
